<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.0 (Python 3.8.0 on win32)" generated="20220120 16:03:25.787" rpa="false" schemaversion="2">
<suite id="s1" name="Kragle Regression" source="D:\GitRepos\Logitech\gerty\test_cases\01_kragle\kragle_regression.robot">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Set Library Search Order</arg>
<arg>libraries.utilities.system_volume.system_audio</arg>
<arg>libraries.utilities.common</arg>
<arg>libraries.acroname_hub.device.Device</arg>
<arg>libraries.process</arg>
<arg>libraries.device</arg>
<arg>libraries.input.keyboard</arg>
<arg>libraries.process.Application</arg>
<arg>AND</arg>
<arg>common.Restart GHUB</arg>
<arg>AND</arg>
<arg>Disconnect All Devices Connected With Acroname</arg>
<arg>AND</arg>
<arg>Initialize Suite</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Set Library Search Order" library="BuiltIn">
<arg>libraries.utilities.system_volume.system_audio</arg>
<arg>libraries.utilities.common</arg>
<arg>libraries.acroname_hub.device.Device</arg>
<arg>libraries.process</arg>
<arg>libraries.device</arg>
<arg>libraries.input.keyboard</arg>
<arg>libraries.process.Application</arg>
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<status status="PASS" starttime="20220120 16:03:46.747" endtime="20220120 16:03:46.747"/>
</kw>
<kw name="common.Restart GHUB" library="common_keywords_kragle">
<kw name="Log To Console" library="BuiltIn">
<arg>Restarting GHUB...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:03:46.749" endtime="20220120 16:03:46.749"/>
</kw>
<kw name="Control Lghub" library="libraries.process.Application">
<status status="PASS" starttime="20220120 16:03:46.749" endtime="20220120 16:03:46.750"/>
</kw>
<kw name="Terminate All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to terminate all associated processes (including support applications such as VirtualHere).</doc>
<status status="PASS" starttime="20220120 16:03:46.750" endtime="20220120 16:03:50.862"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220120 16:04:00.865" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20220120 16:03:50.863" endtime="20220120 16:04:00.865"/>
</kw>
<kw name="Launch All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to launch all associated processes (including support applications). Already running process are
not re-launched.</doc>
<status status="PASS" starttime="20220120 16:04:00.868" endtime="20220120 16:04:13.773"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220120 16:04:18.776" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220120 16:04:13.774" endtime="20220120 16:04:18.776"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="PASS" starttime="20220120 16:04:18.777" endtime="20220120 16:04:24.051"/>
</kw>
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:04:29.063" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:04:24.055" endtime="20220120 16:04:29.063"/>
</kw>
<status status="FAIL" starttime="20220120 16:04:24.054" endtime="20220120 16:04:29.064"/>
</kw>
<msg timestamp="20220120 16:04:29.064" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220120 16:04:24.053" endtime="20220120 16:04:29.064"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:04:29.065" endtime="20220120 16:04:29.065"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:04:29.065" endtime="20220120 16:04:29.065"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:04:29.066" endtime="20220120 16:04:29.066"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:04:29.066" endtime="20220120 16:04:29.066"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:04:29.067" endtime="20220120 16:04:29.067"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220120 16:04:29.067" endtime="20220120 16:04:29.067"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:04:29.064" endtime="20220120 16:04:29.067"/>
</branch>
<status status="PASS" starttime="20220120 16:04:29.064" endtime="20220120 16:04:29.068"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:04:29.070" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:04:29.069" endtime="20220120 16:04:29.070"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:04:29.070" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:04:29.071" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:04:29.070" endtime="20220120 16:04:29.071"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:04:29.074" endtime="20220120 16:04:29.091"/>
</kw>
<status status="PASS" starttime="20220120 16:04:29.071" endtime="20220120 16:04:29.091"/>
</kw>
<status status="PASS" starttime="20220120 16:04:29.069" endtime="20220120 16:04:29.091"/>
</kw>
<msg timestamp="20220120 16:04:29.091" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220120 16:04:29.068" endtime="20220120 16:04:29.091"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:04:29.092" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:04:29.092" endtime="20220120 16:04:29.093"/>
</kw>
<status status="PASS" starttime="20220120 16:04:24.052" endtime="20220120 16:04:29.093"/>
</iter>
<status status="PASS" starttime="20220120 16:04:24.052" endtime="20220120 16:04:29.093"/>
</for>
<status status="PASS" starttime="20220120 16:04:24.052" endtime="20220120 16:04:29.093"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.Set GHUB As Active Window</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Set GHUB As Active Window" library="common_keywords_kragle">
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220120 16:04:29.095" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220120 16:04:29.095" endtime="20220120 16:04:29.096"/>
</kw>
<if>
<branch type="IF" condition="${is_mac} is ${True}">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>lghub</arg>
<arg>${maximized_screen}</arg>
<status status="NOT RUN" starttime="20220120 16:04:29.096" endtime="20220120 16:04:29.096"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:04:29.096" endtime="20220120 16:04:29.097"/>
</branch>
<branch type="ELSE">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>Logitech G HUB</arg>
<arg>${maximized_screen}</arg>
<status status="PASS" starttime="20220120 16:04:29.097" endtime="20220120 16:04:29.149"/>
</kw>
<status status="PASS" starttime="20220120 16:04:29.097" endtime="20220120 16:04:29.149"/>
</branch>
<status status="PASS" starttime="20220120 16:04:29.096" endtime="20220120 16:04:29.150"/>
</if>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220120 16:04:31.151" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20220120 16:04:29.150" endtime="20220120 16:04:31.151"/>
</kw>
<status status="PASS" starttime="20220120 16:04:29.094" endtime="20220120 16:04:31.151"/>
</kw>
<status status="PASS" starttime="20220120 16:04:29.094" endtime="20220120 16:04:31.152"/>
</kw>
<status status="PASS" starttime="20220120 16:03:46.748" endtime="20220120 16:04:31.152"/>
</kw>
<kw name="Disconnect All Devices Connected With Acroname" library="libraries.acroname_hub.device.Device">
<msg timestamp="20220120 16:04:39.210" level="INFO">1752629528
1752629528
1752629528
1752629528
1752629528
1752629528
1752629528
1752629528</msg>
<status status="PASS" starttime="20220120 16:04:31.153" endtime="20220120 16:04:39.210"/>
</kw>
<kw name="Initialize Suite">
<doc>Set global variables of json data and device connection type.</doc>
<kw name="Get App Version" library="libraries.utilities.utils">
<var>${app_version}</var>
<msg timestamp="20220120 16:04:39.225" level="INFO">${app_version} = staging_2022.2.8659_Windows</msg>
<status status="PASS" starttime="20220120 16:04:39.213" endtime="20220120 16:04:39.225"/>
</kw>
<kw name="Get Os Type" library="libraries.utilities.utils">
<var>${os_type}</var>
<msg timestamp="20220120 16:04:39.227" level="INFO">${os_type} = Windows</msg>
<status status="PASS" starttime="20220120 16:04:39.226" endtime="20220120 16:04:39.227"/>
</kw>
<kw name="Get Platform Details" library="libraries.utilities.utils">
<var>${os_version}</var>
<msg timestamp="20220120 16:04:39.228" level="INFO">${os_version} = Windows-10-10.0.19041-SP0</msg>
<status status="PASS" starttime="20220120 16:04:39.228" endtime="20220120 16:04:39.228"/>
</kw>
<kw name="os.Verify And Set Is Windows As Global Variable" library="operating_system">
<kw name="Is Windows" library="libraries.utilities.system_volume.system_audio">
<var>${status}</var>
<msg timestamp="20220120 16:04:39.231" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:04:39.231" endtime="20220120 16:04:39.231"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${is_windows}</arg>
<arg>${status}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220120 16:04:39.253" level="INFO">${is_windows} = True</msg>
<status status="PASS" starttime="20220120 16:04:39.231" endtime="20220120 16:04:39.254"/>
</kw>
<status status="PASS" starttime="20220120 16:04:39.229" endtime="20220120 16:04:39.254"/>
</kw>
<kw name="Set Suite Documentation" library="BuiltIn">
<arg>Build Under Test: ${app_version}</arg>
<doc>Sets documentation for the current test suite.</doc>
<msg timestamp="20220120 16:04:39.255" level="INFO">Set suite documentation to:
Build Under Test: staging_2022.2.8659_Windows</msg>
<status status="PASS" starttime="20220120 16:04:39.254" endtime="20220120 16:04:39.255"/>
</kw>
<kw name="json.Get Json Data" library="json_data_handler">
<var>${json_data}</var>
<arg>${json_data_file}</arg>
<kw name="Get Json Data" library="libraries.json_data_handler">
<var>${json_data}</var>
<arg>${json_data_file}</arg>
<doc>The get_json_data function is used to read json file and create object for it
:return: json object of the json file</doc>
<msg timestamp="20220120 16:04:39.258" level="INFO">${json_data} = {'connection_type': 'Acroname', 'devices': [{'name': 'POWERPLAY', 'hub': 1752629528, 'portNumber': 0, 'connection_type': 'wired', 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sy...</msg>
<status status="PASS" starttime="20220120 16:04:39.256" endtime="20220120 16:04:39.258"/>
</kw>
<msg timestamp="20220120 16:04:39.258" level="INFO">${json_data} = {'connection_type': 'Acroname', 'devices': [{'name': 'POWERPLAY', 'hub': 1752629528, 'portNumber': 0, 'connection_type': 'wired', 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sy...</msg>
<status status="PASS" starttime="20220120 16:04:39.256" endtime="20220120 16:04:39.259"/>
</kw>
<kw name="json.Get Connection Type" library="json_data_handler">
<var>${conn_type}</var>
<arg>${json_data}</arg>
<kw name="Get Connection Type" library="libraries.json_data_handler">
<var>${conn_type}</var>
<arg>${json_data}</arg>
<doc>The get_connection_type function is used to traverse json object and get connection type
:param json_data:json object of the json file
:return: type of connection present</doc>
<msg timestamp="20220120 16:04:39.260" level="INFO">${conn_type} = Acroname</msg>
<status status="PASS" starttime="20220120 16:04:39.260" endtime="20220120 16:04:39.260"/>
</kw>
<msg timestamp="20220120 16:04:39.260" level="INFO">${conn_type} = Acroname</msg>
<status status="PASS" starttime="20220120 16:04:39.259" endtime="20220120 16:04:39.260"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${device_connection_type}</arg>
<arg>${conn_type}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220120 16:04:39.261" level="INFO">${device_connection_type} = Acroname</msg>
<status status="PASS" starttime="20220120 16:04:39.261" endtime="20220120 16:04:39.261"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${json_data}</arg>
<arg>${json_data}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220120 16:04:39.262" level="INFO">${json_data} = {'connection_type': 'Acroname', 'devices': [{'name': 'POWERPLAY', 'hub': 1752629528, 'portNumber': 0, 'connection_type': 'wired', 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sy...</msg>
<status status="PASS" starttime="20220120 16:04:39.262" endtime="20220120 16:04:39.262"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${os_type}</arg>
<arg>${os_type}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220120 16:04:39.264" level="INFO">${os_type} = Windows</msg>
<status status="PASS" starttime="20220120 16:04:39.264" endtime="20220120 16:04:39.264"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${os_version}</arg>
<arg>${os_version}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220120 16:04:39.265" level="INFO">${os_version} = Windows-10-10.0.19041-SP0</msg>
<status status="PASS" starttime="20220120 16:04:39.265" endtime="20220120 16:04:39.265"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${ignore_cloud_account_sync_issue}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:04:39.266" level="INFO">${ignore_cloud_account_sync_issue} = True</msg>
<status status="PASS" starttime="20220120 16:04:39.266" endtime="20220120 16:04:39.266"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clear_settings_reqd}</arg>
<arg>common.Clear App Settings And Start Fresh With Unlocking Persistent Profile</arg>
<arg>ELSE</arg>
<arg>profile.Unlock Persistent Profile In Global Configuration</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="common.Clear App Settings And Start Fresh With Unlocking Persistent Profile" library="common_keywords_kragle">
<doc>Clear GHUB app Custom Settings And Launch The App With Default Settings With Unlocking Persistent Profile</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Clearing App Settings</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:04:39.267" endtime="20220120 16:04:39.267"/>
</kw>
<kw name="Control Lghub" library="libraries.process.Application">
<status status="PASS" starttime="20220120 16:04:39.267" endtime="20220120 16:04:39.267"/>
</kw>
<kw name="common.Clear Settings" library="common_keywords_kragle">
<doc>Related to the process.robot</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=REMOVE</arg>
<arg>path=/configuration</arg>
<arg>json={}</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220120 16:04:39.270" level="INFO">{'verb': 'REMOVE', 'path': '/configuration', 'payload': {}}</msg>
<status status="PASS" starttime="20220120 16:04:39.268" endtime="20220120 16:04:39.270"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>verb=REMOVE</arg>
<arg>path=/configuration</arg>
<arg>timeout=60</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220120 16:04:39.270" endtime="20220120 16:04:39.281"/>
</kw>
<status status="PASS" starttime="20220120 16:04:39.268" endtime="20220120 16:04:39.281"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<kw name="Control Lghub" library="libraries.process.Application">
<status status="PASS" starttime="20220120 16:04:39.281" endtime="20220120 16:04:39.282"/>
</kw>
<kw name="Terminate All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to terminate all associated processes (including support applications such as VirtualHere).</doc>
<status status="PASS" starttime="20220120 16:04:39.283" endtime="20220120 16:04:45.391"/>
</kw>
<status status="PASS" starttime="20220120 16:04:39.281" endtime="20220120 16:04:45.392"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220120 16:04:55.396" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20220120 16:04:45.393" endtime="20220120 16:04:55.396"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<kw name="Control Lghub" library="libraries.process.Application">
<status status="PASS" starttime="20220120 16:04:55.399" endtime="20220120 16:04:55.400"/>
</kw>
<kw name="Launch All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to launch all associated processes (including support applications). Already running process are
not re-launched.</doc>
<status status="PASS" starttime="20220120 16:04:55.401" endtime="20220120 16:05:08.280"/>
</kw>
<status status="PASS" starttime="20220120 16:04:55.398" endtime="20220120 16:05:08.281"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220120 16:05:13.284" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220120 16:05:08.283" endtime="20220120 16:05:13.284"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="PASS" starttime="20220120 16:05:13.286" endtime="20220120 16:05:18.561"/>
</kw>
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:05:23.626" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:05:18.564" endtime="20220120 16:05:23.626"/>
</kw>
<status status="FAIL" starttime="20220120 16:05:18.564" endtime="20220120 16:05:23.626"/>
</kw>
<msg timestamp="20220120 16:05:23.626" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220120 16:05:18.563" endtime="20220120 16:05:23.626"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:05:23.627" endtime="20220120 16:05:23.628"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:05:23.628" endtime="20220120 16:05:23.628"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:05:23.629" endtime="20220120 16:05:23.629"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:05:23.629" endtime="20220120 16:05:23.629"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:05:23.630" endtime="20220120 16:05:23.631"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220120 16:05:23.631" endtime="20220120 16:05:23.631"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:05:23.627" endtime="20220120 16:05:23.631"/>
</branch>
<status status="PASS" starttime="20220120 16:05:23.627" endtime="20220120 16:05:23.632"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:05:23.635" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:05:23.634" endtime="20220120 16:05:23.635"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:05:23.635" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:05:23.636" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:05:23.635" endtime="20220120 16:05:23.636"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:05:33.650" level="INFO">Failed to find element with selector: #home-view and attributes:{}</msg>
<msg timestamp="20220120 16:05:33.651" level="INFO" html="true">&lt;a href=screenshot-20220120-160533.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160533.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:05:33.768" level="INFO">Failed to find element with selector: #home-view</msg>
<msg timestamp="20220120 16:05:33.769" level="FAIL">Failure: Selector "#home-view" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:05:23.637" endtime="20220120 16:05:33.769"/>
</kw>
<status status="FAIL" starttime="20220120 16:05:23.636" endtime="20220120 16:05:33.769"/>
</kw>
<status status="FAIL" starttime="20220120 16:05:23.633" endtime="20220120 16:05:33.770"/>
</kw>
<msg timestamp="20220120 16:05:33.770" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220120 16:05:23.632" endtime="20220120 16:05:33.770"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:05:33.770" endtime="20220120 16:05:33.771"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:05:38.818" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220120 16:05:38.819" level="INFO" html="true">&lt;a href=screenshot-20220120-160538.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160538.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:05:38.940" level="INFO">Failed to find element with selector: .back-button</msg>
<msg timestamp="20220120 16:05:38.941" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:05:33.773" endtime="20220120 16:05:38.941"/>
</kw>
<msg timestamp="20220120 16:05:38.941" level="INFO">${back_button_present} = False</msg>
<status status="PASS" starttime="20220120 16:05:33.772" endtime="20220120 16:05:38.941"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:05:38.942" endtime="20220120 16:05:38.942"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${first_time_setup}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:05:38.944" endtime="20220120 16:05:38.954"/>
</kw>
<status status="PASS" starttime="20220120 16:05:38.943" endtime="20220120 16:05:38.955"/>
</kw>
<msg timestamp="20220120 16:05:38.955" level="INFO">${first_time_setup} = True</msg>
<status status="PASS" starttime="20220120 16:05:38.943" endtime="20220120 16:05:38.955"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${onboarding_screen}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:05:38.957" level="INFO">${words} = ['#logging-opt-in.dot']</msg>
<status status="PASS" starttime="20220120 16:05:38.957" endtime="20220120 16:05:38.957"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:05:38.957" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:05:38.957" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:05:38.957" endtime="20220120 16:05:38.957"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:05:43.964" level="INFO">Failed to find element with selector: #logging-opt-in.dot and attributes:{}</msg>
<msg timestamp="20220120 16:05:43.966" level="INFO" html="true">&lt;a href=screenshot-20220120-160543.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160543.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:05:44.105" level="INFO">Failed to find element with selector: #logging-opt-in.dot</msg>
<msg timestamp="20220120 16:05:44.105" level="FAIL">Failure: Selector "#logging-opt-in.dot" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:05:38.959" endtime="20220120 16:05:44.105"/>
</kw>
<status status="FAIL" starttime="20220120 16:05:38.959" endtime="20220120 16:05:44.106"/>
</kw>
<status status="FAIL" starttime="20220120 16:05:38.956" endtime="20220120 16:05:44.106"/>
</kw>
<msg timestamp="20220120 16:05:44.106" level="INFO">${onboarding_screen} = False</msg>
<status status="PASS" starttime="20220120 16:05:38.955" endtime="20220120 16:05:44.106"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${first_time_setup} is ${True} or ${onboarding_screen} is ${True}</arg>
<arg>ghub_onboarding.First Time Setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="ghub_onboarding.First Time Setup" library="ghub_onboarding_flow_screen">
<doc>Related to the process</doc>
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${os}</var>
<msg timestamp="20220120 16:05:44.109" level="INFO">${os} = False</msg>
<status status="PASS" starttime="20220120 16:05:44.109" endtime="20220120 16:05:44.109"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=SET</arg>
<arg>path=/configuration</arg>
<arg>json={"onboardingShown": true, "migrationShown": true, "seenCoachMarks": ["coach-mark-panel-persistent-lock", "coach-mark-color-picker", "coach-mark-lighting-effect-selector", "coach-mark-lighting-effect-edit", "coach-mark-microphone-input-gain", "coach-mark-microphone-recording", "coach-mark-microphone-enable-blue-voice", "coach-mark-lighting-effect-editor-timeline", "coach-mark-lighting-effect-editor-frame-selection", "coach-mark-microphone-advanced-settings", "coach-mark-microphone-select-preset"]}</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220120 16:05:44.110" level="INFO">{'verb': 'SET', 'path': '/configuration', 'payload': {'onboardingShown': True, 'migrationShown': True, 'seenCoachMarks': ['coach-mark-panel-persistent-lock', 'coach-mark-color-picker', 'coach-mark-lighting-effect-selector', 'coach-mark-lighting-effect-edit', 'coach-mark-microphone-input-gain', 'coach-mark-microphone-recording', 'coach-mark-microphone-enable-blue-voice', 'coach-mark-lighting-effect-editor-timeline', 'coach-mark-lighting-effect-editor-frame-selection', 'coach-mark-microphone-advanced-settings', 'coach-mark-microphone-select-preset']}}</msg>
<status status="PASS" starttime="20220120 16:05:44.109" endtime="20220120 16:05:44.110"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${backend_response}</var>
<arg>Expect Message</arg>
<arg>verb=SET</arg>
<arg>path=/configuration</arg>
<arg>timeout=120</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>verb=SET</arg>
<arg>path=/configuration</arg>
<arg>timeout=120</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220120 16:05:44.112" endtime="20220120 16:05:44.124"/>
</kw>
<msg timestamp="20220120 16:05:44.124" level="INFO">${backend_response} = True</msg>
<status status="PASS" starttime="20220120 16:05:44.111" endtime="20220120 16:05:44.124"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${backend_response} is ${False}</arg>
<arg>LOG WARNING</arg>
<arg>Backend Response Failed For Onboarding Screen Request</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:05:44.124" endtime="20220120 16:05:44.125"/>
</kw>
<kw name="Reload Frontend" library="libraries.process.Frontend">
<status status="PASS" starttime="20220120 16:05:44.125" endtime="20220120 16:05:44.178"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220120 16:05:49.181" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220120 16:05:44.179" endtime="20220120 16:05:49.181"/>
</kw>
<kw name="ghub_onboarding.Dismiss Welcome To GHUB Window" library="ghub_onboarding_flow_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${welcome_window}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:05:54.225" level="FAIL">Failure: Selector "//strong[text()='Logitech G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:05:49.189" endtime="20220120 16:05:54.225"/>
</kw>
<status status="FAIL" starttime="20220120 16:05:49.187" endtime="20220120 16:05:54.226"/>
</kw>
<msg timestamp="20220120 16:05:54.226" level="INFO">${welcome_window} = False</msg>
<status status="PASS" starttime="20220120 16:05:49.185" endtime="20220120 16:05:54.227"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${welcome_window} is ${True}</arg>
<arg>common.Click On Right Scroll</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:05:54.229" endtime="20220120 16:05:54.230"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${potential_window}</var>
<arg>ghub_onboarding.Is Unlock Potentials Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Unlock Potentials Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_unlock_potentials}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:05:59.301" level="FAIL">Failure: Selector "//h1[text()='Unlock your potential']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:05:54.235" endtime="20220120 16:05:59.301"/>
</kw>
<status status="FAIL" starttime="20220120 16:05:54.233" endtime="20220120 16:05:59.302"/>
</kw>
<msg timestamp="20220120 16:05:59.303" level="INFO">${potential_window} = False</msg>
<status status="PASS" starttime="20220120 16:05:54.231" endtime="20220120 16:05:59.303"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${potential_window} is ${True}</arg>
<arg>common.Click On Right Scroll</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:05:59.305" endtime="20220120 16:05:59.308"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${launch_ghub}</var>
<arg>ghub_onboarding.Is Launch GHUB Button Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Launch GHUB Button Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_launch_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:06:04.347" level="FAIL">Failure: Selector "//button[text()='LAUNCH G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:05:59.311" endtime="20220120 16:06:04.347"/>
</kw>
<status status="FAIL" starttime="20220120 16:05:59.311" endtime="20220120 16:06:04.347"/>
</kw>
<msg timestamp="20220120 16:06:04.348" level="INFO">${launch_ghub} = False</msg>
<status status="PASS" starttime="20220120 16:05:59.309" endtime="20220120 16:06:04.348"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${launch_ghub} is ${True}</arg>
<arg>ghub_onboarding.Click on Launch GHUB Button</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:04.349" endtime="20220120 16:06:04.349"/>
</kw>
<status status="PASS" starttime="20220120 16:05:49.184" endtime="20220120 16:06:04.350"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>ghub_onboarding.Dismiss G HUB Analytics and Error Logging</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Dismiss G HUB Analytics and Error Logging" library="ghub_onboarding_flow_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_make_my_experince_better_radio_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:06:04.352" endtime="20220120 16:06:04.923"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_share_my_usage_data_checkbox}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:06:04.924" endtime="20220120 16:06:05.504"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_send_error_logs_checkbox}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:06:05.506" endtime="20220120 16:06:06.088"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_help_improve_ghub_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:06:06.090" endtime="20220120 16:06:06.687"/>
</kw>
<status status="PASS" starttime="20220120 16:06:04.352" endtime="20220120 16:06:06.687"/>
</kw>
<msg timestamp="20220120 16:06:06.687" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:06:04.350" endtime="20220120 16:06:06.687"/>
</kw>
<if>
<branch type="IF" condition="${status} is ${False}">
<kw name="Terminate All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to terminate all associated processes (including support applications such as VirtualHere).</doc>
<status status="NOT RUN" starttime="20220120 16:06:06.689" endtime="20220120 16:06:06.689"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>8</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:06:06.690" endtime="20220120 16:06:06.690"/>
</kw>
<kw name="Launch All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to launch all associated processes (including support applications). Already running process are
not re-launched.</doc>
<status status="NOT RUN" starttime="20220120 16:06:06.691" endtime="20220120 16:06:06.691"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>8</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:06:06.692" endtime="20220120 16:06:06.692"/>
</kw>
<kw name="ghub_onboarding.Dismiss Welcome To GHUB Window" library="ghub_onboarding_flow_screen">
<status status="NOT RUN" starttime="20220120 16:06:06.693" endtime="20220120 16:06:06.693"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>ghub_onboarding.Dismiss G HUB Analytics and Error Logging</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="NOT RUN" starttime="20220120 16:06:06.693" endtime="20220120 16:06:06.693"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:06:06.688" endtime="20220120 16:06:06.694"/>
</branch>
<status status="PASS" starttime="20220120 16:06:06.688" endtime="20220120 16:06:06.694"/>
</if>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>ghub_onboarding.Dismiss G HUB Analytics and Error Logging</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="ghub_onboarding.Dismiss G HUB Analytics and Error Logging" library="ghub_onboarding_flow_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_make_my_experince_better_radio_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:06:06.697" endtime="20220120 16:06:07.228"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_share_my_usage_data_checkbox}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220120 16:06:08.294" level="INFO">Failed to find element with selector: #logging-share-usage-data.logging-checkbox-label and attributes:{}</msg>
<msg timestamp="20220120 16:06:08.296" level="INFO" html="true">&lt;a href=screenshot-20220120-160608.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160608.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:06:08.484" level="INFO">Failed to find element with selector: #logging-share-usage-data.logging-checkbox-label</msg>
<msg timestamp="20220120 16:06:08.485" level="FAIL">Failure: Selector "#logging-share-usage-data.logging-checkbox-label" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:06:07.230" endtime="20220120 16:06:08.485"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_send_error_logs_checkbox}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="NOT RUN" starttime="20220120 16:06:08.486" endtime="20220120 16:06:08.486"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_help_improve_ghub_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="NOT RUN" starttime="20220120 16:06:08.486" endtime="20220120 16:06:08.486"/>
</kw>
<status status="FAIL" starttime="20220120 16:06:06.695" endtime="20220120 16:06:08.486"/>
</kw>
<status status="PASS" starttime="20220120 16:06:06.694" endtime="20220120 16:06:08.486"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>home.Skip Device Introduction</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220120 16:06:10.549" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220120 16:06:10.550" level="INFO" html="true">&lt;a href=screenshot-20220120-160610.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160610.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:06:10.726" level="INFO">Failed to find element with selector: .splash-screen-skip-button</msg>
<msg timestamp="20220120 16:06:10.727" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:06:08.489" endtime="20220120 16:06:10.727"/>
</kw>
<status status="PASS" starttime="20220120 16:06:08.489" endtime="20220120 16:06:10.727"/>
</kw>
<status status="PASS" starttime="20220120 16:06:08.487" endtime="20220120 16:06:10.728"/>
</kw>
<status status="PASS" starttime="20220120 16:06:08.487" endtime="20220120 16:06:10.728"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>ghub_onboarding.Dismiss New Version Prompt</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="ghub_onboarding.Dismiss New Version Prompt" library="ghub_onboarding_flow_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_got_it_button}</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220120 16:06:13.744" level="INFO">Failed to find element with selector: #got-it and attributes:{}</msg>
<msg timestamp="20220120 16:06:13.746" level="INFO" html="true">&lt;a href=screenshot-20220120-160613.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160613.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:06:13.926" level="INFO">Failed to find element with selector: #got-it</msg>
<msg timestamp="20220120 16:06:13.926" level="FAIL">Failure: Selector "#got-it" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:06:10.730" endtime="20220120 16:06:13.926"/>
</kw>
<status status="FAIL" starttime="20220120 16:06:10.729" endtime="20220120 16:06:13.927"/>
</kw>
<status status="PASS" starttime="20220120 16:06:10.729" endtime="20220120 16:06:13.927"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>ghub_onboarding.Dismiss Release Notes</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="ghub_onboarding.Dismiss Release Notes" library="ghub_onboarding_flow_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_cancel_button}</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220120 16:06:16.937" level="INFO">Failed to find element with selector: .overlay-cancel and attributes:{}</msg>
<msg timestamp="20220120 16:06:16.939" level="INFO" html="true">&lt;a href=screenshot-20220120-160616.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160616.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:06:17.122" level="INFO">Failed to find element with selector: .overlay-cancel</msg>
<msg timestamp="20220120 16:06:17.123" level="FAIL">Failure: Selector ".overlay-cancel" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:06:13.929" endtime="20220120 16:06:17.123"/>
</kw>
<status status="FAIL" starttime="20220120 16:06:13.928" endtime="20220120 16:06:17.123"/>
</kw>
<status status="PASS" starttime="20220120 16:06:13.928" endtime="20220120 16:06:17.124"/>
</kw>
<status status="PASS" starttime="20220120 16:05:44.107" endtime="20220120 16:06:17.124"/>
</kw>
<status status="PASS" starttime="20220120 16:05:44.107" endtime="20220120 16:06:17.124"/>
</kw>
<status status="PASS" starttime="20220120 16:05:18.562" endtime="20220120 16:06:17.124"/>
</iter>
<iter>
<var name="${INDEX}">1</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:06:22.191" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:06:17.126" endtime="20220120 16:06:22.192"/>
</kw>
<status status="FAIL" starttime="20220120 16:06:17.126" endtime="20220120 16:06:22.192"/>
</kw>
<msg timestamp="20220120 16:06:22.193" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220120 16:06:17.125" endtime="20220120 16:06:22.193"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:06:22.195" endtime="20220120 16:06:22.195"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:06:22.197" endtime="20220120 16:06:22.197"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:06:22.198" endtime="20220120 16:06:22.198"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:06:22.199" endtime="20220120 16:06:22.199"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:06:22.200" endtime="20220120 16:06:22.200"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220120 16:06:22.203" endtime="20220120 16:06:22.203"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:06:22.194" endtime="20220120 16:06:22.203"/>
</branch>
<status status="PASS" starttime="20220120 16:06:22.193" endtime="20220120 16:06:22.203"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:06:22.209" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:06:22.208" endtime="20220120 16:06:22.209"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:06:22.211" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:06:22.211" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:06:22.210" endtime="20220120 16:06:22.211"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:06:22.213" endtime="20220120 16:06:22.243"/>
</kw>
<status status="PASS" starttime="20220120 16:06:22.212" endtime="20220120 16:06:22.243"/>
</kw>
<status status="PASS" starttime="20220120 16:06:22.206" endtime="20220120 16:06:22.243"/>
</kw>
<msg timestamp="20220120 16:06:22.244" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220120 16:06:22.204" endtime="20220120 16:06:22.244"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:06:22.245" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:06:22.244" endtime="20220120 16:06:22.245"/>
</kw>
<status status="PASS" starttime="20220120 16:06:17.124" endtime="20220120 16:06:22.245"/>
</iter>
<status status="PASS" starttime="20220120 16:05:18.562" endtime="20220120 16:06:22.246"/>
</for>
<status status="PASS" starttime="20220120 16:05:18.562" endtime="20220120 16:06:22.246"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.Set GHUB As Active Window</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Set GHUB As Active Window" library="common_keywords_kragle">
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220120 16:06:22.249" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220120 16:06:22.249" endtime="20220120 16:06:22.249"/>
</kw>
<if>
<branch type="IF" condition="${is_mac} is ${True}">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>lghub</arg>
<arg>${maximized_screen}</arg>
<status status="NOT RUN" starttime="20220120 16:06:22.250" endtime="20220120 16:06:22.250"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:06:22.249" endtime="20220120 16:06:22.250"/>
</branch>
<branch type="ELSE">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>Logitech G HUB</arg>
<arg>${maximized_screen}</arg>
<status status="PASS" starttime="20220120 16:06:22.251" endtime="20220120 16:06:22.272"/>
</kw>
<status status="PASS" starttime="20220120 16:06:22.250" endtime="20220120 16:06:22.272"/>
</branch>
<status status="PASS" starttime="20220120 16:06:22.249" endtime="20220120 16:06:22.272"/>
</if>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220120 16:06:24.273" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20220120 16:06:22.273" endtime="20220120 16:06:24.273"/>
</kw>
<status status="PASS" starttime="20220120 16:06:22.248" endtime="20220120 16:06:24.274"/>
</kw>
<status status="PASS" starttime="20220120 16:06:22.247" endtime="20220120 16:06:24.274"/>
</kw>
<kw name="profile.Unlock Persistent Profile In Global Configuration" library="profile">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.set ghub as active window</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Set GHUB As Active Window" library="common_keywords_kragle">
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220120 16:06:24.283" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220120 16:06:24.281" endtime="20220120 16:06:24.283"/>
</kw>
<if>
<branch type="IF" condition="${is_mac} is ${True}">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>lghub</arg>
<arg>${maximized_screen}</arg>
<status status="NOT RUN" starttime="20220120 16:06:24.284" endtime="20220120 16:06:24.284"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:06:24.283" endtime="20220120 16:06:24.285"/>
</branch>
<branch type="ELSE">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>Logitech G HUB</arg>
<arg>${maximized_screen}</arg>
<status status="PASS" starttime="20220120 16:06:24.286" endtime="20220120 16:06:24.291"/>
</kw>
<status status="PASS" starttime="20220120 16:06:24.285" endtime="20220120 16:06:24.292"/>
</branch>
<status status="PASS" starttime="20220120 16:06:24.283" endtime="20220120 16:06:24.292"/>
</if>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220120 16:06:26.293" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20220120 16:06:24.293" endtime="20220120 16:06:26.293"/>
</kw>
<status status="PASS" starttime="20220120 16:06:24.280" endtime="20220120 16:06:26.294"/>
</kw>
<status status="PASS" starttime="20220120 16:06:24.278" endtime="20220120 16:06:26.294"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Unlocking Persistent Profile...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:06:26.296" endtime="20220120 16:06:26.296"/>
</kw>
<kw name="home.Click On Settings" library="home_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${home_settings_icon}</arg>
<arg>4</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:06:26.303" level="INFO">${words} = ['#setting-sprocket']</msg>
<status status="PASS" starttime="20220120 16:06:26.302" endtime="20220120 16:06:26.303"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:06:26.305" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:06:26.305" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:06:26.304" endtime="20220120 16:06:26.305"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:06:26.307" endtime="20220120 16:06:26.931"/>
</kw>
<status status="PASS" starttime="20220120 16:06:26.306" endtime="20220120 16:06:26.931"/>
</kw>
<status status="PASS" starttime="20220120 16:06:26.300" endtime="20220120 16:06:26.931"/>
</kw>
<status status="PASS" starttime="20220120 16:06:26.299" endtime="20220120 16:06:26.931"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${setting_page}</var>
<arg>global_settings.Is Setting Page Loaded</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="global_settings.Is Setting Page Loaded" library="global_settings_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${global_app_settings_page}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:06:26.938" endtime="20220120 16:06:26.953"/>
</kw>
<status status="PASS" starttime="20220120 16:06:26.935" endtime="20220120 16:06:26.954"/>
</kw>
<msg timestamp="20220120 16:06:26.955" level="INFO">${setting_page} = True</msg>
<status status="PASS" starttime="20220120 16:06:26.933" endtime="20220120 16:06:26.955"/>
</kw>
<if>
<branch type="IF" condition="${setting_page}==False">
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:06:26.956" endtime="20220120 16:06:26.956"/>
</kw>
<kw name="home.Click On Settings" library="home_screen">
<status status="NOT RUN" starttime="20220120 16:06:26.956" endtime="20220120 16:06:26.956"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:06:26.955" endtime="20220120 16:06:26.956"/>
</branch>
<status status="PASS" starttime="20220120 16:06:26.955" endtime="20220120 16:06:26.956"/>
</if>
<kw name="global_settings.Click On Persistent Profile Dropdown" library="global_settings_screen">
<kw name="Click" library="libraries.components.React">
<arg>${global_settings_persistent_profile_dropdown}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:06:26.958" endtime="20220120 16:06:27.527"/>
</kw>
<status status="PASS" starttime="20220120 16:06:26.956" endtime="20220120 16:06:27.527"/>
</kw>
<kw name="global_settings.Select None From Persistent Profile Dropdown" library="global_settings_screen">
<kw name="Click" library="libraries.components.React">
<arg>${global_settings_persistent_profile_none}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:06:27.529" endtime="20220120 16:06:28.081"/>
</kw>
<status status="PASS" starttime="20220120 16:06:27.528" endtime="20220120 16:06:28.081"/>
</kw>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:06:28.082" endtime="20220120 16:06:28.648"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.081" endtime="20220120 16:06:28.648"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Unlocked Persistent Profile</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:06:28.649" endtime="20220120 16:06:28.649"/>
</kw>
<status status="PASS" starttime="20220120 16:06:24.276" endtime="20220120 16:06:28.650"/>
</kw>
<status status="PASS" starttime="20220120 16:04:39.267" endtime="20220120 16:06:28.650"/>
</kw>
<status status="PASS" starttime="20220120 16:04:39.266" endtime="20220120 16:06:28.650"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${is_login_reqd}</arg>
<arg>ghub.Login Cloud Account</arg>
<arg>${EMAIL}</arg>
<arg>${PASSWORD}</arg>
<arg>${ignore_cloud_account_sync_issue}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:28.651" endtime="20220120 16:06:28.651"/>
</kw>
<status status="PASS" starttime="20220120 16:04:39.211" endtime="20220120 16:06:28.652"/>
</kw>
<status status="PASS" starttime="20220120 16:03:46.746" endtime="20220120 16:06:28.652"/>
</kw>
<test id="s1-t1" name="Test Application Specific Test Cases">
<kw name="Test App Features">
<arg>UI</arg>
<kw name="json.Get Application Specific Features To Test" library="json_data_handler">
<var>${features}</var>
<arg>${category}</arg>
<arg>${json_data}</arg>
<kw name="Get Application Specific Features To Test" library="libraries.json_data_handler">
<var>${features}</var>
<arg>${category}</arg>
<arg>${json_data}</arg>
<doc>The get_application_specific_features_to_test method is used to get features of provided device from the json data of json file.
@param category:
@param json_data: json object of the json file
@return: list of features depending on category (test case type)</doc>
<msg timestamp="20220120 16:06:28.656" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220120 16:06:28.656" endtime="20220120 16:06:28.656"/>
</kw>
<msg timestamp="20220120 16:06:28.657" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220120 16:06:28.655" endtime="20220120 16:06:28.657"/>
</kw>
<kw name="keyword.Get Application Specific Keywords To Execute For Features" library="keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${category}</arg>
<kw name="Get All Application Specific Keywords" library="libraries.keyword_handler">
<var>${all_keywords}</var>
<arg>${application}</arg>
<arg>${category}</arg>
<doc>The get_all_application_specific_keywords method is used to get all keywords from .robot files
from folder structure of a given application
@param application: Name of the application for eg. kragle / kiros etc.
@return: dictionary of keywords with respective tags</doc>
<msg timestamp="20220120 16:06:28.664" level="INFO">${all_keywords} = {'Test: Global Settings - Send Error Logs Process': 'global_settings', 'Test: Global Settings - Desktop Notifications': 'global_settings', 'Test: Global Settings - GHUB Manual Link Should Open In Defa...</msg>
<status status="PASS" starttime="20220120 16:06:28.659" endtime="20220120 16:06:28.664"/>
</kw>
<kw name="Get Application Specific Keywords By Features" library="libraries.keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${all_keywords}</arg>
<doc>The get_keywords_by_features method is used to get keywords with respective tags/features from all keywords.
@param features: list of tags/features
@param all_keywords: dictionary of all keywords with respective tags/features
@return: dictionary of keywords with respective features</doc>
<msg timestamp="20220120 16:06:28.666" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220120 16:06:28.665" endtime="20220120 16:06:28.666"/>
</kw>
<msg timestamp="20220120 16:06:28.666" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220120 16:06:28.658" endtime="20220120 16:06:28.666"/>
</kw>
<kw name="Run Application Keywords">
<arg>&amp;{keywords}</arg>
<for flavor="IN">
<var>${item}</var>
<value>&amp;{keywords}</value>
<status status="PASS" starttime="20220120 16:06:28.666" endtime="20220120 16:06:28.666"/>
</for>
<status status="PASS" starttime="20220120 16:06:28.666" endtime="20220120 16:06:28.666"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.653" endtime="20220120 16:06:28.667"/>
</kw>
<kw name="Test App Features">
<arg>SYS</arg>
<kw name="json.Get Application Specific Features To Test" library="json_data_handler">
<var>${features}</var>
<arg>${category}</arg>
<arg>${json_data}</arg>
<kw name="Get Application Specific Features To Test" library="libraries.json_data_handler">
<var>${features}</var>
<arg>${category}</arg>
<arg>${json_data}</arg>
<doc>The get_application_specific_features_to_test method is used to get features of provided device from the json data of json file.
@param category:
@param json_data: json object of the json file
@return: list of features depending on category (test case type)</doc>
<msg timestamp="20220120 16:06:28.670" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220120 16:06:28.668" endtime="20220120 16:06:28.670"/>
</kw>
<msg timestamp="20220120 16:06:28.670" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220120 16:06:28.668" endtime="20220120 16:06:28.670"/>
</kw>
<kw name="keyword.Get Application Specific Keywords To Execute For Features" library="keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${category}</arg>
<kw name="Get All Application Specific Keywords" library="libraries.keyword_handler">
<var>${all_keywords}</var>
<arg>${application}</arg>
<arg>${category}</arg>
<doc>The get_all_application_specific_keywords method is used to get all keywords from .robot files
from folder structure of a given application
@param application: Name of the application for eg. kragle / kiros etc.
@return: dictionary of keywords with respective tags</doc>
<msg timestamp="20220120 16:06:28.675" level="INFO">${all_keywords} = {}</msg>
<status status="PASS" starttime="20220120 16:06:28.672" endtime="20220120 16:06:28.675"/>
</kw>
<kw name="Get Application Specific Keywords By Features" library="libraries.keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${all_keywords}</arg>
<doc>The get_keywords_by_features method is used to get keywords with respective tags/features from all keywords.
@param features: list of tags/features
@param all_keywords: dictionary of all keywords with respective tags/features
@return: dictionary of keywords with respective features</doc>
<msg timestamp="20220120 16:06:28.676" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220120 16:06:28.676" endtime="20220120 16:06:28.676"/>
</kw>
<msg timestamp="20220120 16:06:28.676" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220120 16:06:28.671" endtime="20220120 16:06:28.676"/>
</kw>
<kw name="Run Application Keywords">
<arg>&amp;{keywords}</arg>
<for flavor="IN">
<var>${item}</var>
<value>&amp;{keywords}</value>
<status status="PASS" starttime="20220120 16:06:28.677" endtime="20220120 16:06:28.677"/>
</for>
<status status="PASS" starttime="20220120 16:06:28.676" endtime="20220120 16:06:28.677"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.667" endtime="20220120 16:06:28.677"/>
</kw>
<kw name="Test App Features">
<arg>ROBOT</arg>
<kw name="json.Get Application Specific Features To Test" library="json_data_handler">
<var>${features}</var>
<arg>${category}</arg>
<arg>${json_data}</arg>
<kw name="Get Application Specific Features To Test" library="libraries.json_data_handler">
<var>${features}</var>
<arg>${category}</arg>
<arg>${json_data}</arg>
<doc>The get_application_specific_features_to_test method is used to get features of provided device from the json data of json file.
@param category:
@param json_data: json object of the json file
@return: list of features depending on category (test case type)</doc>
<msg timestamp="20220120 16:06:28.679" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220120 16:06:28.679" endtime="20220120 16:06:28.679"/>
</kw>
<msg timestamp="20220120 16:06:28.679" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220120 16:06:28.678" endtime="20220120 16:06:28.680"/>
</kw>
<kw name="keyword.Get Application Specific Keywords To Execute For Features" library="keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${category}</arg>
<kw name="Get All Application Specific Keywords" library="libraries.keyword_handler">
<var>${all_keywords}</var>
<arg>${application}</arg>
<arg>${category}</arg>
<doc>The get_all_application_specific_keywords method is used to get all keywords from .robot files
from folder structure of a given application
@param application: Name of the application for eg. kragle / kiros etc.
@return: dictionary of keywords with respective tags</doc>
<msg timestamp="20220120 16:06:28.684" level="INFO">${all_keywords} = {}</msg>
<status status="PASS" starttime="20220120 16:06:28.681" endtime="20220120 16:06:28.684"/>
</kw>
<kw name="Get Application Specific Keywords By Features" library="libraries.keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${all_keywords}</arg>
<doc>The get_keywords_by_features method is used to get keywords with respective tags/features from all keywords.
@param features: list of tags/features
@param all_keywords: dictionary of all keywords with respective tags/features
@return: dictionary of keywords with respective features</doc>
<msg timestamp="20220120 16:06:28.685" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220120 16:06:28.685" endtime="20220120 16:06:28.685"/>
</kw>
<msg timestamp="20220120 16:06:28.685" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220120 16:06:28.680" endtime="20220120 16:06:28.685"/>
</kw>
<kw name="Run Application Keywords">
<arg>&amp;{keywords}</arg>
<for flavor="IN">
<var>${item}</var>
<value>&amp;{keywords}</value>
<status status="PASS" starttime="20220120 16:06:28.686" endtime="20220120 16:06:28.686"/>
</for>
<status status="PASS" starttime="20220120 16:06:28.686" endtime="20220120 16:06:28.686"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.677" endtime="20220120 16:06:28.686"/>
</kw>
<doc>It runs application specific test cases</doc>
<tag>Pre-setup: application_specific</tag>
<status status="PASS" starttime="20220120 16:06:28.652" endtime="20220120 16:06:28.686"/>
</test>
<test id="s1-t2" name="Test Device Specific Test Cases">
<kw name="json.Get Devices To Test With Connection Type" library="json_data_handler">
<var>@{devices}</var>
<arg>${json_data}</arg>
<kw name="Get Devices To Test With Connection Type" library="libraries.json_data_handler">
<var>@{devices}</var>
<arg>${json_data}</arg>
<doc>The get_devices_to_test_with_connection_type method is used to get all devices (to be tested)
with the connection_type appeneded in the device_name
@param json_data: json object of the json file
@return: list of device_name + connection_type (to be tested)</doc>
<msg timestamp="20220120 16:06:28.689" level="INFO">@{devices} = [ POWERPLAY:wired ]</msg>
<status status="PASS" starttime="20220120 16:06:28.689" endtime="20220120 16:06:28.689"/>
</kw>
<msg timestamp="20220120 16:06:28.689" level="INFO">@{devices} = [ POWERPLAY:wired ]</msg>
<status status="PASS" starttime="20220120 16:06:28.688" endtime="20220120 16:06:28.689"/>
</kw>
<for flavor="IN">
<var>${device_name}</var>
<value>@{devices}</value>
<iter>
<var name="${device_name}">POWERPLAY:wired</var>
<kw name="Test Device Features">
<arg>${device_name}</arg>
<arg>UI</arg>
<kw name="json.Get Data Of Device" library="json_data_handler">
<var>${device}</var>
<arg>${device_name}</arg>
<arg>${json_data}</arg>
<kw name="Get Data Of Device" library="libraries.json_data_handler">
<var>${device}</var>
<arg>${device_name}</arg>
<arg>${json_data}</arg>
<doc>The get_data_of_device method is used to get all details of provided device from json data
@param device: device name
@param json_data: whole json data from .json file (provided at runtime/intialization).
@return: device with all details from json data.</doc>
<msg timestamp="20220120 16:06:28.691" level="INFO">${device} = {'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '40...</msg>
<status status="PASS" starttime="20220120 16:06:28.691" endtime="20220120 16:06:28.691"/>
</kw>
<msg timestamp="20220120 16:06:28.692" level="INFO">${device} = {'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '40...</msg>
<status status="PASS" starttime="20220120 16:06:28.690" endtime="20220120 16:06:28.692"/>
</kw>
<kw name="json.Get Device Features" library="json_data_handler">
<var>${features}</var>
<arg>${device_name}</arg>
<arg>${category}</arg>
<arg>${json_data}</arg>
<kw name="Get Device Features" library="libraries.json_data_handler">
<var>${features}</var>
<arg>${device_name}</arg>
<arg>${category}</arg>
<arg>${json_data}</arg>
<doc>The get_device_features method is used to get features of provided device from the json data of json file.
@param device_name: name of the device
@param category: test case type eg, ui/sys/robot.
@param json_data: json object of the json file
@return: list of features depending on category (test case type)</doc>
<msg timestamp="20220120 16:06:28.694" level="INFO">${features} = ['device_settings', 'lightsync']</msg>
<status status="PASS" starttime="20220120 16:06:28.694" endtime="20220120 16:06:28.694"/>
</kw>
<msg timestamp="20220120 16:06:28.694" level="INFO">${features} = ['device_settings', 'lightsync']</msg>
<status status="PASS" starttime="20220120 16:06:28.693" endtime="20220120 16:06:28.694"/>
</kw>
<kw name="keyword.Get Device Specific Keywords To Execute For Features" library="keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${category}</arg>
<arg>${device['type']}</arg>
<kw name="Get All Device Specific Keywords" library="libraries.keyword_handler">
<var>${all_keywords}</var>
<arg>${application}</arg>
<arg>${category}</arg>
<arg>${device_type}</arg>
<doc>The get_all_device_specific_keywords method is used to get all keywords who are having ${device} as an argument
from .robot files from folder structure of a given application and category
@param application: Name of the application for eg. kragle / kiros etc.
@param category: UI/System/Robotics
@param device_type: Mouse/Keyboard
@return: dictionary of keywords with respective tags</doc>
<msg timestamp="20220120 16:06:28.706" level="INFO">${all_keywords} = {'Test: Verify available lighting effects for Powerplay in GHub': ['lightsync'], 'Test: Verify If Device Startup Effect Is Checked By Default / Uncheck Device Startup Effect': ['device_settings'], 'Te...</msg>
<status status="PASS" starttime="20220120 16:06:28.705" endtime="20220120 16:06:28.706"/>
</kw>
<kw name="Get Device Specific Keywords By Features" library="libraries.keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${all_keywords}</arg>
<doc>The get_keywords_by_features method is used to get keywords with respective tags/features from all keywords.
@param features: list of tags/features
@param all_keywords: dictionary of all keywords with respective tags/features
@return: dictionary of keywords with respective features</doc>
<msg timestamp="20220120 16:06:28.707" level="INFO">&amp;{keywords} = { Test: Verify If Device Startup Effect Is Checked By Default / Uncheck Device Startup Effect=device_settings | Test: Device Settings For Powerplay - UI Verification=device_settings | Test: Powerplay ...</msg>
<status status="PASS" starttime="20220120 16:06:28.707" endtime="20220120 16:06:28.707"/>
</kw>
<msg timestamp="20220120 16:06:28.708" level="INFO">&amp;{keywords} = { Test: Verify If Device Startup Effect Is Checked By Default / Uncheck Device Startup Effect=device_settings | Test: Device Settings For Powerplay - UI Verification=device_settings | Test: Powerplay ...</msg>
<status status="PASS" starttime="20220120 16:06:28.695" endtime="20220120 16:06:28.708"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${dict_size}</var>
<arg>${keywords}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:06:28.708" level="INFO">Length is 4</msg>
<msg timestamp="20220120 16:06:28.708" level="INFO">${dict_size} = 4</msg>
<status status="PASS" starttime="20220120 16:06:28.708" endtime="20220120 16:06:28.708"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${dict_size}'=='0'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:28.709" endtime="20220120 16:06:28.709"/>
</kw>
<kw name="device_connector.Is New Device Arrived" library="device_connector">
<var>${is_new_device}</var>
<arg>${device_name}</arg>
<kw name="Set Local Variable" library="BuiltIn">
<arg>${return_value}</arg>
<arg>False</arg>
<doc>Makes a variable available everywhere within the local scope.</doc>
<msg timestamp="20220120 16:06:28.727" level="INFO">${return_value} = False</msg>
<status status="PASS" starttime="20220120 16:06:28.710" endtime="20220120 16:06:28.727"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_equal}</var>
<arg>Should Be Equal</arg>
<arg>${old_device}</arg>
<arg>${new_device}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${old_device}</arg>
<arg>${new_device}</arg>
<doc>Fails if the given objects are unequal.</doc>
<msg timestamp="20220120 16:06:28.728" level="FAIL">EMPTY != POWERPLAY:wired</msg>
<status status="FAIL" starttime="20220120 16:06:28.728" endtime="20220120 16:06:28.728"/>
</kw>
<msg timestamp="20220120 16:06:28.728" level="INFO">${is_equal} = False</msg>
<status status="PASS" starttime="20220120 16:06:28.727" endtime="20220120 16:06:28.728"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${is_equal}'=='False'</arg>
<arg>Set Local Variable</arg>
<arg>${return_value}</arg>
<arg>True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Local Variable" library="BuiltIn">
<arg>${return_value}</arg>
<arg>True</arg>
<doc>Makes a variable available everywhere within the local scope.</doc>
<msg timestamp="20220120 16:06:28.730" level="INFO">${return_value} = True</msg>
<status status="PASS" starttime="20220120 16:06:28.729" endtime="20220120 16:06:28.730"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.729" endtime="20220120 16:06:28.730"/>
</kw>
<msg timestamp="20220120 16:06:28.730" level="INFO">${is_new_device} = True</msg>
<status status="PASS" starttime="20220120 16:06:28.710" endtime="20220120 16:06:28.730"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${is_new_device}</arg>
<arg>device_connector.Disconnect Old Device And Connect New Device</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="device_connector.Disconnect Old Device And Connect New Device" library="device_connector">
<arg>${device_name}</arg>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${old_device}' == 'EMPTY'</arg>
<arg>Add Test Case</arg>
<arg>Connect Device: ${new_device}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>device_connector.Connect Device</arg>
<arg>${new_device}</arg>
<arg>Tags=Pre-setup: test_setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Add Test Case" library="libraries.Listener">
<arg>Connect Device: ${new_device}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>device_connector.Connect Device</arg>
<arg>${new_device}</arg>
<arg>Tags=Pre-setup: test_setup</arg>
<doc>Adds a test case to the current suite</doc>
<msg timestamp="20220120 16:06:28.737" level="INFO">C:\Users\a4tech\AppData\Local\Programs\Python\Python38\Lib\site-packages\robot\model\keyword.py:97: UserWarning: 'keywords' attribute is read-only and deprecated since Robot Framework 4.0. Use 'body', 'setup' or 'teardown' instead.
  warnings.warn(self.deprecation_message, UserWarning)</msg>
<status status="PASS" starttime="20220120 16:06:28.734" endtime="20220120 16:06:28.737"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.733" endtime="20220120 16:06:28.737"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${old_device}' != 'EMPTY'</arg>
<arg>Add Test Case</arg>
<arg>Disconnect: ${old_device} &amp; Connect: ${new_device}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>device_connector.Disconnect Old And Connect New</arg>
<arg>${old_device}</arg>
<arg>${new_device}</arg>
<arg>Tags=Pre-setup: test_setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:28.738" endtime="20220120 16:06:28.738"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${old_device}</arg>
<arg>${new_device}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220120 16:06:28.739" level="INFO">${old_device} = POWERPLAY:wired</msg>
<status status="PASS" starttime="20220120 16:06:28.739" endtime="20220120 16:06:28.739"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.732" endtime="20220120 16:06:28.739"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.731" endtime="20220120 16:06:28.740"/>
</kw>
<for flavor="IN">
<var>${item}</var>
<value>&amp;{keywords}</value>
<iter>
<var name="${item}">('Test: Verify If Device Startup Effect Is Checked By Default / Uncheck Device Startup Effect', 'device_settings')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>${item}[0]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:06:28.740" level="INFO">${keyword} = Test: Verify If Device Startup Effect Is Checked By Default / Uncheck Device Startup Effect</msg>
<status status="PASS" starttime="20220120 16:06:28.740" endtime="20220120 16:06:28.740"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${feature}</var>
<arg>${item}[1]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:06:28.741" level="INFO">${feature} = device_settings</msg>
<status status="PASS" starttime="20220120 16:06:28.741" endtime="20220120 16:06:28.741"/>
</kw>
<kw name="Convert To Title Case" library="String">
<var>${conn_type}</var>
<arg>${device['connection_type']}</arg>
<doc>Converts string to title case.</doc>
<msg timestamp="20220120 16:06:28.753" level="INFO">${conn_type} = Wired</msg>
<status status="PASS" starttime="20220120 16:06:28.742" endtime="20220120 16:06:28.753"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${tags}</var>
<arg>Feature: ${feature}</arg>
<arg>Device: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>OS: ${os_version}</arg>
<arg>Device Type: ${device['type']}</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20220120 16:06:28.773" level="INFO">${tags} = ['Feature: device_settings', 'Device: POWERPLAY (Windows, Wired)', 'OS: Windows-10-10.0.19041-SP0', 'Device Type: POWERPLAY']</msg>
<status status="PASS" starttime="20220120 16:06:28.753" endtime="20220120 16:06:28.773"/>
</kw>
<kw name="Add Test Case" library="libraries.Listener">
<arg>${keyword}: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>${keyword}</arg>
<arg>${device}</arg>
<arg>Tags=${tags}</arg>
<doc>Adds a test case to the current suite</doc>
<status status="PASS" starttime="20220120 16:06:28.774" endtime="20220120 16:06:28.785"/>
</kw>
<kw name="Check Point To Reset GHUB">
<kw name="Evaluate" library="BuiltIn">
<var>${counter}</var>
<arg>${counter} + 1</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220120 16:06:28.786" level="INFO">${counter} = 1</msg>
<status status="PASS" starttime="20220120 16:06:28.785" endtime="20220120 16:06:28.786"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${reset}</var>
<arg>${counter} % ${reset_ghub_after_every_tcs}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220120 16:06:28.787" level="INFO">${reset} = 1</msg>
<status status="PASS" starttime="20220120 16:06:28.786" endtime="20220120 16:06:28.787"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Update Reset Number</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:28.787" endtime="20220120 16:06:28.787"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Add Test Case</arg>
<arg>Reset G HUB: ${reset_number}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>common.Clear App Settings And Start Fresh With Unlocking Persistent Profile</arg>
<arg>Tags=Pre-setup: reset_ghub</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:28.788" endtime="20220120 16:06:28.788"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${counter}</arg>
<arg>${counter}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20220120 16:06:28.789" level="INFO">${counter} = 1</msg>
<status status="PASS" starttime="20220120 16:06:28.788" endtime="20220120 16:06:28.789"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.785" endtime="20220120 16:06:28.789"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.740" endtime="20220120 16:06:28.789"/>
</iter>
<iter>
<var name="${item}">('Test: Device Settings For Powerplay - UI Verification', 'device_settings')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>${item}[0]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:06:28.789" level="INFO">${keyword} = Test: Device Settings For Powerplay - UI Verification</msg>
<status status="PASS" starttime="20220120 16:06:28.789" endtime="20220120 16:06:28.790"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${feature}</var>
<arg>${item}[1]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:06:28.790" level="INFO">${feature} = device_settings</msg>
<status status="PASS" starttime="20220120 16:06:28.790" endtime="20220120 16:06:28.790"/>
</kw>
<kw name="Convert To Title Case" library="String">
<var>${conn_type}</var>
<arg>${device['connection_type']}</arg>
<doc>Converts string to title case.</doc>
<msg timestamp="20220120 16:06:28.803" level="INFO">${conn_type} = Wired</msg>
<status status="PASS" starttime="20220120 16:06:28.791" endtime="20220120 16:06:28.803"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${tags}</var>
<arg>Feature: ${feature}</arg>
<arg>Device: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>OS: ${os_version}</arg>
<arg>Device Type: ${device['type']}</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20220120 16:06:28.823" level="INFO">${tags} = ['Feature: device_settings', 'Device: POWERPLAY (Windows, Wired)', 'OS: Windows-10-10.0.19041-SP0', 'Device Type: POWERPLAY']</msg>
<status status="PASS" starttime="20220120 16:06:28.804" endtime="20220120 16:06:28.823"/>
</kw>
<kw name="Add Test Case" library="libraries.Listener">
<arg>${keyword}: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>${keyword}</arg>
<arg>${device}</arg>
<arg>Tags=${tags}</arg>
<doc>Adds a test case to the current suite</doc>
<status status="PASS" starttime="20220120 16:06:28.823" endtime="20220120 16:06:28.835"/>
</kw>
<kw name="Check Point To Reset GHUB">
<kw name="Evaluate" library="BuiltIn">
<var>${counter}</var>
<arg>${counter} + 1</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220120 16:06:28.836" level="INFO">${counter} = 2</msg>
<status status="PASS" starttime="20220120 16:06:28.836" endtime="20220120 16:06:28.836"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${reset}</var>
<arg>${counter} % ${reset_ghub_after_every_tcs}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220120 16:06:28.837" level="INFO">${reset} = 2</msg>
<status status="PASS" starttime="20220120 16:06:28.836" endtime="20220120 16:06:28.837"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Update Reset Number</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:28.838" endtime="20220120 16:06:28.838"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Add Test Case</arg>
<arg>Reset G HUB: ${reset_number}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>common.Clear App Settings And Start Fresh With Unlocking Persistent Profile</arg>
<arg>Tags=Pre-setup: reset_ghub</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:28.838" endtime="20220120 16:06:28.838"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${counter}</arg>
<arg>${counter}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20220120 16:06:28.840" level="INFO">${counter} = 2</msg>
<status status="PASS" starttime="20220120 16:06:28.840" endtime="20220120 16:06:28.840"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.835" endtime="20220120 16:06:28.840"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.789" endtime="20220120 16:06:28.840"/>
</iter>
<iter>
<var name="${item}">('Test: Powerplay Charging Is On By Default, Connected Device Is Charging / Verify That When Powerplay Charging Is Off, Connected Device Is Not Charging', 'device_settings')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>${item}[0]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:06:28.840" level="INFO">${keyword} = Test: Powerplay Charging Is On By Default, Connected Device Is Charging / Verify That When Powerplay Charging Is Off, Connected Device Is Not Charging</msg>
<status status="PASS" starttime="20220120 16:06:28.840" endtime="20220120 16:06:28.840"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${feature}</var>
<arg>${item}[1]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:06:28.842" level="INFO">${feature} = device_settings</msg>
<status status="PASS" starttime="20220120 16:06:28.842" endtime="20220120 16:06:28.842"/>
</kw>
<kw name="Convert To Title Case" library="String">
<var>${conn_type}</var>
<arg>${device['connection_type']}</arg>
<doc>Converts string to title case.</doc>
<msg timestamp="20220120 16:06:28.853" level="INFO">${conn_type} = Wired</msg>
<status status="PASS" starttime="20220120 16:06:28.842" endtime="20220120 16:06:28.853"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${tags}</var>
<arg>Feature: ${feature}</arg>
<arg>Device: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>OS: ${os_version}</arg>
<arg>Device Type: ${device['type']}</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20220120 16:06:28.873" level="INFO">${tags} = ['Feature: device_settings', 'Device: POWERPLAY (Windows, Wired)', 'OS: Windows-10-10.0.19041-SP0', 'Device Type: POWERPLAY']</msg>
<status status="PASS" starttime="20220120 16:06:28.854" endtime="20220120 16:06:28.873"/>
</kw>
<kw name="Add Test Case" library="libraries.Listener">
<arg>${keyword}: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>${keyword}</arg>
<arg>${device}</arg>
<arg>Tags=${tags}</arg>
<doc>Adds a test case to the current suite</doc>
<status status="PASS" starttime="20220120 16:06:28.874" endtime="20220120 16:06:28.885"/>
</kw>
<kw name="Check Point To Reset GHUB">
<kw name="Evaluate" library="BuiltIn">
<var>${counter}</var>
<arg>${counter} + 1</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220120 16:06:28.886" level="INFO">${counter} = 3</msg>
<status status="PASS" starttime="20220120 16:06:28.886" endtime="20220120 16:06:28.886"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${reset}</var>
<arg>${counter} % ${reset_ghub_after_every_tcs}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220120 16:06:28.887" level="INFO">${reset} = 3</msg>
<status status="PASS" starttime="20220120 16:06:28.887" endtime="20220120 16:06:28.887"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Update Reset Number</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:28.888" endtime="20220120 16:06:28.888"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Add Test Case</arg>
<arg>Reset G HUB: ${reset_number}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>common.Clear App Settings And Start Fresh With Unlocking Persistent Profile</arg>
<arg>Tags=Pre-setup: reset_ghub</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:28.888" endtime="20220120 16:06:28.889"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${counter}</arg>
<arg>${counter}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20220120 16:06:28.889" level="INFO">${counter} = 3</msg>
<status status="PASS" starttime="20220120 16:06:28.889" endtime="20220120 16:06:28.889"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.885" endtime="20220120 16:06:28.890"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.840" endtime="20220120 16:06:28.890"/>
</iter>
<iter>
<var name="${item}">('Test: Verify available lighting effects for Powerplay in GHub', 'lightsync')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>${item}[0]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:06:28.890" level="INFO">${keyword} = Test: Verify available lighting effects for Powerplay in GHub</msg>
<status status="PASS" starttime="20220120 16:06:28.890" endtime="20220120 16:06:28.890"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${feature}</var>
<arg>${item}[1]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:06:28.891" level="INFO">${feature} = lightsync</msg>
<status status="PASS" starttime="20220120 16:06:28.891" endtime="20220120 16:06:28.891"/>
</kw>
<kw name="Convert To Title Case" library="String">
<var>${conn_type}</var>
<arg>${device['connection_type']}</arg>
<doc>Converts string to title case.</doc>
<msg timestamp="20220120 16:06:28.903" level="INFO">${conn_type} = Wired</msg>
<status status="PASS" starttime="20220120 16:06:28.892" endtime="20220120 16:06:28.904"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${tags}</var>
<arg>Feature: ${feature}</arg>
<arg>Device: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>OS: ${os_version}</arg>
<arg>Device Type: ${device['type']}</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20220120 16:06:28.925" level="INFO">${tags} = ['Feature: lightsync', 'Device: POWERPLAY (Windows, Wired)', 'OS: Windows-10-10.0.19041-SP0', 'Device Type: POWERPLAY']</msg>
<status status="PASS" starttime="20220120 16:06:28.904" endtime="20220120 16:06:28.925"/>
</kw>
<kw name="Add Test Case" library="libraries.Listener">
<arg>${keyword}: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>${keyword}</arg>
<arg>${device}</arg>
<arg>Tags=${tags}</arg>
<doc>Adds a test case to the current suite</doc>
<status status="PASS" starttime="20220120 16:06:28.925" endtime="20220120 16:06:28.937"/>
</kw>
<kw name="Check Point To Reset GHUB">
<kw name="Evaluate" library="BuiltIn">
<var>${counter}</var>
<arg>${counter} + 1</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220120 16:06:28.939" level="INFO">${counter} = 4</msg>
<status status="PASS" starttime="20220120 16:06:28.939" endtime="20220120 16:06:28.939"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${reset}</var>
<arg>${counter} % ${reset_ghub_after_every_tcs}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220120 16:06:28.940" level="INFO">${reset} = 4</msg>
<status status="PASS" starttime="20220120 16:06:28.939" endtime="20220120 16:06:28.940"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Update Reset Number</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:28.940" endtime="20220120 16:06:28.940"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Add Test Case</arg>
<arg>Reset G HUB: ${reset_number}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>common.Clear App Settings And Start Fresh With Unlocking Persistent Profile</arg>
<arg>Tags=Pre-setup: reset_ghub</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:28.941" endtime="20220120 16:06:28.941"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${counter}</arg>
<arg>${counter}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20220120 16:06:28.942" level="INFO">${counter} = 4</msg>
<status status="PASS" starttime="20220120 16:06:28.941" endtime="20220120 16:06:28.942"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.938" endtime="20220120 16:06:28.942"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.890" endtime="20220120 16:06:28.942"/>
</iter>
<status status="PASS" starttime="20220120 16:06:28.740" endtime="20220120 16:06:28.942"/>
</for>
<status status="PASS" starttime="20220120 16:06:28.690" endtime="20220120 16:06:28.942"/>
</kw>
<kw name="Test Device Features">
<arg>${device_name}</arg>
<arg>SYS</arg>
<kw name="json.Get Data Of Device" library="json_data_handler">
<var>${device}</var>
<arg>${device_name}</arg>
<arg>${json_data}</arg>
<kw name="Get Data Of Device" library="libraries.json_data_handler">
<var>${device}</var>
<arg>${device_name}</arg>
<arg>${json_data}</arg>
<doc>The get_data_of_device method is used to get all details of provided device from json data
@param device: device name
@param json_data: whole json data from .json file (provided at runtime/intialization).
@return: device with all details from json data.</doc>
<msg timestamp="20220120 16:06:28.944" level="INFO">${device} = {'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '40...</msg>
<status status="PASS" starttime="20220120 16:06:28.944" endtime="20220120 16:06:28.945"/>
</kw>
<msg timestamp="20220120 16:06:28.945" level="INFO">${device} = {'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '40...</msg>
<status status="PASS" starttime="20220120 16:06:28.943" endtime="20220120 16:06:28.945"/>
</kw>
<kw name="json.Get Device Features" library="json_data_handler">
<var>${features}</var>
<arg>${device_name}</arg>
<arg>${category}</arg>
<arg>${json_data}</arg>
<kw name="Get Device Features" library="libraries.json_data_handler">
<var>${features}</var>
<arg>${device_name}</arg>
<arg>${category}</arg>
<arg>${json_data}</arg>
<doc>The get_device_features method is used to get features of provided device from the json data of json file.
@param device_name: name of the device
@param category: test case type eg, ui/sys/robot.
@param json_data: json object of the json file
@return: list of features depending on category (test case type)</doc>
<msg timestamp="20220120 16:06:28.947" level="INFO">${features} = ['device_settings', 'lightsync']</msg>
<status status="PASS" starttime="20220120 16:06:28.946" endtime="20220120 16:06:28.947"/>
</kw>
<msg timestamp="20220120 16:06:28.947" level="INFO">${features} = ['device_settings', 'lightsync']</msg>
<status status="PASS" starttime="20220120 16:06:28.945" endtime="20220120 16:06:28.947"/>
</kw>
<kw name="keyword.Get Device Specific Keywords To Execute For Features" library="keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${category}</arg>
<arg>${device['type']}</arg>
<kw name="Get All Device Specific Keywords" library="libraries.keyword_handler">
<var>${all_keywords}</var>
<arg>${application}</arg>
<arg>${category}</arg>
<arg>${device_type}</arg>
<doc>The get_all_device_specific_keywords method is used to get all keywords who are having ${device} as an argument
from .robot files from folder structure of a given application and category
@param application: Name of the application for eg. kragle / kiros etc.
@param category: UI/System/Robotics
@param device_type: Mouse/Keyboard
@return: dictionary of keywords with respective tags</doc>
<msg timestamp="20220120 16:06:28.958" level="INFO">${all_keywords} = {'Test: Verify available lighting effects for Powerplay in GHub using firmware': ['lightsync'], 'Test: Device Settings For Powerplay - SYS Verification': ['device_settings'], 'Test: Verify If POWERPLA...</msg>
<status status="PASS" starttime="20220120 16:06:28.957" endtime="20220120 16:06:28.958"/>
</kw>
<kw name="Get Device Specific Keywords By Features" library="libraries.keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${all_keywords}</arg>
<doc>The get_keywords_by_features method is used to get keywords with respective tags/features from all keywords.
@param features: list of tags/features
@param all_keywords: dictionary of all keywords with respective tags/features
@return: dictionary of keywords with respective features</doc>
<msg timestamp="20220120 16:06:28.959" level="INFO">&amp;{keywords} = { Test: Device Settings For Powerplay - SYS Verification=device_settings | Test: Verify available lighting effects for Powerplay in GHub using firmware=lightsync | Test: Verify If POWERPLAY Can Sync O...</msg>
<status status="PASS" starttime="20220120 16:06:28.959" endtime="20220120 16:06:28.959"/>
</kw>
<msg timestamp="20220120 16:06:28.960" level="INFO">&amp;{keywords} = { Test: Device Settings For Powerplay - SYS Verification=device_settings | Test: Verify available lighting effects for Powerplay in GHub using firmware=lightsync | Test: Verify If POWERPLAY Can Sync O...</msg>
<status status="PASS" starttime="20220120 16:06:28.948" endtime="20220120 16:06:28.960"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${dict_size}</var>
<arg>${keywords}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:06:28.960" level="INFO">Length is 3</msg>
<msg timestamp="20220120 16:06:28.960" level="INFO">${dict_size} = 3</msg>
<status status="PASS" starttime="20220120 16:06:28.960" endtime="20220120 16:06:28.960"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${dict_size}'=='0'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:28.961" endtime="20220120 16:06:28.961"/>
</kw>
<kw name="device_connector.Is New Device Arrived" library="device_connector">
<var>${is_new_device}</var>
<arg>${device_name}</arg>
<kw name="Set Local Variable" library="BuiltIn">
<arg>${return_value}</arg>
<arg>False</arg>
<doc>Makes a variable available everywhere within the local scope.</doc>
<msg timestamp="20220120 16:06:28.979" level="INFO">${return_value} = False</msg>
<status status="PASS" starttime="20220120 16:06:28.962" endtime="20220120 16:06:28.979"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_equal}</var>
<arg>Should Be Equal</arg>
<arg>${old_device}</arg>
<arg>${new_device}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${old_device}</arg>
<arg>${new_device}</arg>
<doc>Fails if the given objects are unequal.</doc>
<status status="PASS" starttime="20220120 16:06:28.980" endtime="20220120 16:06:28.981"/>
</kw>
<msg timestamp="20220120 16:06:28.981" level="INFO">${is_equal} = True</msg>
<status status="PASS" starttime="20220120 16:06:28.980" endtime="20220120 16:06:28.981"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${is_equal}'=='False'</arg>
<arg>Set Local Variable</arg>
<arg>${return_value}</arg>
<arg>True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:28.981" endtime="20220120 16:06:28.982"/>
</kw>
<msg timestamp="20220120 16:06:28.982" level="INFO">${is_new_device} = False</msg>
<status status="PASS" starttime="20220120 16:06:28.961" endtime="20220120 16:06:28.982"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${is_new_device}</arg>
<arg>device_connector.Disconnect Old Device And Connect New Device</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:28.984" endtime="20220120 16:06:28.984"/>
</kw>
<for flavor="IN">
<var>${item}</var>
<value>&amp;{keywords}</value>
<iter>
<var name="${item}">('Test: Device Settings For Powerplay - SYS Verification', 'device_settings')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>${item}[0]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:06:28.985" level="INFO">${keyword} = Test: Device Settings For Powerplay - SYS Verification</msg>
<status status="PASS" starttime="20220120 16:06:28.985" endtime="20220120 16:06:28.985"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${feature}</var>
<arg>${item}[1]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:06:28.985" level="INFO">${feature} = device_settings</msg>
<status status="PASS" starttime="20220120 16:06:28.985" endtime="20220120 16:06:28.985"/>
</kw>
<kw name="Convert To Title Case" library="String">
<var>${conn_type}</var>
<arg>${device['connection_type']}</arg>
<doc>Converts string to title case.</doc>
<msg timestamp="20220120 16:06:28.997" level="INFO">${conn_type} = Wired</msg>
<status status="PASS" starttime="20220120 16:06:28.986" endtime="20220120 16:06:28.997"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${tags}</var>
<arg>Feature: ${feature}</arg>
<arg>Device: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>OS: ${os_version}</arg>
<arg>Device Type: ${device['type']}</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20220120 16:06:29.018" level="INFO">${tags} = ['Feature: device_settings', 'Device: POWERPLAY (Windows, Wired)', 'OS: Windows-10-10.0.19041-SP0', 'Device Type: POWERPLAY']</msg>
<status status="PASS" starttime="20220120 16:06:28.997" endtime="20220120 16:06:29.018"/>
</kw>
<kw name="Add Test Case" library="libraries.Listener">
<arg>${keyword}: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>${keyword}</arg>
<arg>${device}</arg>
<arg>Tags=${tags}</arg>
<doc>Adds a test case to the current suite</doc>
<status status="PASS" starttime="20220120 16:06:29.018" endtime="20220120 16:06:29.029"/>
</kw>
<kw name="Check Point To Reset GHUB">
<kw name="Evaluate" library="BuiltIn">
<var>${counter}</var>
<arg>${counter} + 1</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220120 16:06:29.030" level="INFO">${counter} = 5</msg>
<status status="PASS" starttime="20220120 16:06:29.030" endtime="20220120 16:06:29.030"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${reset}</var>
<arg>${counter} % ${reset_ghub_after_every_tcs}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220120 16:06:29.031" level="INFO">${reset} = 5</msg>
<status status="PASS" starttime="20220120 16:06:29.030" endtime="20220120 16:06:29.031"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Update Reset Number</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:29.031" endtime="20220120 16:06:29.032"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Add Test Case</arg>
<arg>Reset G HUB: ${reset_number}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>common.Clear App Settings And Start Fresh With Unlocking Persistent Profile</arg>
<arg>Tags=Pre-setup: reset_ghub</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:29.032" endtime="20220120 16:06:29.032"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${counter}</arg>
<arg>${counter}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20220120 16:06:29.033" level="INFO">${counter} = 5</msg>
<status status="PASS" starttime="20220120 16:06:29.033" endtime="20220120 16:06:29.033"/>
</kw>
<status status="PASS" starttime="20220120 16:06:29.029" endtime="20220120 16:06:29.033"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.984" endtime="20220120 16:06:29.033"/>
</iter>
<iter>
<var name="${item}">('Test: Verify available lighting effects for Powerplay in GHub using firmware', 'lightsync')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>${item}[0]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:06:29.034" level="INFO">${keyword} = Test: Verify available lighting effects for Powerplay in GHub using firmware</msg>
<status status="PASS" starttime="20220120 16:06:29.034" endtime="20220120 16:06:29.034"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${feature}</var>
<arg>${item}[1]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:06:29.035" level="INFO">${feature} = lightsync</msg>
<status status="PASS" starttime="20220120 16:06:29.035" endtime="20220120 16:06:29.035"/>
</kw>
<kw name="Convert To Title Case" library="String">
<var>${conn_type}</var>
<arg>${device['connection_type']}</arg>
<doc>Converts string to title case.</doc>
<msg timestamp="20220120 16:06:29.046" level="INFO">${conn_type} = Wired</msg>
<status status="PASS" starttime="20220120 16:06:29.035" endtime="20220120 16:06:29.046"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${tags}</var>
<arg>Feature: ${feature}</arg>
<arg>Device: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>OS: ${os_version}</arg>
<arg>Device Type: ${device['type']}</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20220120 16:06:29.068" level="INFO">${tags} = ['Feature: lightsync', 'Device: POWERPLAY (Windows, Wired)', 'OS: Windows-10-10.0.19041-SP0', 'Device Type: POWERPLAY']</msg>
<status status="PASS" starttime="20220120 16:06:29.047" endtime="20220120 16:06:29.068"/>
</kw>
<kw name="Add Test Case" library="libraries.Listener">
<arg>${keyword}: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>${keyword}</arg>
<arg>${device}</arg>
<arg>Tags=${tags}</arg>
<doc>Adds a test case to the current suite</doc>
<status status="PASS" starttime="20220120 16:06:29.069" endtime="20220120 16:06:29.080"/>
</kw>
<kw name="Check Point To Reset GHUB">
<kw name="Evaluate" library="BuiltIn">
<var>${counter}</var>
<arg>${counter} + 1</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220120 16:06:29.081" level="INFO">${counter} = 6</msg>
<status status="PASS" starttime="20220120 16:06:29.081" endtime="20220120 16:06:29.081"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${reset}</var>
<arg>${counter} % ${reset_ghub_after_every_tcs}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220120 16:06:29.083" level="INFO">${reset} = 6</msg>
<status status="PASS" starttime="20220120 16:06:29.082" endtime="20220120 16:06:29.083"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Update Reset Number</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:29.083" endtime="20220120 16:06:29.083"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Add Test Case</arg>
<arg>Reset G HUB: ${reset_number}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>common.Clear App Settings And Start Fresh With Unlocking Persistent Profile</arg>
<arg>Tags=Pre-setup: reset_ghub</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:29.084" endtime="20220120 16:06:29.084"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${counter}</arg>
<arg>${counter}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20220120 16:06:29.085" level="INFO">${counter} = 6</msg>
<status status="PASS" starttime="20220120 16:06:29.085" endtime="20220120 16:06:29.085"/>
</kw>
<status status="PASS" starttime="20220120 16:06:29.080" endtime="20220120 16:06:29.085"/>
</kw>
<status status="PASS" starttime="20220120 16:06:29.034" endtime="20220120 16:06:29.085"/>
</iter>
<iter>
<var name="${item}">('Test: Verify If POWERPLAY Can Sync Other Device using backend', 'lightsync')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>${item}[0]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:06:29.086" level="INFO">${keyword} = Test: Verify If POWERPLAY Can Sync Other Device using backend</msg>
<status status="PASS" starttime="20220120 16:06:29.086" endtime="20220120 16:06:29.086"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${feature}</var>
<arg>${item}[1]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:06:29.087" level="INFO">${feature} = lightsync</msg>
<status status="PASS" starttime="20220120 16:06:29.086" endtime="20220120 16:06:29.087"/>
</kw>
<kw name="Convert To Title Case" library="String">
<var>${conn_type}</var>
<arg>${device['connection_type']}</arg>
<doc>Converts string to title case.</doc>
<msg timestamp="20220120 16:06:29.099" level="INFO">${conn_type} = Wired</msg>
<status status="PASS" starttime="20220120 16:06:29.087" endtime="20220120 16:06:29.099"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${tags}</var>
<arg>Feature: ${feature}</arg>
<arg>Device: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>OS: ${os_version}</arg>
<arg>Device Type: ${device['type']}</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20220120 16:06:29.118" level="INFO">${tags} = ['Feature: lightsync', 'Device: POWERPLAY (Windows, Wired)', 'OS: Windows-10-10.0.19041-SP0', 'Device Type: POWERPLAY']</msg>
<status status="PASS" starttime="20220120 16:06:29.100" endtime="20220120 16:06:29.118"/>
</kw>
<kw name="Add Test Case" library="libraries.Listener">
<arg>${keyword}: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>${keyword}</arg>
<arg>${device}</arg>
<arg>Tags=${tags}</arg>
<doc>Adds a test case to the current suite</doc>
<status status="PASS" starttime="20220120 16:06:29.119" endtime="20220120 16:06:29.129"/>
</kw>
<kw name="Check Point To Reset GHUB">
<kw name="Evaluate" library="BuiltIn">
<var>${counter}</var>
<arg>${counter} + 1</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220120 16:06:29.130" level="INFO">${counter} = 7</msg>
<status status="PASS" starttime="20220120 16:06:29.130" endtime="20220120 16:06:29.130"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${reset}</var>
<arg>${counter} % ${reset_ghub_after_every_tcs}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220120 16:06:29.132" level="INFO">${reset} = 7</msg>
<status status="PASS" starttime="20220120 16:06:29.131" endtime="20220120 16:06:29.132"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Update Reset Number</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:29.132" endtime="20220120 16:06:29.132"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Add Test Case</arg>
<arg>Reset G HUB: ${reset_number}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>common.Clear App Settings And Start Fresh With Unlocking Persistent Profile</arg>
<arg>Tags=Pre-setup: reset_ghub</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:29.133" endtime="20220120 16:06:29.133"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${counter}</arg>
<arg>${counter}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20220120 16:06:29.134" level="INFO">${counter} = 7</msg>
<status status="PASS" starttime="20220120 16:06:29.134" endtime="20220120 16:06:29.134"/>
</kw>
<status status="PASS" starttime="20220120 16:06:29.129" endtime="20220120 16:06:29.134"/>
</kw>
<status status="PASS" starttime="20220120 16:06:29.085" endtime="20220120 16:06:29.134"/>
</iter>
<status status="PASS" starttime="20220120 16:06:28.984" endtime="20220120 16:06:29.134"/>
</for>
<status status="PASS" starttime="20220120 16:06:28.942" endtime="20220120 16:06:29.134"/>
</kw>
<kw name="Test Device Features">
<arg>${device_name}</arg>
<arg>ROBOT</arg>
<kw name="json.Get Data Of Device" library="json_data_handler">
<var>${device}</var>
<arg>${device_name}</arg>
<arg>${json_data}</arg>
<kw name="Get Data Of Device" library="libraries.json_data_handler">
<var>${device}</var>
<arg>${device_name}</arg>
<arg>${json_data}</arg>
<doc>The get_data_of_device method is used to get all details of provided device from json data
@param device: device name
@param json_data: whole json data from .json file (provided at runtime/intialization).
@return: device with all details from json data.</doc>
<msg timestamp="20220120 16:06:29.137" level="INFO">${device} = {'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '40...</msg>
<status status="PASS" starttime="20220120 16:06:29.136" endtime="20220120 16:06:29.137"/>
</kw>
<msg timestamp="20220120 16:06:29.137" level="INFO">${device} = {'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '40...</msg>
<status status="PASS" starttime="20220120 16:06:29.135" endtime="20220120 16:06:29.137"/>
</kw>
<kw name="json.Get Device Features" library="json_data_handler">
<var>${features}</var>
<arg>${device_name}</arg>
<arg>${category}</arg>
<arg>${json_data}</arg>
<kw name="Get Device Features" library="libraries.json_data_handler">
<var>${features}</var>
<arg>${device_name}</arg>
<arg>${category}</arg>
<arg>${json_data}</arg>
<doc>The get_device_features method is used to get features of provided device from the json data of json file.
@param device_name: name of the device
@param category: test case type eg, ui/sys/robot.
@param json_data: json object of the json file
@return: list of features depending on category (test case type)</doc>
<msg timestamp="20220120 16:06:29.139" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220120 16:06:29.138" endtime="20220120 16:06:29.139"/>
</kw>
<msg timestamp="20220120 16:06:29.140" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220120 16:06:29.138" endtime="20220120 16:06:29.140"/>
</kw>
<kw name="keyword.Get Device Specific Keywords To Execute For Features" library="keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${category}</arg>
<arg>${device['type']}</arg>
<kw name="Get All Device Specific Keywords" library="libraries.keyword_handler">
<var>${all_keywords}</var>
<arg>${application}</arg>
<arg>${category}</arg>
<arg>${device_type}</arg>
<doc>The get_all_device_specific_keywords method is used to get all keywords who are having ${device} as an argument
from .robot files from folder structure of a given application and category
@param application: Name of the application for eg. kragle / kiros etc.
@param category: UI/System/Robotics
@param device_type: Mouse/Keyboard
@return: dictionary of keywords with respective tags</doc>
<msg timestamp="20220120 16:06:29.149" level="INFO">${all_keywords} = {}</msg>
<status status="PASS" starttime="20220120 16:06:29.148" endtime="20220120 16:06:29.149"/>
</kw>
<kw name="Get Device Specific Keywords By Features" library="libraries.keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${all_keywords}</arg>
<doc>The get_keywords_by_features method is used to get keywords with respective tags/features from all keywords.
@param features: list of tags/features
@param all_keywords: dictionary of all keywords with respective tags/features
@return: dictionary of keywords with respective features</doc>
<msg timestamp="20220120 16:06:29.150" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220120 16:06:29.150" endtime="20220120 16:06:29.150"/>
</kw>
<msg timestamp="20220120 16:06:29.150" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220120 16:06:29.140" endtime="20220120 16:06:29.150"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${dict_size}</var>
<arg>${keywords}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:06:29.152" level="INFO">Length is 0</msg>
<msg timestamp="20220120 16:06:29.152" level="INFO">${dict_size} = 0</msg>
<status status="PASS" starttime="20220120 16:06:29.152" endtime="20220120 16:06:29.152"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${dict_size}'=='0'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220120 16:06:29.152" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220120 16:06:29.152" endtime="20220120 16:06:29.152"/>
</kw>
<status status="PASS" starttime="20220120 16:06:29.135" endtime="20220120 16:06:29.152"/>
</kw>
<status status="PASS" starttime="20220120 16:06:28.689" endtime="20220120 16:06:29.152"/>
</iter>
<status status="PASS" starttime="20220120 16:06:28.689" endtime="20220120 16:06:29.152"/>
</for>
<doc>It runs device specific test cases depending on features for UI, System and Robotics.</doc>
<tag>Pre-setup: device_specific</tag>
<status status="PASS" starttime="20220120 16:06:28.687" endtime="20220120 16:06:29.152"/>
</test>
<test id="s1-t3" name="Connect Device: POWERPLAY:wired">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>device_connector.Connect Device</arg>
<arg>POWERPLAY:wired</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="device_connector.Connect Device" library="device_connector">
<arg>POWERPLAY:wired</arg>
<doc>Connect devices to the acroname using device data available in json file.</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${device_connection_type}' != 'Acroname'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:29.155" endtime="20220120 16:06:29.155"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Connecting DUT: ${device_name}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:06:29.155" endtime="20220120 16:06:29.156"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${device_name}</var>
<arg>${device_name}</arg>
<arg>:</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20220120 16:06:29.156" level="INFO">${device_name} = POWERPLAY</msg>
<status status="PASS" starttime="20220120 16:06:29.156" endtime="20220120 16:06:29.156"/>
</kw>
<kw name="device_connector.Connect To Acroname Device" library="device_connector">
<arg>${device_name}</arg>
<kw name="Connect Device" library="libraries.acroname_hub.device.Device">
<arg>${device_name}</arg>
<msg timestamp="20220120 16:06:30.167" level="INFO">0
1752629528
4405F
1752629528</msg>
<status status="PASS" starttime="20220120 16:06:29.158" endtime="20220120 16:06:30.167"/>
</kw>
<status status="PASS" starttime="20220120 16:06:29.158" endtime="20220120 16:06:30.168"/>
</kw>
<status status="PASS" starttime="20220120 16:06:29.154" endtime="20220120 16:06:30.168"/>
</kw>
<status status="PASS" starttime="20220120 16:06:29.154" endtime="20220120 16:06:30.169"/>
</kw>
<tag>Pre-setup: test_setup</tag>
<status status="PASS" starttime="20220120 16:06:29.153" endtime="20220120 16:06:30.170"/>
</test>
<test id="s1-t4" name="Test: Verify If Device Startup Effect Is Checked By Default / Uncheck Device Startup Effect: POWERPLAY (Windows, Wired)">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Test: Verify If Device Startup Effect Is Checked By Default / Uncheck Device Startup Effect</arg>
<arg>{'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '405f', 'firmware': '7.1.11', 'modelId': '4405f', 'type': 'POWERPLAY', 'device_specific_features': {'lightsync': {'effect': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}}, 'connection_interfaces': {'wired': {'pid': '405f', 'productId': '405f'}}}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Test: Verify If Device Startup Effect Is Checked By Default / Uncheck Device Startup Effect" library="powerplay_regression_ui">
<arg>{'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '405f', 'firmware': '7.1.11', 'modelId': '4405f', 'type': 'POWERPLAY', 'device_specific_features': {'lightsync': {'effect': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}}, 'connection_interfaces': {'wired': {'pid': '405f', 'productId': '405f'}}}</arg>
<tag>device_settings</tag>
<doc>Select the powerplay
Go to Settings Page
Verify default startup effect
Uncheck startup effect and verify
Check startup effect and verify</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>"Test if Device startup effect is checked by default and can be unchecked"</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:06:30.184" endtime="20220120 16:06:30.185"/>
</kw>
<kw name="home.Open Device Configuration" library="home_screen">
<arg>${device['displayName']}</arg>
<doc>Click on the device to open device configuration and if device introduction page opens then skip it.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device Home Screen Loaded</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device Home Screen Loaded" library="home_screen">
<arg>${device_name}</arg>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:06:35.269" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:06:30.218" endtime="20220120 16:06:35.269"/>
</kw>
<status status="FAIL" starttime="20220120 16:06:30.216" endtime="20220120 16:06:35.269"/>
</kw>
<msg timestamp="20220120 16:06:35.270" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220120 16:06:30.214" endtime="20220120 16:06:35.270"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:06:35.273" endtime="20220120 16:06:35.273"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:06:35.274" endtime="20220120 16:06:35.274"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:06:35.276" endtime="20220120 16:06:35.276"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:06:35.277" endtime="20220120 16:06:35.277"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:06:35.278" endtime="20220120 16:06:35.278"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220120 16:06:35.279" endtime="20220120 16:06:35.279"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:06:35.271" endtime="20220120 16:06:35.280"/>
</branch>
<status status="PASS" starttime="20220120 16:06:35.270" endtime="20220120 16:06:35.280"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:06:35.284" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:06:35.284" endtime="20220120 16:06:35.284"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:06:35.286" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:06:35.286" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:06:35.285" endtime="20220120 16:06:35.286"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:06:35.288" endtime="20220120 16:06:35.306"/>
</kw>
<status status="PASS" starttime="20220120 16:06:35.287" endtime="20220120 16:06:35.306"/>
</kw>
<status status="PASS" starttime="20220120 16:06:35.282" endtime="20220120 16:06:35.306"/>
</kw>
<msg timestamp="20220120 16:06:35.306" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220120 16:06:35.281" endtime="20220120 16:06:35.306"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:06:35.307" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:06:35.307" endtime="20220120 16:06:35.308"/>
</kw>
<status status="PASS" starttime="20220120 16:06:30.213" endtime="20220120 16:06:35.308"/>
</iter>
<status status="PASS" starttime="20220120 16:06:30.213" endtime="20220120 16:06:35.308"/>
</for>
<status status="PASS" starttime="20220120 16:06:30.212" endtime="20220120 16:06:35.308"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:06:36.327" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220120 16:06:36.328" level="INFO" html="true">&lt;a href=screenshot-20220120-160636.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160636.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:06:36.515" level="INFO">Failed to find element with selector: .back-button</msg>
<msg timestamp="20220120 16:06:36.516" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:06:35.310" endtime="20220120 16:06:36.516"/>
</kw>
<msg timestamp="20220120 16:06:36.516" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220120 16:06:35.309" endtime="20220120 16:06:36.516"/>
</kw>
<msg timestamp="20220120 16:06:36.517" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220120 16:06:35.309" endtime="20220120 16:06:36.517"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:06:36.518" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:06:36.517" endtime="20220120 16:06:36.518"/>
</kw>
<status status="PASS" starttime="20220120 16:06:35.308" endtime="20220120 16:06:36.518"/>
</iter>
<status status="PASS" starttime="20220120 16:06:35.308" endtime="20220120 16:06:36.518"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:06:36.521" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:06:36.521" endtime="20220120 16:06:36.521"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:06:36.522" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:06:36.522" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:06:36.522" endtime="20220120 16:06:36.522"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:06:36.523" endtime="20220120 16:06:36.533"/>
</kw>
<status status="PASS" starttime="20220120 16:06:36.522" endtime="20220120 16:06:36.533"/>
</kw>
<status status="PASS" starttime="20220120 16:06:36.520" endtime="20220120 16:06:36.534"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:06:38.550" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220120 16:06:38.552" level="INFO" html="true">&lt;a href=screenshot-20220120-160638.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160638.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:06:38.743" level="INFO">Failed to find element with selector: .back-button</msg>
<status status="PASS" starttime="20220120 16:06:36.534" endtime="20220120 16:06:38.744"/>
</kw>
<status status="PASS" starttime="20220120 16:06:36.520" endtime="20220120 16:06:38.745"/>
</kw>
<status status="PASS" starttime="20220120 16:06:30.210" endtime="20220120 16:06:38.745"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:06:38.766" level="FAIL">Failure: Selector ".left-arrow-container.disabled" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220120 16:06:38.748" endtime="20220120 16:06:38.766"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<status status="NOT RUN" starttime="20220120 16:06:38.767" endtime="20220120 16:06:38.767"/>
</kw>
<status status="FAIL" starttime="20220120 16:06:38.748" endtime="20220120 16:06:38.767"/>
</kw>
<msg timestamp="20220120 16:06:38.767" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220120 16:06:38.747" endtime="20220120 16:06:38.767"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:06:38.768" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:06:38.768" endtime="20220120 16:06:38.768"/>
</kw>
<status status="PASS" starttime="20220120 16:06:38.747" endtime="20220120 16:06:38.768"/>
</iter>
<status status="PASS" starttime="20220120 16:06:38.747" endtime="20220120 16:06:38.768"/>
</for>
<status status="PASS" starttime="20220120 16:06:38.747" endtime="20220120 16:06:38.768"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:06:40.778" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<msg timestamp="20220120 16:06:40.780" level="INFO" html="true">&lt;a href=screenshot-20220120-160640.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160640.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:06:40.978" level="INFO">Failed to find element with selector: .right-arrow-container.disabled</msg>
<status status="PASS" starttime="20220120 16:06:38.770" endtime="20220120 16:06:40.980"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:06:43.049" level="INFO">Failed to find element with selector: .right-arrow-container.hidden and attributes:{}</msg>
<msg timestamp="20220120 16:06:43.051" level="INFO" html="true">&lt;a href=screenshot-20220120-160643.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160643.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:06:43.232" level="INFO">Failed to find element with selector: .right-arrow-container.hidden</msg>
<status status="PASS" starttime="20220120 16:06:40.980" endtime="20220120 16:06:43.233"/>
</kw>
<status status="PASS" starttime="20220120 16:06:38.770" endtime="20220120 16:06:43.234"/>
</kw>
<msg timestamp="20220120 16:06:43.234" level="INFO">${right_scroll_present} = True</msg>
<status status="PASS" starttime="20220120 16:06:38.769" endtime="20220120 16:06:43.234"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:06:43.235" endtime="20220120 16:06:43.286"/>
</kw>
<msg timestamp="20220120 16:06:43.286" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220120 16:06:43.235" endtime="20220120 16:06:43.286"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:06:43.287" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:06:43.287" endtime="20220120 16:06:43.288"/>
</kw>
<status status="PASS" starttime="20220120 16:06:38.768" endtime="20220120 16:06:43.288"/>
</iter>
<status status="PASS" starttime="20220120 16:06:38.768" endtime="20220120 16:06:43.288"/>
</for>
<status status="PASS" starttime="20220120 16:06:38.746" endtime="20220120 16:06:43.288"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220120 16:06:48.290" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220120 16:06:43.288" endtime="20220120 16:06:48.290"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:06:48.293" endtime="20220120 16:06:48.322"/>
</kw>
<status status="PASS" starttime="20220120 16:06:48.292" endtime="20220120 16:06:48.322"/>
</kw>
<msg timestamp="20220120 16:06:48.322" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:06:48.290" endtime="20220120 16:06:48.322"/>
</kw>
<if>
<branch type="IF" condition="${status} is ${False}">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>GHUB is unable to load the device: ${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:06:48.323" endtime="20220120 16:06:48.323"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:06:48.323" endtime="20220120 16:06:48.323"/>
</branch>
<status status="PASS" starttime="20220120 16:06:48.323" endtime="20220120 16:06:48.323"/>
</if>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${status} is ${False}</arg>
<arg>Trigger Wake Bots</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:06:48.325" endtime="20220120 16:06:48.325"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${inactive_status}</var>
<arg>home.Is Specific Device Inactive</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Specific Device Inactive" library="home_screen">
<arg>${device_name}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>${home_device_inactive_device_name}${device_name}${home_device_inactive_device_icon}</arg>
<arg>3</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:06:51.362" level="FAIL">Failure: Selector "//h2[contains(text(),"POWERPLAY")]//following-sibling::div[contains(text(), "INACTIVE")]" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:06:48.326" endtime="20220120 16:06:51.362"/>
</kw>
<status status="FAIL" starttime="20220120 16:06:48.326" endtime="20220120 16:06:51.363"/>
</kw>
<msg timestamp="20220120 16:06:51.363" level="INFO">${inactive_status} = False</msg>
<status status="PASS" starttime="20220120 16:06:48.325" endtime="20220120 16:06:51.364"/>
</kw>
<if>
<branch type="IF" condition="${inactive_status}">
<kw name="Trigger Wake Bots" library="home_screen">
<status status="NOT RUN" starttime="20220120 16:06:51.365" endtime="20220120 16:06:51.365"/>
</kw>
<kw name="home.Restart GHUB Till Device Get Load" library="home_screen">
<arg>${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:06:51.367" endtime="20220120 16:06:51.367"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:06:51.369" endtime="20220120 16:06:51.369"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_loaded}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220120 16:06:51.370" endtime="20220120 16:06:51.370"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${device_loaded} is ${True}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20220120 16:06:51.371" endtime="20220120 16:06:51.372"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${inactive_status}</var>
<arg>home.Is Specific Device Inactive</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220120 16:06:51.373" endtime="20220120 16:06:51.373"/>
</kw>
<if>
<branch type="IF" condition="${inactive_status}">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>GHUB is unable to load the device: ${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:06:51.374" endtime="20220120 16:06:51.374"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:06:51.373" endtime="20220120 16:06:51.374"/>
</branch>
<status status="NOT RUN" starttime="20220120 16:06:51.373" endtime="20220120 16:06:51.374"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220120 16:06:51.375" endtime="20220120 16:06:51.376"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${device_loaded} is ${False} or ${inactive_status} is ${True} or ${device_reflected_on_ui} is ${False}</arg>
<arg>home.Reconnect Device Till Device Get Load</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20220120 16:06:51.377" endtime="20220120 16:06:51.378"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:06:51.364" endtime="20220120 16:06:51.378"/>
</branch>
<status status="PASS" starttime="20220120 16:06:51.364" endtime="20220120 16:06:51.378"/>
</if>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:06:51.403" level="FAIL">Failure: Selector ".left-arrow-container.disabled" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220120 16:06:51.387" endtime="20220120 16:06:51.403"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<status status="NOT RUN" starttime="20220120 16:06:51.404" endtime="20220120 16:06:51.404"/>
</kw>
<status status="FAIL" starttime="20220120 16:06:51.386" endtime="20220120 16:06:51.404"/>
</kw>
<msg timestamp="20220120 16:06:51.404" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220120 16:06:51.385" endtime="20220120 16:06:51.404"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:06:51.406" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:06:51.405" endtime="20220120 16:06:51.406"/>
</kw>
<status status="PASS" starttime="20220120 16:06:51.384" endtime="20220120 16:06:51.406"/>
</iter>
<status status="PASS" starttime="20220120 16:06:51.383" endtime="20220120 16:06:51.406"/>
</for>
<status status="PASS" starttime="20220120 16:06:51.383" endtime="20220120 16:06:51.406"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:06:53.413" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<msg timestamp="20220120 16:06:53.414" level="INFO" html="true">&lt;a href=screenshot-20220120-160653.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160653.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:06:53.605" level="INFO">Failed to find element with selector: .right-arrow-container.disabled</msg>
<status status="PASS" starttime="20220120 16:06:51.409" endtime="20220120 16:06:53.606"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:06:55.672" level="INFO">Failed to find element with selector: .right-arrow-container.hidden and attributes:{}</msg>
<msg timestamp="20220120 16:06:55.673" level="INFO" html="true">&lt;a href=screenshot-20220120-160655.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160655.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:06:55.852" level="INFO">Failed to find element with selector: .right-arrow-container.hidden</msg>
<status status="PASS" starttime="20220120 16:06:53.607" endtime="20220120 16:06:55.853"/>
</kw>
<status status="PASS" starttime="20220120 16:06:51.408" endtime="20220120 16:06:55.853"/>
</kw>
<msg timestamp="20220120 16:06:55.854" level="INFO">${right_scroll_present} = True</msg>
<status status="PASS" starttime="20220120 16:06:51.407" endtime="20220120 16:06:55.854"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:06:55.855" endtime="20220120 16:06:55.890"/>
</kw>
<msg timestamp="20220120 16:06:55.890" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220120 16:06:55.854" endtime="20220120 16:06:55.890"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:06:55.891" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:06:55.890" endtime="20220120 16:06:55.891"/>
</kw>
<status status="PASS" starttime="20220120 16:06:51.407" endtime="20220120 16:06:55.891"/>
</iter>
<status status="PASS" starttime="20220120 16:06:51.406" endtime="20220120 16:06:55.891"/>
</for>
<status status="PASS" starttime="20220120 16:06:51.380" endtime="20220120 16:06:55.891"/>
</kw>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:06:55.893" endtime="20220120 16:06:55.916"/>
</kw>
<status status="PASS" starttime="20220120 16:06:55.892" endtime="20220120 16:06:55.916"/>
</kw>
<status status="PASS" starttime="20220120 16:06:30.207" endtime="20220120 16:06:55.916"/>
</kw>
<msg timestamp="20220120 16:06:55.916" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:06:30.206" endtime="20220120 16:06:55.917"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'False'">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>${device_name} not loaded in GHub.</arg>
<status status="NOT RUN" starttime="20220120 16:06:55.917" endtime="20220120 16:06:55.917"/>
</kw>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220120 16:06:55.918" endtime="20220120 16:06:55.918"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:06:55.917" endtime="20220120 16:06:55.918"/>
</branch>
<status status="PASS" starttime="20220120 16:06:55.917" endtime="20220120 16:06:55.918"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${inactive}</var>
<arg>home.Is Specific Device Inactive</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Specific Device Inactive" library="home_screen">
<arg>${device_name}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>${home_device_inactive_device_name}${device_name}${home_device_inactive_device_icon}</arg>
<arg>3</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:06:58.980" level="FAIL">Failure: Selector "//h2[contains(text(),"POWERPLAY")]//following-sibling::div[contains(text(), "INACTIVE")]" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:06:55.920" endtime="20220120 16:06:58.981"/>
</kw>
<status status="FAIL" starttime="20220120 16:06:55.919" endtime="20220120 16:06:58.981"/>
</kw>
<msg timestamp="20220120 16:06:58.981" level="INFO">${inactive} = False</msg>
<status status="PASS" starttime="20220120 16:06:55.919" endtime="20220120 16:06:58.981"/>
</kw>
<if>
<branch type="IF" condition="${inactive}">
<kw name="Sleep" library="BuiltIn">
<arg>20</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:06:58.982" endtime="20220120 16:06:58.982"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:06:58.981" endtime="20220120 16:06:58.983"/>
</branch>
<status status="PASS" starttime="20220120 16:06:58.981" endtime="20220120 16:06:58.983"/>
</if>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:06:58.983" endtime="20220120 16:06:59.616"/>
</kw>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220120 16:07:01.659" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220120 16:07:01.660" level="INFO" html="true">&lt;a href=screenshot-20220120-160701.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160701.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:07:01.853" level="INFO">Failed to find element with selector: .splash-screen-skip-button</msg>
<msg timestamp="20220120 16:07:01.853" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:06:59.621" endtime="20220120 16:07:01.853"/>
</kw>
<status status="PASS" starttime="20220120 16:06:59.620" endtime="20220120 16:07:01.853"/>
</kw>
<status status="PASS" starttime="20220120 16:06:59.617" endtime="20220120 16:07:01.853"/>
</kw>
<kw name="device_view.Handle Got It Popup" library="device_main_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${got_it_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_got_it_button}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_got_it_button}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:07:06.873" level="FAIL">Failure: Selector "//div[@class='coach-mark']/button[text()='GOT IT']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:07:01.855" endtime="20220120 16:07:06.873"/>
</kw>
<msg timestamp="20220120 16:07:06.874" level="INFO">${got_it_button_present} = False</msg>
<status status="PASS" starttime="20220120 16:07:01.855" endtime="20220120 16:07:06.875"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${got_it_button_present} is ${False}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220120 16:07:06.877" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220120 16:07:06.876" endtime="20220120 16:07:06.877"/>
</kw>
<status status="PASS" starttime="20220120 16:07:01.854" endtime="20220120 16:07:06.878"/>
</kw>
<status status="PASS" starttime="20220120 16:06:30.186" endtime="20220120 16:07:06.879"/>
</kw>
<kw name="device_view.Click On Settings" library="device_main_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${device_view_settings}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:07:06.885" level="INFO">${words} = ['#setting-sprocket']</msg>
<status status="PASS" starttime="20220120 16:07:06.885" endtime="20220120 16:07:06.885"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:07:06.887" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:07:06.887" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:07:06.886" endtime="20220120 16:07:06.887"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:07:06.890" endtime="20220120 16:07:07.512"/>
</kw>
<status status="PASS" starttime="20220120 16:07:06.888" endtime="20220120 16:07:07.512"/>
</kw>
<status status="PASS" starttime="20220120 16:07:06.883" endtime="20220120 16:07:07.513"/>
</kw>
<status status="PASS" starttime="20220120 16:07:06.881" endtime="20220120 16:07:07.514"/>
</kw>
<kw name="device_settings.Get Current Device Startup Effect status from UI" library="device_settings_screen">
<var>${initial_ui_startup_effect_status}</var>
<doc>Gets the current Device startup effect status from the UI</doc>
<kw name="Is Checkbox Selected" library="libraries.components.React">
<var>${checked_status}</var>
<arg>selector=${device_settings_device_startup_effect_checkbox}</arg>
<doc>Returns true if checkbox is selected of an element.</doc>
<msg timestamp="20220120 16:07:07.537" level="INFO">${checked_status} = True</msg>
<status status="PASS" starttime="20220120 16:07:07.515" endtime="20220120 16:07:07.537"/>
</kw>
<if>
<branch type="IF" condition="'${checked_status}'=='True'">
<kw name="Set Variable" library="BuiltIn">
<var>${status}</var>
<arg>Enable</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:07:07.540" level="INFO">${status} = Enable</msg>
<status status="PASS" starttime="20220120 16:07:07.538" endtime="20220120 16:07:07.540"/>
</kw>
<status status="PASS" starttime="20220120 16:07:07.538" endtime="20220120 16:07:07.540"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${status}</var>
<arg>Disable</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20220120 16:07:07.540" endtime="20220120 16:07:07.540"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:07:07.540" endtime="20220120 16:07:07.540"/>
</branch>
<status status="PASS" starttime="20220120 16:07:07.538" endtime="20220120 16:07:07.540"/>
</if>
<msg timestamp="20220120 16:07:07.541" level="INFO">${initial_ui_startup_effect_status} = Enable</msg>
<status status="PASS" starttime="20220120 16:07:07.514" endtime="20220120 16:07:07.541"/>
</kw>
<kw name="device_settings.Click On Device Startup Effect" library="device_settings_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_settings_startup_effect_label}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:07:07.543" endtime="20220120 16:07:08.110"/>
</kw>
<status status="PASS" starttime="20220120 16:07:07.541" endtime="20220120 16:07:08.111"/>
</kw>
<kw name="device_settings.Get Current Device Startup Effect status from UI" library="device_settings_screen">
<var>${updated_ui_startup_effect_status}</var>
<doc>Gets the current Device startup effect status from the UI</doc>
<kw name="Is Checkbox Selected" library="libraries.components.React">
<var>${checked_status}</var>
<arg>selector=${device_settings_device_startup_effect_checkbox}</arg>
<doc>Returns true if checkbox is selected of an element.</doc>
<msg timestamp="20220120 16:07:08.139" level="INFO">${checked_status} = False</msg>
<status status="PASS" starttime="20220120 16:07:08.116" endtime="20220120 16:07:08.139"/>
</kw>
<if>
<branch type="IF" condition="'${checked_status}'=='True'">
<kw name="Set Variable" library="BuiltIn">
<var>${status}</var>
<arg>Enable</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20220120 16:07:08.141" endtime="20220120 16:07:08.141"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:07:08.140" endtime="20220120 16:07:08.141"/>
</branch>
<branch type="ELSE">
<kw name="Set Variable" library="BuiltIn">
<var>${status}</var>
<arg>Disable</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:07:08.142" level="INFO">${status} = Disable</msg>
<status status="PASS" starttime="20220120 16:07:08.142" endtime="20220120 16:07:08.142"/>
</kw>
<status status="PASS" starttime="20220120 16:07:08.141" endtime="20220120 16:07:08.142"/>
</branch>
<status status="PASS" starttime="20220120 16:07:08.139" endtime="20220120 16:07:08.142"/>
</if>
<msg timestamp="20220120 16:07:08.143" level="INFO">${updated_ui_startup_effect_status} = Disable</msg>
<status status="PASS" starttime="20220120 16:07:08.114" endtime="20220120 16:07:08.143"/>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<arg>${initial_ui_startup_effect_status}</arg>
<arg>${updated_ui_startup_effect_status}</arg>
<doc>Fails if the given objects are equal.</doc>
<status status="PASS" starttime="20220120 16:07:08.144" endtime="20220120 16:07:08.144"/>
</kw>
<kw name="End Test" library="logging" type="TEARDOWN">
<arg>${KEYWORD STATUS}</arg>
<doc>Ensure to Call this keyword at Teardown of all High Level Test Keywords
If Test Fails - This will capture logs and screenshots and append links to report</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}Test Status: ${test_status}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:07:08.147" endtime="20220120 16:07:08.147"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${test_status}'=='FAIL'</arg>
<arg>Get Log Files And Upload To FTPDrive</arg>
<arg>end_test</arg>
<arg>ELSE</arg>
<arg>Return From Keyword</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20220120 16:07:08.149" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220120 16:07:08.148" endtime="20220120 16:07:08.149"/>
</kw>
<status status="PASS" starttime="20220120 16:07:08.147" endtime="20220120 16:07:08.149"/>
</kw>
<status status="PASS" starttime="20220120 16:07:08.145" endtime="20220120 16:07:08.149"/>
</kw>
<status status="PASS" starttime="20220120 16:06:30.182" endtime="20220120 16:07:08.149"/>
</kw>
<status status="PASS" starttime="20220120 16:06:30.181" endtime="20220120 16:07:08.149"/>
</kw>
<tag>Device: POWERPLAY (Windows, Wired)</tag>
<tag>Device Type: POWERPLAY</tag>
<tag>Feature: device_settings</tag>
<tag>OS: Windows-10-10.0.19041-SP0</tag>
<status status="PASS" starttime="20220120 16:06:30.171" endtime="20220120 16:07:08.150"/>
</test>
<test id="s1-t5" name="Test: Device Settings For Powerplay - UI Verification: POWERPLAY (Windows, Wired)">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Test: Device Settings For Powerplay - UI Verification</arg>
<arg>{'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '405f', 'firmware': '7.1.11', 'modelId': '4405f', 'type': 'POWERPLAY', 'device_specific_features': {'lightsync': {'effect': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}}, 'connection_interfaces': {'wired': {'pid': '405f', 'productId': '405f'}}}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Test: Device Settings For Powerplay - UI Verification" library="powerplay_regression_ui">
<arg>{'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '405f', 'firmware': '7.1.11', 'modelId': '4405f', 'type': 'POWERPLAY', 'device_specific_features': {'lightsync': {'effect': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}}, 'connection_interfaces': {'wired': {'pid': '405f', 'productId': '405f'}}}</arg>
<tag>device_settings</tag>
<doc>Test All The Device Settings Available For Powerplay</doc>
<kw name="home.Open Device Configuration" library="home_screen">
<arg>${device['displayName']}</arg>
<doc>Click on the device to open device configuration and if device introduction page opens then skip it.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device Home Screen Loaded</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device Home Screen Loaded" library="home_screen">
<arg>${device_name}</arg>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:07:13.180" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:07:08.174" endtime="20220120 16:07:13.180"/>
</kw>
<status status="FAIL" starttime="20220120 16:07:08.173" endtime="20220120 16:07:13.181"/>
</kw>
<msg timestamp="20220120 16:07:13.181" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220120 16:07:08.173" endtime="20220120 16:07:13.181"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:07:13.182" endtime="20220120 16:07:13.182"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:07:13.183" endtime="20220120 16:07:13.183"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:07:13.183" endtime="20220120 16:07:13.183"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:07:13.184" endtime="20220120 16:07:13.184"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:07:13.185" endtime="20220120 16:07:13.185"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220120 16:07:13.185" endtime="20220120 16:07:13.185"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:07:13.182" endtime="20220120 16:07:13.185"/>
</branch>
<status status="PASS" starttime="20220120 16:07:13.181" endtime="20220120 16:07:13.186"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:07:13.188" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:07:13.188" endtime="20220120 16:07:13.188"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:07:13.189" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:07:13.189" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:07:13.189" endtime="20220120 16:07:13.189"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:07:23.240" level="INFO">Failed to find element with selector: #home-view and attributes:{}</msg>
<msg timestamp="20220120 16:07:23.241" level="INFO" html="true">&lt;a href=screenshot-20220120-160723.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160723.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:07:23.375" level="INFO">Failed to find element with selector: #home-view</msg>
<msg timestamp="20220120 16:07:23.375" level="FAIL">Failure: Selector "#home-view" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:07:13.191" endtime="20220120 16:07:23.375"/>
</kw>
<status status="FAIL" starttime="20220120 16:07:13.190" endtime="20220120 16:07:23.375"/>
</kw>
<status status="FAIL" starttime="20220120 16:07:13.187" endtime="20220120 16:07:23.376"/>
</kw>
<msg timestamp="20220120 16:07:23.376" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220120 16:07:13.186" endtime="20220120 16:07:23.376"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:07:23.376" endtime="20220120 16:07:23.377"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:07:23.378" endtime="20220120 16:07:23.395"/>
</kw>
<msg timestamp="20220120 16:07:23.395" level="INFO">${back_button_present} = True</msg>
<status status="PASS" starttime="20220120 16:07:23.377" endtime="20220120 16:07:23.395"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:07:23.396" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:07:23.396" endtime="20220120 16:07:23.396"/>
</kw>
<status status="PASS" starttime="20220120 16:07:08.172" endtime="20220120 16:07:23.396"/>
</iter>
<status status="PASS" starttime="20220120 16:07:08.172" endtime="20220120 16:07:23.396"/>
</for>
<status status="PASS" starttime="20220120 16:07:08.172" endtime="20220120 16:07:23.397"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:07:23.398" endtime="20220120 16:07:23.410"/>
</kw>
<msg timestamp="20220120 16:07:23.411" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:07:23.398" endtime="20220120 16:07:23.411"/>
</kw>
<msg timestamp="20220120 16:07:23.411" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:07:23.397" endtime="20220120 16:07:23.412"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:07:23.412" endtime="20220120 16:07:23.412"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${clicked}</var>
<arg>common.Click On Back</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:07:23.414" endtime="20220120 16:07:24.011"/>
</kw>
<status status="PASS" starttime="20220120 16:07:23.414" endtime="20220120 16:07:24.012"/>
</kw>
<msg timestamp="20220120 16:07:24.013" level="INFO">${clicked} = True</msg>
<status status="PASS" starttime="20220120 16:07:23.413" endtime="20220120 16:07:24.013"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clicked}==False</arg>
<arg>common.alerts</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:07:24.015" endtime="20220120 16:07:24.017"/>
</kw>
<status status="PASS" starttime="20220120 16:07:23.397" endtime="20220120 16:07:24.017"/>
</iter>
<iter>
<var name="${index}">1</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:07:24.023" endtime="20220120 16:07:24.050"/>
</kw>
<msg timestamp="20220120 16:07:24.050" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:07:24.021" endtime="20220120 16:07:24.050"/>
</kw>
<msg timestamp="20220120 16:07:24.051" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:07:24.019" endtime="20220120 16:07:24.051"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:07:24.053" endtime="20220120 16:07:24.053"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${clicked}</var>
<arg>common.Click On Back</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:07:24.057" endtime="20220120 16:07:24.633"/>
</kw>
<status status="PASS" starttime="20220120 16:07:24.055" endtime="20220120 16:07:24.633"/>
</kw>
<msg timestamp="20220120 16:07:24.634" level="INFO">${clicked} = True</msg>
<status status="PASS" starttime="20220120 16:07:24.054" endtime="20220120 16:07:24.634"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clicked}==False</arg>
<arg>common.alerts</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:07:24.635" endtime="20220120 16:07:24.636"/>
</kw>
<status status="PASS" starttime="20220120 16:07:24.017" endtime="20220120 16:07:24.636"/>
</iter>
<iter>
<var name="${index}">2</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:07:25.651" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220120 16:07:25.652" level="INFO" html="true">&lt;a href=screenshot-20220120-160725.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160725.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:07:25.852" level="INFO">Failed to find element with selector: .back-button</msg>
<msg timestamp="20220120 16:07:25.852" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:07:24.640" endtime="20220120 16:07:25.852"/>
</kw>
<msg timestamp="20220120 16:07:25.853" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220120 16:07:24.639" endtime="20220120 16:07:25.853"/>
</kw>
<msg timestamp="20220120 16:07:25.853" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220120 16:07:24.637" endtime="20220120 16:07:25.853"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:07:25.854" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:07:25.854" endtime="20220120 16:07:25.854"/>
</kw>
<status status="PASS" starttime="20220120 16:07:24.636" endtime="20220120 16:07:25.854"/>
</iter>
<status status="PASS" starttime="20220120 16:07:23.397" endtime="20220120 16:07:25.854"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:07:25.856" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:07:25.856" endtime="20220120 16:07:25.856"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:07:25.857" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:07:25.857" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:07:25.857" endtime="20220120 16:07:25.857"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:07:25.859" endtime="20220120 16:07:25.872"/>
</kw>
<status status="PASS" starttime="20220120 16:07:25.858" endtime="20220120 16:07:25.872"/>
</kw>
<status status="PASS" starttime="20220120 16:07:25.855" endtime="20220120 16:07:25.872"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:07:27.903" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220120 16:07:27.905" level="INFO" html="true">&lt;a href=screenshot-20220120-160727.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160727.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:07:28.099" level="INFO">Failed to find element with selector: .back-button</msg>
<status status="PASS" starttime="20220120 16:07:25.873" endtime="20220120 16:07:28.100"/>
</kw>
<status status="PASS" starttime="20220120 16:07:25.855" endtime="20220120 16:07:28.101"/>
</kw>
<status status="PASS" starttime="20220120 16:07:08.171" endtime="20220120 16:07:28.101"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:07:28.123" level="FAIL">Failure: Selector ".left-arrow-container.disabled" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220120 16:07:28.105" endtime="20220120 16:07:28.123"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<status status="NOT RUN" starttime="20220120 16:07:28.123" endtime="20220120 16:07:28.123"/>
</kw>
<status status="FAIL" starttime="20220120 16:07:28.104" endtime="20220120 16:07:28.123"/>
</kw>
<msg timestamp="20220120 16:07:28.123" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220120 16:07:28.104" endtime="20220120 16:07:28.123"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:07:28.124" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:07:28.124" endtime="20220120 16:07:28.124"/>
</kw>
<status status="PASS" starttime="20220120 16:07:28.103" endtime="20220120 16:07:28.124"/>
</iter>
<status status="PASS" starttime="20220120 16:07:28.103" endtime="20220120 16:07:28.124"/>
</for>
<status status="PASS" starttime="20220120 16:07:28.103" endtime="20220120 16:07:28.124"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:07:30.193" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<msg timestamp="20220120 16:07:30.195" level="INFO" html="true">&lt;a href=screenshot-20220120-160730.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160730.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:07:30.383" level="INFO">Failed to find element with selector: .right-arrow-container.disabled</msg>
<status status="PASS" starttime="20220120 16:07:28.127" endtime="20220120 16:07:30.384"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:07:32.413" level="INFO">Failed to find element with selector: .right-arrow-container.hidden and attributes:{}</msg>
<msg timestamp="20220120 16:07:32.414" level="INFO" html="true">&lt;a href=screenshot-20220120-160732.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160732.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:07:32.610" level="INFO">Failed to find element with selector: .right-arrow-container.hidden</msg>
<status status="PASS" starttime="20220120 16:07:30.384" endtime="20220120 16:07:32.611"/>
</kw>
<status status="PASS" starttime="20220120 16:07:28.126" endtime="20220120 16:07:32.611"/>
</kw>
<msg timestamp="20220120 16:07:32.611" level="INFO">${right_scroll_present} = True</msg>
<status status="PASS" starttime="20220120 16:07:28.125" endtime="20220120 16:07:32.611"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:07:32.612" endtime="20220120 16:07:32.664"/>
</kw>
<msg timestamp="20220120 16:07:32.664" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220120 16:07:32.612" endtime="20220120 16:07:32.664"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:07:32.665" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:07:32.665" endtime="20220120 16:07:32.665"/>
</kw>
<status status="PASS" starttime="20220120 16:07:28.125" endtime="20220120 16:07:32.665"/>
</iter>
<status status="PASS" starttime="20220120 16:07:28.124" endtime="20220120 16:07:32.666"/>
</for>
<status status="PASS" starttime="20220120 16:07:28.102" endtime="20220120 16:07:32.667"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220120 16:07:37.668" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220120 16:07:32.667" endtime="20220120 16:07:37.668"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:07:37.673" endtime="20220120 16:07:37.702"/>
</kw>
<status status="PASS" starttime="20220120 16:07:37.671" endtime="20220120 16:07:37.702"/>
</kw>
<msg timestamp="20220120 16:07:37.702" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:07:37.669" endtime="20220120 16:07:37.703"/>
</kw>
<if>
<branch type="IF" condition="${status} is ${False}">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>GHUB is unable to load the device: ${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:07:37.703" endtime="20220120 16:07:37.703"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:07:37.703" endtime="20220120 16:07:37.703"/>
</branch>
<status status="PASS" starttime="20220120 16:07:37.703" endtime="20220120 16:07:37.703"/>
</if>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${status} is ${False}</arg>
<arg>Trigger Wake Bots</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:07:37.704" endtime="20220120 16:07:37.704"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${inactive_status}</var>
<arg>home.Is Specific Device Inactive</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Specific Device Inactive" library="home_screen">
<arg>${device_name}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>${home_device_inactive_device_name}${device_name}${home_device_inactive_device_icon}</arg>
<arg>3</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:07:40.727" level="FAIL">Failure: Selector "//h2[contains(text(),"POWERPLAY")]//following-sibling::div[contains(text(), "INACTIVE")]" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:07:37.706" endtime="20220120 16:07:40.727"/>
</kw>
<status status="FAIL" starttime="20220120 16:07:37.705" endtime="20220120 16:07:40.727"/>
</kw>
<msg timestamp="20220120 16:07:40.728" level="INFO">${inactive_status} = False</msg>
<status status="PASS" starttime="20220120 16:07:37.705" endtime="20220120 16:07:40.728"/>
</kw>
<if>
<branch type="IF" condition="${inactive_status}">
<kw name="Trigger Wake Bots" library="home_screen">
<status status="NOT RUN" starttime="20220120 16:07:40.729" endtime="20220120 16:07:40.729"/>
</kw>
<kw name="home.Restart GHUB Till Device Get Load" library="home_screen">
<arg>${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:07:40.730" endtime="20220120 16:07:40.731"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:07:40.732" endtime="20220120 16:07:40.732"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_loaded}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220120 16:07:40.733" endtime="20220120 16:07:40.734"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${device_loaded} is ${True}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20220120 16:07:40.734" endtime="20220120 16:07:40.734"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${inactive_status}</var>
<arg>home.Is Specific Device Inactive</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220120 16:07:40.735" endtime="20220120 16:07:40.735"/>
</kw>
<if>
<branch type="IF" condition="${inactive_status}">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>GHUB is unable to load the device: ${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:07:40.736" endtime="20220120 16:07:40.736"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:07:40.735" endtime="20220120 16:07:40.736"/>
</branch>
<status status="NOT RUN" starttime="20220120 16:07:40.735" endtime="20220120 16:07:40.736"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220120 16:07:40.736" endtime="20220120 16:07:40.736"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${device_loaded} is ${False} or ${inactive_status} is ${True} or ${device_reflected_on_ui} is ${False}</arg>
<arg>home.Reconnect Device Till Device Get Load</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20220120 16:07:40.737" endtime="20220120 16:07:40.737"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:07:40.729" endtime="20220120 16:07:40.737"/>
</branch>
<status status="PASS" starttime="20220120 16:07:40.729" endtime="20220120 16:07:40.737"/>
</if>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:07:40.752" level="FAIL">Failure: Selector ".left-arrow-container.disabled" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220120 16:07:40.741" endtime="20220120 16:07:40.752"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<status status="NOT RUN" starttime="20220120 16:07:40.752" endtime="20220120 16:07:40.753"/>
</kw>
<status status="FAIL" starttime="20220120 16:07:40.740" endtime="20220120 16:07:40.753"/>
</kw>
<msg timestamp="20220120 16:07:40.754" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220120 16:07:40.740" endtime="20220120 16:07:40.754"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:07:40.755" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:07:40.754" endtime="20220120 16:07:40.755"/>
</kw>
<status status="PASS" starttime="20220120 16:07:40.739" endtime="20220120 16:07:40.755"/>
</iter>
<status status="PASS" starttime="20220120 16:07:40.739" endtime="20220120 16:07:40.755"/>
</for>
<status status="PASS" starttime="20220120 16:07:40.739" endtime="20220120 16:07:40.755"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:07:42.765" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<msg timestamp="20220120 16:07:42.766" level="INFO" html="true">&lt;a href=screenshot-20220120-160742.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160742.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:07:42.978" level="INFO">Failed to find element with selector: .right-arrow-container.disabled</msg>
<status status="PASS" starttime="20220120 16:07:40.757" endtime="20220120 16:07:42.979"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:07:44.983" level="INFO">Failed to find element with selector: .right-arrow-container.hidden and attributes:{}</msg>
<msg timestamp="20220120 16:07:44.984" level="INFO" html="true">&lt;a href=screenshot-20220120-160744.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160744.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:07:45.219" level="INFO">Failed to find element with selector: .right-arrow-container.hidden</msg>
<status status="PASS" starttime="20220120 16:07:42.980" endtime="20220120 16:07:45.221"/>
</kw>
<status status="PASS" starttime="20220120 16:07:40.757" endtime="20220120 16:07:45.221"/>
</kw>
<msg timestamp="20220120 16:07:45.221" level="INFO">${right_scroll_present} = True</msg>
<status status="PASS" starttime="20220120 16:07:40.756" endtime="20220120 16:07:45.221"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:07:45.222" endtime="20220120 16:07:45.259"/>
</kw>
<msg timestamp="20220120 16:07:45.259" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220120 16:07:45.222" endtime="20220120 16:07:45.259"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:07:45.260" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:07:45.260" endtime="20220120 16:07:45.260"/>
</kw>
<status status="PASS" starttime="20220120 16:07:40.756" endtime="20220120 16:07:45.261"/>
</iter>
<status status="PASS" starttime="20220120 16:07:40.755" endtime="20220120 16:07:45.261"/>
</for>
<status status="PASS" starttime="20220120 16:07:40.738" endtime="20220120 16:07:45.261"/>
</kw>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:07:45.262" endtime="20220120 16:07:45.285"/>
</kw>
<status status="PASS" starttime="20220120 16:07:45.262" endtime="20220120 16:07:45.285"/>
</kw>
<status status="PASS" starttime="20220120 16:07:08.170" endtime="20220120 16:07:45.285"/>
</kw>
<msg timestamp="20220120 16:07:45.285" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:07:08.170" endtime="20220120 16:07:45.285"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'False'">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>${device_name} not loaded in GHub.</arg>
<status status="NOT RUN" starttime="20220120 16:07:45.286" endtime="20220120 16:07:45.286"/>
</kw>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220120 16:07:45.286" endtime="20220120 16:07:45.286"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:07:45.285" endtime="20220120 16:07:45.286"/>
</branch>
<status status="PASS" starttime="20220120 16:07:45.285" endtime="20220120 16:07:45.286"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${inactive}</var>
<arg>home.Is Specific Device Inactive</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Specific Device Inactive" library="home_screen">
<arg>${device_name}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>${home_device_inactive_device_name}${device_name}${home_device_inactive_device_icon}</arg>
<arg>3</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:07:48.305" level="FAIL">Failure: Selector "//h2[contains(text(),"POWERPLAY")]//following-sibling::div[contains(text(), "INACTIVE")]" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:07:45.289" endtime="20220120 16:07:48.305"/>
</kw>
<status status="FAIL" starttime="20220120 16:07:45.288" endtime="20220120 16:07:48.306"/>
</kw>
<msg timestamp="20220120 16:07:48.307" level="INFO">${inactive} = False</msg>
<status status="PASS" starttime="20220120 16:07:45.288" endtime="20220120 16:07:48.307"/>
</kw>
<if>
<branch type="IF" condition="${inactive}">
<kw name="Sleep" library="BuiltIn">
<arg>20</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:07:48.309" endtime="20220120 16:07:48.310"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:07:48.308" endtime="20220120 16:07:48.310"/>
</branch>
<status status="PASS" starttime="20220120 16:07:48.308" endtime="20220120 16:07:48.310"/>
</if>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:07:48.313" endtime="20220120 16:07:48.941"/>
</kw>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220120 16:07:50.975" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220120 16:07:50.977" level="INFO" html="true">&lt;a href=screenshot-20220120-160750.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160750.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:07:51.140" level="INFO">Failed to find element with selector: .splash-screen-skip-button</msg>
<msg timestamp="20220120 16:07:51.141" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:07:48.947" endtime="20220120 16:07:51.141"/>
</kw>
<status status="PASS" starttime="20220120 16:07:48.946" endtime="20220120 16:07:51.141"/>
</kw>
<status status="PASS" starttime="20220120 16:07:48.943" endtime="20220120 16:07:51.142"/>
</kw>
<kw name="device_view.Handle Got It Popup" library="device_main_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${got_it_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_got_it_button}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_got_it_button}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:07:56.165" level="FAIL">Failure: Selector "//div[@class='coach-mark']/button[text()='GOT IT']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:07:51.144" endtime="20220120 16:07:56.165"/>
</kw>
<msg timestamp="20220120 16:07:56.166" level="INFO">${got_it_button_present} = False</msg>
<status status="PASS" starttime="20220120 16:07:51.143" endtime="20220120 16:07:56.166"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${got_it_button_present} is ${False}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220120 16:07:56.169" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220120 16:07:56.168" endtime="20220120 16:07:56.170"/>
</kw>
<status status="PASS" starttime="20220120 16:07:51.142" endtime="20220120 16:07:56.170"/>
</kw>
<status status="PASS" starttime="20220120 16:07:08.158" endtime="20220120 16:07:56.171"/>
</kw>
<kw name="device_view.Click On Settings" library="device_main_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${device_view_settings}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:07:56.177" level="INFO">${words} = ['#setting-sprocket']</msg>
<status status="PASS" starttime="20220120 16:07:56.177" endtime="20220120 16:07:56.177"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:07:56.179" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:07:56.180" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:07:56.178" endtime="20220120 16:07:56.180"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:07:56.182" endtime="20220120 16:07:56.779"/>
</kw>
<status status="PASS" starttime="20220120 16:07:56.181" endtime="20220120 16:07:56.780"/>
</kw>
<status status="PASS" starttime="20220120 16:07:56.175" endtime="20220120 16:07:56.780"/>
</kw>
<status status="PASS" starttime="20220120 16:07:56.174" endtime="20220120 16:07:56.781"/>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>device_settings.Verify Correct Device Appears</arg>
<arg>${device['displayName']}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="device_settings.Verify Correct Device Appears" library="device_settings">
<arg>${device['displayName']}</arg>
<doc>Click Device &gt; Settings
Check if the text in the settings page matches the device name</doc>
<kw name="device_settings.Verfiy Device Name" library="device_settings_screen">
<arg>${device_name}</arg>
<kw name="Get Attribute" library="libraries.components.React">
<var>${name}</var>
<arg>selector=${device_settings_device_name}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220120 16:07:56.838" level="INFO">${name} = POWERPLAY</msg>
<status status="PASS" starttime="20220120 16:07:56.814" endtime="20220120 16:07:56.839"/>
</kw>
<kw name="Convert To Upper Case" library="String">
<var>${name}</var>
<arg>${name}</arg>
<doc>Converts string to upper case.</doc>
<msg timestamp="20220120 16:07:56.840" level="INFO">${name} = POWERPLAY</msg>
<status status="PASS" starttime="20220120 16:07:56.839" endtime="20220120 16:07:56.840"/>
</kw>
<kw name="Convert To Upper Case" library="String">
<var>${device_name}</var>
<arg>${device_name}</arg>
<doc>Converts string to upper case.</doc>
<msg timestamp="20220120 16:07:56.840" level="INFO">${device_name} = POWERPLAY</msg>
<status status="PASS" starttime="20220120 16:07:56.840" endtime="20220120 16:07:56.840"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${device_name}</arg>
<arg>${name}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220120 16:07:56.841" endtime="20220120 16:07:56.841"/>
</kw>
<status status="PASS" starttime="20220120 16:07:56.812" endtime="20220120 16:07:56.841"/>
</kw>
<status status="PASS" starttime="20220120 16:07:56.786" endtime="20220120 16:07:56.841"/>
</kw>
<status status="PASS" starttime="20220120 16:07:56.783" endtime="20220120 16:07:56.841"/>
</kw>
<kw name="json.Get Device Settings Feature From Device Specific Features" library="json_data_handler">
<var>@{device_settings}</var>
<arg>${device}</arg>
<kw name="Get Device Settings Feature From Device Specific Features" library="libraries.json_data_handler">
<var>${device_settings}</var>
<arg>${device}</arg>
<msg timestamp="20220120 16:07:56.843" level="INFO">${device_settings} = []</msg>
<status status="PASS" starttime="20220120 16:07:56.842" endtime="20220120 16:07:56.843"/>
</kw>
<msg timestamp="20220120 16:07:56.844" level="INFO">@{device_settings} = [ ]</msg>
<status status="PASS" starttime="20220120 16:07:56.842" endtime="20220120 16:07:56.844"/>
</kw>
<for flavor="IN">
<var>${setting}</var>
<value>@{device_settings}</value>
<status status="PASS" starttime="20220120 16:07:56.844" endtime="20220120 16:07:56.844"/>
</for>
<if>
<branch type="IF" condition="&quot;on board memory mode&quot; in @{device_settings}">
<kw name="device_settings.Disable Onboard Memory Mode" library="device_settings">
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:07:56.845" endtime="20220120 16:07:56.845"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:07:56.844" endtime="20220120 16:07:56.845"/>
</branch>
<status status="PASS" starttime="20220120 16:07:56.844" endtime="20220120 16:07:56.845"/>
</if>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:08:01.902" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:07:56.849" endtime="20220120 16:08:01.903"/>
</kw>
<status status="FAIL" starttime="20220120 16:07:56.848" endtime="20220120 16:08:01.904"/>
</kw>
<msg timestamp="20220120 16:08:01.904" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220120 16:07:56.847" endtime="20220120 16:08:01.904"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:08:01.907" endtime="20220120 16:08:01.907"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:08:01.908" endtime="20220120 16:08:01.909"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:08:01.910" endtime="20220120 16:08:01.910"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:08:01.911" endtime="20220120 16:08:01.911"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:08:01.913" endtime="20220120 16:08:01.913"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220120 16:08:01.914" endtime="20220120 16:08:01.915"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:01.906" endtime="20220120 16:08:01.915"/>
</branch>
<status status="PASS" starttime="20220120 16:08:01.905" endtime="20220120 16:08:01.915"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:08:01.920" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:08:01.919" endtime="20220120 16:08:01.920"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:08:01.921" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:08:01.921" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:08:01.921" endtime="20220120 16:08:01.922"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:08:11.970" level="INFO">Failed to find element with selector: #home-view and attributes:{}</msg>
<msg timestamp="20220120 16:08:11.973" level="INFO" html="true">&lt;a href=screenshot-20220120-160811.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160811.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:08:12.086" level="INFO">Failed to find element with selector: #home-view</msg>
<msg timestamp="20220120 16:08:12.087" level="FAIL">Failure: Selector "#home-view" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:08:01.924" endtime="20220120 16:08:12.087"/>
</kw>
<status status="FAIL" starttime="20220120 16:08:01.923" endtime="20220120 16:08:12.087"/>
</kw>
<status status="FAIL" starttime="20220120 16:08:01.917" endtime="20220120 16:08:12.087"/>
</kw>
<msg timestamp="20220120 16:08:12.088" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220120 16:08:01.916" endtime="20220120 16:08:12.088"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:08:12.088" endtime="20220120 16:08:12.089"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:12.090" endtime="20220120 16:08:12.104"/>
</kw>
<msg timestamp="20220120 16:08:12.105" level="INFO">${back_button_present} = True</msg>
<status status="PASS" starttime="20220120 16:08:12.089" endtime="20220120 16:08:12.105"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:08:12.106" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:08:12.106" endtime="20220120 16:08:12.106"/>
</kw>
<status status="PASS" starttime="20220120 16:07:56.847" endtime="20220120 16:08:12.106"/>
</iter>
<status status="PASS" starttime="20220120 16:07:56.847" endtime="20220120 16:08:12.106"/>
</for>
<status status="PASS" starttime="20220120 16:07:56.847" endtime="20220120 16:08:12.106"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:12.108" endtime="20220120 16:08:12.119"/>
</kw>
<msg timestamp="20220120 16:08:12.119" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:08:12.108" endtime="20220120 16:08:12.119"/>
</kw>
<msg timestamp="20220120 16:08:12.119" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:08:12.107" endtime="20220120 16:08:12.119"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:08:12.120" endtime="20220120 16:08:12.120"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${clicked}</var>
<arg>common.Click On Back</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:08:12.122" endtime="20220120 16:08:12.697"/>
</kw>
<status status="PASS" starttime="20220120 16:08:12.121" endtime="20220120 16:08:12.697"/>
</kw>
<msg timestamp="20220120 16:08:12.699" level="INFO">${clicked} = True</msg>
<status status="PASS" starttime="20220120 16:08:12.121" endtime="20220120 16:08:12.699"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clicked}==False</arg>
<arg>common.alerts</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:08:12.701" endtime="20220120 16:08:12.701"/>
</kw>
<status status="PASS" starttime="20220120 16:08:12.107" endtime="20220120 16:08:12.701"/>
</iter>
<iter>
<var name="${index}">1</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:12.706" endtime="20220120 16:08:12.725"/>
</kw>
<msg timestamp="20220120 16:08:12.726" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:08:12.705" endtime="20220120 16:08:12.726"/>
</kw>
<msg timestamp="20220120 16:08:12.726" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:08:12.704" endtime="20220120 16:08:12.726"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:08:12.727" endtime="20220120 16:08:12.727"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${clicked}</var>
<arg>common.Click On Back</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:08:12.729" endtime="20220120 16:08:13.308"/>
</kw>
<status status="PASS" starttime="20220120 16:08:12.728" endtime="20220120 16:08:13.308"/>
</kw>
<msg timestamp="20220120 16:08:13.309" level="INFO">${clicked} = True</msg>
<status status="PASS" starttime="20220120 16:08:12.728" endtime="20220120 16:08:13.309"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clicked}==False</arg>
<arg>common.alerts</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:08:13.310" endtime="20220120 16:08:13.311"/>
</kw>
<status status="PASS" starttime="20220120 16:08:12.701" endtime="20220120 16:08:13.311"/>
</iter>
<iter>
<var name="${index}">2</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:08:14.322" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220120 16:08:14.324" level="INFO" html="true">&lt;a href=screenshot-20220120-160814.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160814.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:08:14.504" level="INFO">Failed to find element with selector: .back-button</msg>
<msg timestamp="20220120 16:08:14.505" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:08:13.314" endtime="20220120 16:08:14.505"/>
</kw>
<msg timestamp="20220120 16:08:14.505" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220120 16:08:13.313" endtime="20220120 16:08:14.505"/>
</kw>
<msg timestamp="20220120 16:08:14.505" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220120 16:08:13.312" endtime="20220120 16:08:14.505"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:08:14.507" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:08:14.506" endtime="20220120 16:08:14.507"/>
</kw>
<status status="PASS" starttime="20220120 16:08:13.311" endtime="20220120 16:08:14.507"/>
</iter>
<status status="PASS" starttime="20220120 16:08:12.107" endtime="20220120 16:08:14.507"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:08:14.509" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:08:14.509" endtime="20220120 16:08:14.509"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:08:14.510" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:08:14.510" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:08:14.510" endtime="20220120 16:08:14.510"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:14.511" endtime="20220120 16:08:14.525"/>
</kw>
<status status="PASS" starttime="20220120 16:08:14.511" endtime="20220120 16:08:14.525"/>
</kw>
<status status="PASS" starttime="20220120 16:08:14.508" endtime="20220120 16:08:14.525"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:08:16.551" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220120 16:08:16.552" level="INFO" html="true">&lt;a href=screenshot-20220120-160816.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160816.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:08:16.759" level="INFO">Failed to find element with selector: .back-button</msg>
<status status="PASS" starttime="20220120 16:08:14.526" endtime="20220120 16:08:16.761"/>
</kw>
<status status="PASS" starttime="20220120 16:08:14.508" endtime="20220120 16:08:16.761"/>
</kw>
<status status="PASS" starttime="20220120 16:07:56.847" endtime="20220120 16:08:16.761"/>
</kw>
<kw name="End Test" library="logging" type="TEARDOWN">
<arg>${KEYWORD STATUS}</arg>
<doc>Ensure to Call this keyword at Teardown of all High Level Test Keywords
If Test Fails - This will capture logs and screenshots and append links to report</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}Test Status: ${test_status}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:08:16.763" endtime="20220120 16:08:16.763"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${test_status}'=='FAIL'</arg>
<arg>Get Log Files And Upload To FTPDrive</arg>
<arg>end_test</arg>
<arg>ELSE</arg>
<arg>Return From Keyword</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20220120 16:08:16.764" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220120 16:08:16.764" endtime="20220120 16:08:16.764"/>
</kw>
<status status="PASS" starttime="20220120 16:08:16.763" endtime="20220120 16:08:16.765"/>
</kw>
<status status="PASS" starttime="20220120 16:08:16.762" endtime="20220120 16:08:16.765"/>
</kw>
<status status="PASS" starttime="20220120 16:07:08.156" endtime="20220120 16:08:16.765"/>
</kw>
<status status="PASS" starttime="20220120 16:07:08.156" endtime="20220120 16:08:16.765"/>
</kw>
<tag>Device: POWERPLAY (Windows, Wired)</tag>
<tag>Device Type: POWERPLAY</tag>
<tag>Feature: device_settings</tag>
<tag>OS: Windows-10-10.0.19041-SP0</tag>
<status status="PASS" starttime="20220120 16:07:08.150" endtime="20220120 16:08:16.765"/>
</test>
<test id="s1-t6" name="Test: Powerplay Charging Is On By Default, Connected Device Is Charging / Verify That When Powerplay Charging Is Off, Connected Device Is Not Charging: POWERPLAY (Windows, Wired)">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Test: Powerplay Charging Is On By Default, Connected Device Is Charging / Verify That When Powerplay Charging Is Off, Connected Device Is Not Charging</arg>
<arg>{'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '405f', 'firmware': '7.1.11', 'modelId': '4405f', 'type': 'POWERPLAY', 'device_specific_features': {'lightsync': {'effect': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}}, 'connection_interfaces': {'wired': {'pid': '405f', 'productId': '405f'}}}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Test: Powerplay Charging Is On By Default, Connected Device Is Charging / Verify That When Powerplay Charging Is Off, Connected Device Is Not Charging" library="powerplay_regression_ui">
<arg>{'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '405f', 'firmware': '7.1.11', 'modelId': '4405f', 'type': 'POWERPLAY', 'device_specific_features': {'lightsync': {'effect': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}}, 'connection_interfaces': {'wired': {'pid': '405f', 'productId': '405f'}}}</arg>
<tag>device_settings</tag>
<doc>Select the connected G903 LIGHTSPEED
Go to Settings Page
Verify if the connected mouse is charging
Go back to home page and select powerplay
Go to settings adjust
Disable powerplay charging
Go to connected mouse settings page and verify it is not charging
Go back to powerplay settings and enable back powerplay charging</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>"Test if POWERPLAY ON / OFF changes connected device charging status to ON /OFF"</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:08:16.773" endtime="20220120 16:08:16.773"/>
</kw>
<kw name="End Test" library="logging" type="TEARDOWN">
<arg>${KEYWORD STATUS}</arg>
<doc>Ensure to Call this keyword at Teardown of all High Level Test Keywords
If Test Fails - This will capture logs and screenshots and append links to report</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}Test Status: ${test_status}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:08:16.774" endtime="20220120 16:08:16.774"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${test_status}'=='FAIL'</arg>
<arg>Get Log Files And Upload To FTPDrive</arg>
<arg>end_test</arg>
<arg>ELSE</arg>
<arg>Return From Keyword</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20220120 16:08:16.776" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220120 16:08:16.776" endtime="20220120 16:08:16.776"/>
</kw>
<status status="PASS" starttime="20220120 16:08:16.775" endtime="20220120 16:08:16.776"/>
</kw>
<status status="PASS" starttime="20220120 16:08:16.773" endtime="20220120 16:08:16.776"/>
</kw>
<status status="PASS" starttime="20220120 16:08:16.772" endtime="20220120 16:08:16.776"/>
</kw>
<status status="PASS" starttime="20220120 16:08:16.771" endtime="20220120 16:08:16.776"/>
</kw>
<tag>Device: POWERPLAY (Windows, Wired)</tag>
<tag>Device Type: POWERPLAY</tag>
<tag>Feature: device_settings</tag>
<tag>OS: Windows-10-10.0.19041-SP0</tag>
<status status="PASS" starttime="20220120 16:08:16.766" endtime="20220120 16:08:16.776"/>
</test>
<test id="s1-t7" name="Test: Verify available lighting effects for Powerplay in GHub: POWERPLAY (Windows, Wired)">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Test: Verify available lighting effects for Powerplay in GHub</arg>
<arg>{'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '405f', 'firmware': '7.1.11', 'modelId': '4405f', 'type': 'POWERPLAY', 'device_specific_features': {'lightsync': {'effect': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}}, 'connection_interfaces': {'wired': {'pid': '405f', 'productId': '405f'}}}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Test: Verify available lighting effects for Powerplay in GHub" library="powerplay_regression_ui">
<arg>{'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '405f', 'firmware': '7.1.11', 'modelId': '4405f', 'type': 'POWERPLAY', 'device_specific_features': {'lightsync': {'effect': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}}, 'connection_interfaces': {'wired': {'pid': '405f', 'productId': '405f'}}}</arg>
<tag>lightsync</tag>
<doc>Select the Powerplay device in G HUB
Go to the light setting page
Select OFF / FIXED / CYCLE / BREATHING / SCREEN SAMPLER</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>"Test all available lightsync effects for POWERPLAY"</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:08:16.783" endtime="20220120 16:08:16.784"/>
</kw>
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220120 16:08:16.785" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220120 16:08:16.784" endtime="20220120 16:08:16.785"/>
</kw>
<kw name="home.Open Device Configuration" library="home_screen">
<arg>${device['displayName']}</arg>
<doc>Click on the device to open device configuration and if device introduction page opens then skip it.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device Home Screen Loaded</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device Home Screen Loaded" library="home_screen">
<arg>${device_name}</arg>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:08:21.865" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:08:16.813" endtime="20220120 16:08:21.866"/>
</kw>
<status status="FAIL" starttime="20220120 16:08:16.812" endtime="20220120 16:08:21.867"/>
</kw>
<msg timestamp="20220120 16:08:21.867" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220120 16:08:16.811" endtime="20220120 16:08:21.867"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:08:21.870" endtime="20220120 16:08:21.870"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:08:21.871" endtime="20220120 16:08:21.871"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:08:21.873" endtime="20220120 16:08:21.873"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:08:21.874" endtime="20220120 16:08:21.874"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:08:21.875" endtime="20220120 16:08:21.875"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220120 16:08:21.876" endtime="20220120 16:08:21.877"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:21.869" endtime="20220120 16:08:21.877"/>
</branch>
<status status="PASS" starttime="20220120 16:08:21.868" endtime="20220120 16:08:21.877"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:08:21.882" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:08:21.881" endtime="20220120 16:08:21.882"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:08:21.884" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:08:21.884" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:08:21.883" endtime="20220120 16:08:21.885"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:21.887" endtime="20220120 16:08:21.904"/>
</kw>
<status status="PASS" starttime="20220120 16:08:21.886" endtime="20220120 16:08:21.904"/>
</kw>
<status status="PASS" starttime="20220120 16:08:21.879" endtime="20220120 16:08:21.904"/>
</kw>
<msg timestamp="20220120 16:08:21.904" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220120 16:08:21.878" endtime="20220120 16:08:21.904"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:08:21.906" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:08:21.905" endtime="20220120 16:08:21.906"/>
</kw>
<status status="PASS" starttime="20220120 16:08:16.810" endtime="20220120 16:08:21.906"/>
</iter>
<status status="PASS" starttime="20220120 16:08:16.810" endtime="20220120 16:08:21.906"/>
</for>
<status status="PASS" starttime="20220120 16:08:16.810" endtime="20220120 16:08:21.906"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:08:22.923" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220120 16:08:22.925" level="INFO" html="true">&lt;a href=screenshot-20220120-160822.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160822.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:08:23.123" level="INFO">Failed to find element with selector: .back-button</msg>
<msg timestamp="20220120 16:08:23.123" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:08:21.909" endtime="20220120 16:08:23.123"/>
</kw>
<msg timestamp="20220120 16:08:23.124" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220120 16:08:21.908" endtime="20220120 16:08:23.124"/>
</kw>
<msg timestamp="20220120 16:08:23.124" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220120 16:08:21.907" endtime="20220120 16:08:23.124"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:08:23.125" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:08:23.125" endtime="20220120 16:08:23.125"/>
</kw>
<status status="PASS" starttime="20220120 16:08:21.907" endtime="20220120 16:08:23.125"/>
</iter>
<status status="PASS" starttime="20220120 16:08:21.906" endtime="20220120 16:08:23.125"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:08:23.128" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:08:23.127" endtime="20220120 16:08:23.128"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:08:23.128" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:08:23.128" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:08:23.128" endtime="20220120 16:08:23.128"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:23.129" endtime="20220120 16:08:23.141"/>
</kw>
<status status="PASS" starttime="20220120 16:08:23.129" endtime="20220120 16:08:23.142"/>
</kw>
<status status="PASS" starttime="20220120 16:08:23.127" endtime="20220120 16:08:23.142"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:08:25.147" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220120 16:08:25.148" level="INFO" html="true">&lt;a href=screenshot-20220120-160825.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160825.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:08:25.339" level="INFO">Failed to find element with selector: .back-button</msg>
<status status="PASS" starttime="20220120 16:08:23.142" endtime="20220120 16:08:25.340"/>
</kw>
<status status="PASS" starttime="20220120 16:08:23.126" endtime="20220120 16:08:25.340"/>
</kw>
<status status="PASS" starttime="20220120 16:08:16.808" endtime="20220120 16:08:25.340"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:08:25.362" level="FAIL">Failure: Selector ".left-arrow-container.disabled" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220120 16:08:25.344" endtime="20220120 16:08:25.362"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<status status="NOT RUN" starttime="20220120 16:08:25.363" endtime="20220120 16:08:25.363"/>
</kw>
<status status="FAIL" starttime="20220120 16:08:25.343" endtime="20220120 16:08:25.363"/>
</kw>
<msg timestamp="20220120 16:08:25.363" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220120 16:08:25.343" endtime="20220120 16:08:25.363"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:08:25.364" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:08:25.363" endtime="20220120 16:08:25.364"/>
</kw>
<status status="PASS" starttime="20220120 16:08:25.342" endtime="20220120 16:08:25.364"/>
</iter>
<status status="PASS" starttime="20220120 16:08:25.342" endtime="20220120 16:08:25.364"/>
</for>
<status status="PASS" starttime="20220120 16:08:25.342" endtime="20220120 16:08:25.364"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:08:27.381" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<msg timestamp="20220120 16:08:27.382" level="INFO" html="true">&lt;a href=screenshot-20220120-160827.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160827.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:08:27.559" level="INFO">Failed to find element with selector: .right-arrow-container.disabled</msg>
<status status="PASS" starttime="20220120 16:08:25.366" endtime="20220120 16:08:27.560"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:08:29.583" level="INFO">Failed to find element with selector: .right-arrow-container.hidden and attributes:{}</msg>
<msg timestamp="20220120 16:08:29.584" level="INFO" html="true">&lt;a href=screenshot-20220120-160829.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160829.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:08:29.777" level="INFO">Failed to find element with selector: .right-arrow-container.hidden</msg>
<status status="PASS" starttime="20220120 16:08:27.561" endtime="20220120 16:08:29.779"/>
</kw>
<status status="PASS" starttime="20220120 16:08:25.365" endtime="20220120 16:08:29.779"/>
</kw>
<msg timestamp="20220120 16:08:29.780" level="INFO">${right_scroll_present} = True</msg>
<status status="PASS" starttime="20220120 16:08:25.365" endtime="20220120 16:08:29.780"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:29.782" endtime="20220120 16:08:29.856"/>
</kw>
<msg timestamp="20220120 16:08:29.857" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220120 16:08:29.781" endtime="20220120 16:08:29.857"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:08:29.858" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:08:29.858" endtime="20220120 16:08:29.859"/>
</kw>
<status status="PASS" starttime="20220120 16:08:25.364" endtime="20220120 16:08:29.859"/>
</iter>
<status status="PASS" starttime="20220120 16:08:25.364" endtime="20220120 16:08:29.859"/>
</for>
<status status="PASS" starttime="20220120 16:08:25.341" endtime="20220120 16:08:29.859"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220120 16:08:34.862" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220120 16:08:29.860" endtime="20220120 16:08:34.862"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:34.870" endtime="20220120 16:08:34.925"/>
</kw>
<status status="PASS" starttime="20220120 16:08:34.867" endtime="20220120 16:08:34.926"/>
</kw>
<msg timestamp="20220120 16:08:34.926" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:08:34.865" endtime="20220120 16:08:34.926"/>
</kw>
<if>
<branch type="IF" condition="${status} is ${False}">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>GHUB is unable to load the device: ${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:08:34.927" endtime="20220120 16:08:34.927"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:34.926" endtime="20220120 16:08:34.927"/>
</branch>
<status status="PASS" starttime="20220120 16:08:34.926" endtime="20220120 16:08:34.927"/>
</if>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${status} is ${False}</arg>
<arg>Trigger Wake Bots</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:08:34.928" endtime="20220120 16:08:34.929"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${inactive_status}</var>
<arg>home.Is Specific Device Inactive</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Specific Device Inactive" library="home_screen">
<arg>${device_name}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>${home_device_inactive_device_name}${device_name}${home_device_inactive_device_icon}</arg>
<arg>3</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:08:37.946" level="FAIL">Failure: Selector "//h2[contains(text(),"POWERPLAY")]//following-sibling::div[contains(text(), "INACTIVE")]" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:08:34.932" endtime="20220120 16:08:37.946"/>
</kw>
<status status="FAIL" starttime="20220120 16:08:34.931" endtime="20220120 16:08:37.946"/>
</kw>
<msg timestamp="20220120 16:08:37.947" level="INFO">${inactive_status} = False</msg>
<status status="PASS" starttime="20220120 16:08:34.929" endtime="20220120 16:08:37.947"/>
</kw>
<if>
<branch type="IF" condition="${inactive_status}">
<kw name="Trigger Wake Bots" library="home_screen">
<status status="NOT RUN" starttime="20220120 16:08:37.948" endtime="20220120 16:08:37.948"/>
</kw>
<kw name="home.Restart GHUB Till Device Get Load" library="home_screen">
<arg>${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:08:37.949" endtime="20220120 16:08:37.949"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:08:37.951" endtime="20220120 16:08:37.952"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_loaded}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220120 16:08:37.953" endtime="20220120 16:08:37.953"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${device_loaded} is ${True}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20220120 16:08:37.954" endtime="20220120 16:08:37.954"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${inactive_status}</var>
<arg>home.Is Specific Device Inactive</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220120 16:08:37.955" endtime="20220120 16:08:37.955"/>
</kw>
<if>
<branch type="IF" condition="${inactive_status}">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>GHUB is unable to load the device: ${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:08:37.956" endtime="20220120 16:08:37.956"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:37.955" endtime="20220120 16:08:37.956"/>
</branch>
<status status="NOT RUN" starttime="20220120 16:08:37.955" endtime="20220120 16:08:37.956"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220120 16:08:37.957" endtime="20220120 16:08:37.957"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${device_loaded} is ${False} or ${inactive_status} is ${True} or ${device_reflected_on_ui} is ${False}</arg>
<arg>home.Reconnect Device Till Device Get Load</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20220120 16:08:37.958" endtime="20220120 16:08:37.958"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:37.947" endtime="20220120 16:08:37.958"/>
</branch>
<status status="PASS" starttime="20220120 16:08:37.947" endtime="20220120 16:08:37.959"/>
</if>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:08:37.979" level="FAIL">Failure: Selector ".left-arrow-container.disabled" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220120 16:08:37.964" endtime="20220120 16:08:37.979"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<status status="NOT RUN" starttime="20220120 16:08:37.979" endtime="20220120 16:08:37.980"/>
</kw>
<status status="FAIL" starttime="20220120 16:08:37.963" endtime="20220120 16:08:37.980"/>
</kw>
<msg timestamp="20220120 16:08:37.980" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220120 16:08:37.963" endtime="20220120 16:08:37.980"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:08:37.981" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:08:37.981" endtime="20220120 16:08:37.981"/>
</kw>
<status status="PASS" starttime="20220120 16:08:37.962" endtime="20220120 16:08:37.981"/>
</iter>
<status status="PASS" starttime="20220120 16:08:37.961" endtime="20220120 16:08:37.981"/>
</for>
<status status="PASS" starttime="20220120 16:08:37.961" endtime="20220120 16:08:37.982"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:08:40.006" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<msg timestamp="20220120 16:08:40.008" level="INFO" html="true">&lt;a href=screenshot-20220120-160840.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160840.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:08:40.206" level="INFO">Failed to find element with selector: .right-arrow-container.disabled</msg>
<status status="PASS" starttime="20220120 16:08:37.984" endtime="20220120 16:08:40.207"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:08:42.262" level="INFO">Failed to find element with selector: .right-arrow-container.hidden and attributes:{}</msg>
<msg timestamp="20220120 16:08:42.264" level="INFO" html="true">&lt;a href=screenshot-20220120-160842.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160842.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:08:42.454" level="INFO">Failed to find element with selector: .right-arrow-container.hidden</msg>
<status status="PASS" starttime="20220120 16:08:40.208" endtime="20220120 16:08:42.455"/>
</kw>
<status status="PASS" starttime="20220120 16:08:37.983" endtime="20220120 16:08:42.455"/>
</kw>
<msg timestamp="20220120 16:08:42.455" level="INFO">${right_scroll_present} = True</msg>
<status status="PASS" starttime="20220120 16:08:37.983" endtime="20220120 16:08:42.455"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:42.457" endtime="20220120 16:08:42.496"/>
</kw>
<msg timestamp="20220120 16:08:42.496" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220120 16:08:42.456" endtime="20220120 16:08:42.496"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:08:42.497" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:08:42.497" endtime="20220120 16:08:42.497"/>
</kw>
<status status="PASS" starttime="20220120 16:08:37.982" endtime="20220120 16:08:42.497"/>
</iter>
<status status="PASS" starttime="20220120 16:08:37.982" endtime="20220120 16:08:42.497"/>
</for>
<status status="PASS" starttime="20220120 16:08:37.960" endtime="20220120 16:08:42.498"/>
</kw>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:42.498" endtime="20220120 16:08:42.519"/>
</kw>
<status status="PASS" starttime="20220120 16:08:42.498" endtime="20220120 16:08:42.519"/>
</kw>
<status status="PASS" starttime="20220120 16:08:16.806" endtime="20220120 16:08:42.520"/>
</kw>
<msg timestamp="20220120 16:08:42.520" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:08:16.805" endtime="20220120 16:08:42.520"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'False'">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>${device_name} not loaded in GHub.</arg>
<status status="NOT RUN" starttime="20220120 16:08:42.521" endtime="20220120 16:08:42.521"/>
</kw>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220120 16:08:42.521" endtime="20220120 16:08:42.522"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:42.520" endtime="20220120 16:08:42.522"/>
</branch>
<status status="PASS" starttime="20220120 16:08:42.520" endtime="20220120 16:08:42.522"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${inactive}</var>
<arg>home.Is Specific Device Inactive</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Specific Device Inactive" library="home_screen">
<arg>${device_name}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>${home_device_inactive_device_name}${device_name}${home_device_inactive_device_icon}</arg>
<arg>3</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:08:45.556" level="FAIL">Failure: Selector "//h2[contains(text(),"POWERPLAY")]//following-sibling::div[contains(text(), "INACTIVE")]" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:08:42.523" endtime="20220120 16:08:45.557"/>
</kw>
<status status="FAIL" starttime="20220120 16:08:42.523" endtime="20220120 16:08:45.557"/>
</kw>
<msg timestamp="20220120 16:08:45.558" level="INFO">${inactive} = False</msg>
<status status="PASS" starttime="20220120 16:08:42.522" endtime="20220120 16:08:45.558"/>
</kw>
<if>
<branch type="IF" condition="${inactive}">
<kw name="Sleep" library="BuiltIn">
<arg>20</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:08:45.560" endtime="20220120 16:08:45.560"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:45.560" endtime="20220120 16:08:45.561"/>
</branch>
<status status="PASS" starttime="20220120 16:08:45.558" endtime="20220120 16:08:45.561"/>
</if>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:08:45.562" endtime="20220120 16:08:46.188"/>
</kw>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220120 16:08:48.226" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220120 16:08:48.227" level="INFO" html="true">&lt;a href=screenshot-20220120-160848.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160848.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:08:48.371" level="INFO">Failed to find element with selector: .splash-screen-skip-button</msg>
<msg timestamp="20220120 16:08:48.372" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:08:46.194" endtime="20220120 16:08:48.372"/>
</kw>
<status status="PASS" starttime="20220120 16:08:46.192" endtime="20220120 16:08:48.373"/>
</kw>
<status status="PASS" starttime="20220120 16:08:46.190" endtime="20220120 16:08:48.373"/>
</kw>
<kw name="device_view.Handle Got It Popup" library="device_main_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${got_it_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_got_it_button}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_got_it_button}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:08:53.394" level="FAIL">Failure: Selector "//div[@class='coach-mark']/button[text()='GOT IT']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:08:48.374" endtime="20220120 16:08:53.394"/>
</kw>
<msg timestamp="20220120 16:08:53.395" level="INFO">${got_it_button_present} = False</msg>
<status status="PASS" starttime="20220120 16:08:48.374" endtime="20220120 16:08:53.395"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${got_it_button_present} is ${False}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220120 16:08:53.396" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220120 16:08:53.395" endtime="20220120 16:08:53.396"/>
</kw>
<status status="PASS" starttime="20220120 16:08:48.373" endtime="20220120 16:08:53.396"/>
</kw>
<status status="PASS" starttime="20220120 16:08:16.786" endtime="20220120 16:08:53.396"/>
</kw>
<kw name="device_view.Click On LightSync Tab" library="device_main_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${device_view_lightsync_tab}</arg>
<arg>10</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:08:53.399" level="INFO">${words} = ['.icon-wrapper.lighting']</msg>
<status status="PASS" starttime="20220120 16:08:53.398" endtime="20220120 16:08:53.399"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:08:53.399" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:08:53.399" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:08:53.399" endtime="20220120 16:08:53.399"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:08:53.401" endtime="20220120 16:08:53.990"/>
</kw>
<status status="PASS" starttime="20220120 16:08:53.400" endtime="20220120 16:08:53.991"/>
</kw>
<status status="PASS" starttime="20220120 16:08:53.397" endtime="20220120 16:08:53.992"/>
</kw>
<status status="PASS" starttime="20220120 16:08:53.397" endtime="20220120 16:08:53.992"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>@{effect_list}</var>
<arg>${device['device_specific_features']['lightsync']['effect']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:08:54.021" level="INFO">@{effect_list} = [ fixed | cycle | breathing | screen sampler | audio visualizer ]</msg>
<status status="PASS" starttime="20220120 16:08:53.995" endtime="20220120 16:08:54.021"/>
</kw>
<for flavor="IN">
<var>${effect}</var>
<value>@{effect_list}</value>
<iter>
<var name="${effect}">fixed</var>
<kw name="Convert To Upper Case" library="String">
<var>${effect}</var>
<arg>${effect}</arg>
<doc>Converts string to upper case.</doc>
<msg timestamp="20220120 16:08:54.022" level="INFO">${effect} = FIXED</msg>
<status status="PASS" starttime="20220120 16:08:54.022" endtime="20220120 16:08:54.023"/>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<arg>${is_mac} is ${True} and '${effect}'=='AUDIO VISUALIZER'</arg>
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:08:54.023" endtime="20220120 16:08:54.024"/>
</kw>
<kw name="lightsync.Change lightsync effect to" library="lightsync">
<arg>${effect}</arg>
<doc>Selects an effect from the dropdown and verifies its config options</doc>
<kw name="light_sync.Click On Effect Dropdown" library="light_sync_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:08:54.027" endtime="20220120 16:08:54.576"/>
</kw>
<status status="PASS" starttime="20220120 16:08:54.026" endtime="20220120 16:08:54.578"/>
</kw>
<kw name="light_sync.Select Effect From Dropdown" library="light_sync_screen">
<arg>${effect}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown_item}</arg>
<arg>innerText=${effect}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:08:54.584" endtime="20220120 16:08:55.193"/>
</kw>
<status status="PASS" starttime="20220120 16:08:54.581" endtime="20220120 16:08:55.194"/>
</kw>
<status status="PASS" starttime="20220120 16:08:54.025" endtime="20220120 16:08:55.194"/>
</kw>
<kw name="lightsync.Verify lightsync effect set to" library="lightsync">
<arg>${effect}</arg>
<doc>Verifies that the lightsync effect is set to the given parameter</doc>
<kw name="light_sync.Verify Effect From GUI" library="light_sync_screen">
<arg>${effect}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${light_sync_effects_dropdown_current}</arg>
<arg>innerText=${effect}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:55.201" endtime="20220120 16:08:55.253"/>
</kw>
<status status="PASS" starttime="20220120 16:08:55.199" endtime="20220120 16:08:55.254"/>
</kw>
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220120 16:08:55.255" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220120 16:08:55.254" endtime="20220120 16:08:55.255"/>
</kw>
<if>
<branch type="IF" condition="'${effect}' == 'OFF'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:08:55.256" endtime="20220120 16:08:55.256"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==1</arg>
<arg>msg=OFF should not have any customizations</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:08:55.257" endtime="20220120 16:08:55.257"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:55.255" endtime="20220120 16:08:55.257"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'FIXED'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<kw name="Get Attribute" library="libraries.components.React">
<var>${count}</var>
<arg>selector=${light_sync_panel_sections}</arg>
<arg>attribute=number</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220120 16:08:55.283" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20220120 16:08:55.259" endtime="20220120 16:08:55.283"/>
</kw>
<msg timestamp="20220120 16:08:55.283" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20220120 16:08:55.258" endtime="20220120 16:08:55.283"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==2</arg>
<arg>msg=FIXED should have only 1 customization to choose color</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20220120 16:08:55.284" endtime="20220120 16:08:55.285"/>
</kw>
<kw name="lightsync.Verify Fixed effect settings are displayed" library="lightsync">
<kw name="light_sync.Verify Color Picker is displayed" library="light_sync_screen">
<doc>Verifies the color picker is displayed
By default expects only 1 color picker
'foreground' and 'background' option needs to be provided in case of more than 1 color pickers</doc>
<if>
<branch type="IF" condition="'${type}' == 'default'">
<kw name="Expect Element" library="libraries.components.React">
<arg>${light_sync_color_picker}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:55.287" endtime="20220120 16:08:55.305"/>
</kw>
<status status="PASS" starttime="20220120 16:08:55.287" endtime="20220120 16:08:55.305"/>
</branch>
<branch type="ELSE IF" condition="'${type}' == 'foreground'">
<kw name="Expect Element" library="libraries.components.React">
<arg>${light_sync_foreground_color_picker}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="NOT RUN" starttime="20220120 16:08:55.306" endtime="20220120 16:08:55.306"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:55.305" endtime="20220120 16:08:55.306"/>
</branch>
<branch type="ELSE IF" condition="'${type}' == 'background'">
<kw name="Expect Element" library="libraries.components.React">
<arg>${light_sync_background_color_picker}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="NOT RUN" starttime="20220120 16:08:55.306" endtime="20220120 16:08:55.306"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:55.306" endtime="20220120 16:08:55.306"/>
</branch>
<status status="PASS" starttime="20220120 16:08:55.287" endtime="20220120 16:08:55.307"/>
</if>
<status status="PASS" starttime="20220120 16:08:55.286" endtime="20220120 16:08:55.307"/>
</kw>
<status status="PASS" starttime="20220120 16:08:55.286" endtime="20220120 16:08:55.307"/>
</kw>
<status status="PASS" starttime="20220120 16:08:55.257" endtime="20220120 16:08:55.307"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'CYCLE'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:08:55.308" endtime="20220120 16:08:55.308"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==3</arg>
<arg>msg=CYCLE should have only 2 customization to choose rate &amp; brightness</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:08:55.308" endtime="20220120 16:08:55.308"/>
</kw>
<kw name="lightsync.Verify Cycle effect settings are displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:08:55.309" endtime="20220120 16:08:55.309"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:55.307" endtime="20220120 16:08:55.309"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'BREATHING'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:08:55.309" endtime="20220120 16:08:55.309"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==4</arg>
<arg>msg=BREATHING should have only 3 customization to choose color, rate &amp; brightness</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:08:55.310" endtime="20220120 16:08:55.310"/>
</kw>
<kw name="lightsync.Verify Breathing effect settings are displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:08:55.310" endtime="20220120 16:08:55.310"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:55.309" endtime="20220120 16:08:55.311"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'SCREEN SAMPLER'">
<kw name="lightsync.Verify Screen Sampler section is displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:08:55.311" endtime="20220120 16:08:55.311"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:55.311" endtime="20220120 16:08:55.311"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'AUDIO VISUALIZER' and ${is_mac} is ${False}">
<kw name="lightsync.Verify Audio Visualizer section is displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:08:55.312" endtime="20220120 16:08:55.312"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:55.311" endtime="20220120 16:08:55.312"/>
</branch>
<branch type="ELSE">
<kw name="LOG WARNING" library="logging">
<arg>${effect} verification not handled</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:08:55.312" endtime="20220120 16:08:55.312"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:55.312" endtime="20220120 16:08:55.312"/>
</branch>
<status status="PASS" starttime="20220120 16:08:55.255" endtime="20220120 16:08:55.312"/>
</if>
<status status="PASS" starttime="20220120 16:08:55.196" endtime="20220120 16:08:55.312"/>
</kw>
<status status="PASS" starttime="20220120 16:08:54.022" endtime="20220120 16:08:55.312"/>
</iter>
<iter>
<var name="${effect}">cycle</var>
<kw name="Convert To Upper Case" library="String">
<var>${effect}</var>
<arg>${effect}</arg>
<doc>Converts string to upper case.</doc>
<msg timestamp="20220120 16:08:55.313" level="INFO">${effect} = CYCLE</msg>
<status status="PASS" starttime="20220120 16:08:55.312" endtime="20220120 16:08:55.313"/>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<arg>${is_mac} is ${True} and '${effect}'=='AUDIO VISUALIZER'</arg>
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:08:55.313" endtime="20220120 16:08:55.315"/>
</kw>
<kw name="lightsync.Change lightsync effect to" library="lightsync">
<arg>${effect}</arg>
<doc>Selects an effect from the dropdown and verifies its config options</doc>
<kw name="light_sync.Click On Effect Dropdown" library="light_sync_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:08:55.316" endtime="20220120 16:08:55.850"/>
</kw>
<status status="PASS" starttime="20220120 16:08:55.316" endtime="20220120 16:08:55.851"/>
</kw>
<kw name="light_sync.Select Effect From Dropdown" library="light_sync_screen">
<arg>${effect}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown_item}</arg>
<arg>innerText=${effect}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:08:55.857" endtime="20220120 16:08:56.485"/>
</kw>
<status status="PASS" starttime="20220120 16:08:55.853" endtime="20220120 16:08:56.486"/>
</kw>
<status status="PASS" starttime="20220120 16:08:55.315" endtime="20220120 16:08:56.487"/>
</kw>
<kw name="lightsync.Verify lightsync effect set to" library="lightsync">
<arg>${effect}</arg>
<doc>Verifies that the lightsync effect is set to the given parameter</doc>
<kw name="light_sync.Verify Effect From GUI" library="light_sync_screen">
<arg>${effect}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${light_sync_effects_dropdown_current}</arg>
<arg>innerText=${effect}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:56.494" endtime="20220120 16:08:56.519"/>
</kw>
<status status="PASS" starttime="20220120 16:08:56.493" endtime="20220120 16:08:56.519"/>
</kw>
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220120 16:08:56.520" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220120 16:08:56.520" endtime="20220120 16:08:56.520"/>
</kw>
<if>
<branch type="IF" condition="'${effect}' == 'OFF'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:08:56.521" endtime="20220120 16:08:56.521"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==1</arg>
<arg>msg=OFF should not have any customizations</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:08:56.522" endtime="20220120 16:08:56.522"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:56.520" endtime="20220120 16:08:56.522"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'FIXED'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:08:56.523" endtime="20220120 16:08:56.523"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==2</arg>
<arg>msg=FIXED should have only 1 customization to choose color</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:08:56.523" endtime="20220120 16:08:56.523"/>
</kw>
<kw name="lightsync.Verify Fixed effect settings are displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:08:56.524" endtime="20220120 16:08:56.524"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:56.522" endtime="20220120 16:08:56.524"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'CYCLE'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<kw name="Get Attribute" library="libraries.components.React">
<var>${count}</var>
<arg>selector=${light_sync_panel_sections}</arg>
<arg>attribute=number</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220120 16:08:56.540" level="INFO">${count} = 3</msg>
<status status="PASS" starttime="20220120 16:08:56.526" endtime="20220120 16:08:56.540"/>
</kw>
<msg timestamp="20220120 16:08:56.540" level="INFO">${count} = 3</msg>
<status status="PASS" starttime="20220120 16:08:56.525" endtime="20220120 16:08:56.540"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==3</arg>
<arg>msg=CYCLE should have only 2 customization to choose rate &amp; brightness</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20220120 16:08:56.541" endtime="20220120 16:08:56.541"/>
</kw>
<kw name="lightsync.Verify Cycle effect settings are displayed" library="lightsync">
<kw name="light_sync.Verify Rate slider is displayed" library="light_sync_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${light_sync_rate_slider}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:56.543" endtime="20220120 16:08:56.553"/>
</kw>
<status status="PASS" starttime="20220120 16:08:56.543" endtime="20220120 16:08:56.553"/>
</kw>
<kw name="light_sync.Verify Brightness slider is displayed" library="light_sync_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${light_sync_brightness_slider2}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:56.554" endtime="20220120 16:08:56.564"/>
</kw>
<status status="PASS" starttime="20220120 16:08:56.554" endtime="20220120 16:08:56.564"/>
</kw>
<status status="PASS" starttime="20220120 16:08:56.542" endtime="20220120 16:08:56.564"/>
</kw>
<status status="PASS" starttime="20220120 16:08:56.524" endtime="20220120 16:08:56.564"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'BREATHING'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:08:56.565" endtime="20220120 16:08:56.565"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==4</arg>
<arg>msg=BREATHING should have only 3 customization to choose color, rate &amp; brightness</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:08:56.566" endtime="20220120 16:08:56.566"/>
</kw>
<kw name="lightsync.Verify Breathing effect settings are displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:08:56.566" endtime="20220120 16:08:56.566"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:56.564" endtime="20220120 16:08:56.566"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'SCREEN SAMPLER'">
<kw name="lightsync.Verify Screen Sampler section is displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:08:56.567" endtime="20220120 16:08:56.567"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:56.567" endtime="20220120 16:08:56.567"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'AUDIO VISUALIZER' and ${is_mac} is ${False}">
<kw name="lightsync.Verify Audio Visualizer section is displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:08:56.568" endtime="20220120 16:08:56.568"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:56.567" endtime="20220120 16:08:56.568"/>
</branch>
<branch type="ELSE">
<kw name="LOG WARNING" library="logging">
<arg>${effect} verification not handled</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:08:56.568" endtime="20220120 16:08:56.569"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:56.568" endtime="20220120 16:08:56.569"/>
</branch>
<status status="PASS" starttime="20220120 16:08:56.520" endtime="20220120 16:08:56.569"/>
</if>
<status status="PASS" starttime="20220120 16:08:56.490" endtime="20220120 16:08:56.569"/>
</kw>
<status status="PASS" starttime="20220120 16:08:55.312" endtime="20220120 16:08:56.569"/>
</iter>
<iter>
<var name="${effect}">breathing</var>
<kw name="Convert To Upper Case" library="String">
<var>${effect}</var>
<arg>${effect}</arg>
<doc>Converts string to upper case.</doc>
<msg timestamp="20220120 16:08:56.570" level="INFO">${effect} = BREATHING</msg>
<status status="PASS" starttime="20220120 16:08:56.570" endtime="20220120 16:08:56.570"/>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<arg>${is_mac} is ${True} and '${effect}'=='AUDIO VISUALIZER'</arg>
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:08:56.570" endtime="20220120 16:08:56.571"/>
</kw>
<kw name="lightsync.Change lightsync effect to" library="lightsync">
<arg>${effect}</arg>
<doc>Selects an effect from the dropdown and verifies its config options</doc>
<kw name="light_sync.Click On Effect Dropdown" library="light_sync_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:08:56.573" endtime="20220120 16:08:57.124"/>
</kw>
<status status="PASS" starttime="20220120 16:08:56.572" endtime="20220120 16:08:57.124"/>
</kw>
<kw name="light_sync.Select Effect From Dropdown" library="light_sync_screen">
<arg>${effect}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown_item}</arg>
<arg>innerText=${effect}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:08:57.128" endtime="20220120 16:08:57.729"/>
</kw>
<status status="PASS" starttime="20220120 16:08:57.126" endtime="20220120 16:08:57.730"/>
</kw>
<status status="PASS" starttime="20220120 16:08:56.571" endtime="20220120 16:08:57.731"/>
</kw>
<kw name="lightsync.Verify lightsync effect set to" library="lightsync">
<arg>${effect}</arg>
<doc>Verifies that the lightsync effect is set to the given parameter</doc>
<kw name="light_sync.Verify Effect From GUI" library="light_sync_screen">
<arg>${effect}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${light_sync_effects_dropdown_current}</arg>
<arg>innerText=${effect}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:57.741" endtime="20220120 16:08:57.769"/>
</kw>
<status status="PASS" starttime="20220120 16:08:57.739" endtime="20220120 16:08:57.770"/>
</kw>
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220120 16:08:57.771" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220120 16:08:57.770" endtime="20220120 16:08:57.771"/>
</kw>
<if>
<branch type="IF" condition="'${effect}' == 'OFF'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:08:57.773" endtime="20220120 16:08:57.773"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==1</arg>
<arg>msg=OFF should not have any customizations</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:08:57.773" endtime="20220120 16:08:57.773"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:57.771" endtime="20220120 16:08:57.773"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'FIXED'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:08:57.774" endtime="20220120 16:08:57.774"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==2</arg>
<arg>msg=FIXED should have only 1 customization to choose color</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:08:57.774" endtime="20220120 16:08:57.774"/>
</kw>
<kw name="lightsync.Verify Fixed effect settings are displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:08:57.775" endtime="20220120 16:08:57.775"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:57.773" endtime="20220120 16:08:57.775"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'CYCLE'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:08:57.776" endtime="20220120 16:08:57.776"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==3</arg>
<arg>msg=CYCLE should have only 2 customization to choose rate &amp; brightness</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:08:57.777" endtime="20220120 16:08:57.777"/>
</kw>
<kw name="lightsync.Verify Cycle effect settings are displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:08:57.777" endtime="20220120 16:08:57.777"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:57.775" endtime="20220120 16:08:57.777"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'BREATHING'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<kw name="Get Attribute" library="libraries.components.React">
<var>${count}</var>
<arg>selector=${light_sync_panel_sections}</arg>
<arg>attribute=number</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220120 16:08:57.793" level="INFO">${count} = 4</msg>
<status status="PASS" starttime="20220120 16:08:57.779" endtime="20220120 16:08:57.794"/>
</kw>
<msg timestamp="20220120 16:08:57.794" level="INFO">${count} = 4</msg>
<status status="PASS" starttime="20220120 16:08:57.778" endtime="20220120 16:08:57.794"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==4</arg>
<arg>msg=BREATHING should have only 3 customization to choose color, rate &amp; brightness</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="PASS" starttime="20220120 16:08:57.794" endtime="20220120 16:08:57.795"/>
</kw>
<kw name="lightsync.Verify Breathing effect settings are displayed" library="lightsync">
<kw name="light_sync.Verify Color Picker is displayed" library="light_sync_screen">
<doc>Verifies the color picker is displayed
By default expects only 1 color picker
'foreground' and 'background' option needs to be provided in case of more than 1 color pickers</doc>
<if>
<branch type="IF" condition="'${type}' == 'default'">
<kw name="Expect Element" library="libraries.components.React">
<arg>${light_sync_color_picker}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:57.797" endtime="20220120 16:08:57.812"/>
</kw>
<status status="PASS" starttime="20220120 16:08:57.797" endtime="20220120 16:08:57.812"/>
</branch>
<branch type="ELSE IF" condition="'${type}' == 'foreground'">
<kw name="Expect Element" library="libraries.components.React">
<arg>${light_sync_foreground_color_picker}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="NOT RUN" starttime="20220120 16:08:57.812" endtime="20220120 16:08:57.812"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:57.812" endtime="20220120 16:08:57.812"/>
</branch>
<branch type="ELSE IF" condition="'${type}' == 'background'">
<kw name="Expect Element" library="libraries.components.React">
<arg>${light_sync_background_color_picker}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="NOT RUN" starttime="20220120 16:08:57.813" endtime="20220120 16:08:57.813"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:57.812" endtime="20220120 16:08:57.813"/>
</branch>
<status status="PASS" starttime="20220120 16:08:57.797" endtime="20220120 16:08:57.813"/>
</if>
<status status="PASS" starttime="20220120 16:08:57.796" endtime="20220120 16:08:57.813"/>
</kw>
<kw name="light_sync.Verify Rate slider is displayed" library="light_sync_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${light_sync_rate_slider}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:57.815" endtime="20220120 16:08:57.822"/>
</kw>
<status status="PASS" starttime="20220120 16:08:57.814" endtime="20220120 16:08:57.822"/>
</kw>
<kw name="light_sync.Verify Brightness slider is displayed" library="light_sync_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${light_sync_brightness_slider2}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:57.824" endtime="20220120 16:08:57.830"/>
</kw>
<status status="PASS" starttime="20220120 16:08:57.823" endtime="20220120 16:08:57.830"/>
</kw>
<status status="PASS" starttime="20220120 16:08:57.795" endtime="20220120 16:08:57.830"/>
</kw>
<status status="PASS" starttime="20220120 16:08:57.778" endtime="20220120 16:08:57.830"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'SCREEN SAMPLER'">
<kw name="lightsync.Verify Screen Sampler section is displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:08:57.832" endtime="20220120 16:08:57.832"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:57.831" endtime="20220120 16:08:57.832"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'AUDIO VISUALIZER' and ${is_mac} is ${False}">
<kw name="lightsync.Verify Audio Visualizer section is displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:08:57.832" endtime="20220120 16:08:57.832"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:57.832" endtime="20220120 16:08:57.832"/>
</branch>
<branch type="ELSE">
<kw name="LOG WARNING" library="logging">
<arg>${effect} verification not handled</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:08:57.832" endtime="20220120 16:08:57.833"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:57.832" endtime="20220120 16:08:57.833"/>
</branch>
<status status="PASS" starttime="20220120 16:08:57.771" endtime="20220120 16:08:57.833"/>
</if>
<status status="PASS" starttime="20220120 16:08:57.734" endtime="20220120 16:08:57.833"/>
</kw>
<status status="PASS" starttime="20220120 16:08:56.569" endtime="20220120 16:08:57.833"/>
</iter>
<iter>
<var name="${effect}">screen sampler</var>
<kw name="Convert To Upper Case" library="String">
<var>${effect}</var>
<arg>${effect}</arg>
<doc>Converts string to upper case.</doc>
<msg timestamp="20220120 16:08:57.835" level="INFO">${effect} = SCREEN SAMPLER</msg>
<status status="PASS" starttime="20220120 16:08:57.834" endtime="20220120 16:08:57.835"/>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<arg>${is_mac} is ${True} and '${effect}'=='AUDIO VISUALIZER'</arg>
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:08:57.835" endtime="20220120 16:08:57.835"/>
</kw>
<kw name="lightsync.Change lightsync effect to" library="lightsync">
<arg>${effect}</arg>
<doc>Selects an effect from the dropdown and verifies its config options</doc>
<kw name="light_sync.Click On Effect Dropdown" library="light_sync_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:08:57.837" endtime="20220120 16:08:58.389"/>
</kw>
<status status="PASS" starttime="20220120 16:08:57.836" endtime="20220120 16:08:58.389"/>
</kw>
<kw name="light_sync.Select Effect From Dropdown" library="light_sync_screen">
<arg>${effect}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown_item}</arg>
<arg>innerText=${effect}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:08:58.391" endtime="20220120 16:08:58.984"/>
</kw>
<status status="PASS" starttime="20220120 16:08:58.390" endtime="20220120 16:08:58.984"/>
</kw>
<status status="PASS" starttime="20220120 16:08:57.835" endtime="20220120 16:08:58.984"/>
</kw>
<kw name="lightsync.Verify lightsync effect set to" library="lightsync">
<arg>${effect}</arg>
<doc>Verifies that the lightsync effect is set to the given parameter</doc>
<kw name="light_sync.Verify Effect From GUI" library="light_sync_screen">
<arg>${effect}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${light_sync_effects_dropdown_current}</arg>
<arg>innerText=${effect}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:08:58.989" endtime="20220120 16:08:59.019"/>
</kw>
<status status="PASS" starttime="20220120 16:08:58.988" endtime="20220120 16:08:59.020"/>
</kw>
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220120 16:08:59.021" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220120 16:08:59.021" endtime="20220120 16:08:59.021"/>
</kw>
<if>
<branch type="IF" condition="'${effect}' == 'OFF'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:08:59.023" endtime="20220120 16:08:59.023"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==1</arg>
<arg>msg=OFF should not have any customizations</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:08:59.024" endtime="20220120 16:08:59.024"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:59.022" endtime="20220120 16:08:59.024"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'FIXED'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:08:59.025" endtime="20220120 16:08:59.025"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==2</arg>
<arg>msg=FIXED should have only 1 customization to choose color</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:08:59.026" endtime="20220120 16:08:59.027"/>
</kw>
<kw name="lightsync.Verify Fixed effect settings are displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:08:59.028" endtime="20220120 16:08:59.028"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:59.024" endtime="20220120 16:08:59.028"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'CYCLE'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:08:59.030" endtime="20220120 16:08:59.030"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==3</arg>
<arg>msg=CYCLE should have only 2 customization to choose rate &amp; brightness</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:08:59.030" endtime="20220120 16:08:59.031"/>
</kw>
<kw name="lightsync.Verify Cycle effect settings are displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:08:59.031" endtime="20220120 16:08:59.032"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:59.029" endtime="20220120 16:08:59.032"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'BREATHING'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:08:59.033" endtime="20220120 16:08:59.034"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==4</arg>
<arg>msg=BREATHING should have only 3 customization to choose color, rate &amp; brightness</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:08:59.034" endtime="20220120 16:08:59.034"/>
</kw>
<kw name="lightsync.Verify Breathing effect settings are displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:08:59.035" endtime="20220120 16:08:59.035"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:59.032" endtime="20220120 16:08:59.035"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'SCREEN SAMPLER'">
<kw name="lightsync.Verify Screen Sampler section is displayed" library="lightsync">
<kw name="Log To Console" library="BuiltIn">
<arg>To be implemented.</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:08:59.037" endtime="20220120 16:08:59.037"/>
</kw>
<status status="PASS" starttime="20220120 16:08:59.036" endtime="20220120 16:08:59.038"/>
</kw>
<status status="PASS" starttime="20220120 16:08:59.035" endtime="20220120 16:08:59.038"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'AUDIO VISUALIZER' and ${is_mac} is ${False}">
<kw name="lightsync.Verify Audio Visualizer section is displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:08:59.039" endtime="20220120 16:08:59.039"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:59.038" endtime="20220120 16:08:59.039"/>
</branch>
<branch type="ELSE">
<kw name="LOG WARNING" library="logging">
<arg>${effect} verification not handled</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:08:59.039" endtime="20220120 16:08:59.040"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:08:59.039" endtime="20220120 16:08:59.040"/>
</branch>
<status status="PASS" starttime="20220120 16:08:59.022" endtime="20220120 16:08:59.040"/>
</if>
<status status="PASS" starttime="20220120 16:08:58.986" endtime="20220120 16:08:59.041"/>
</kw>
<status status="PASS" starttime="20220120 16:08:57.833" endtime="20220120 16:08:59.041"/>
</iter>
<iter>
<var name="${effect}">audio visualizer</var>
<kw name="Convert To Upper Case" library="String">
<var>${effect}</var>
<arg>${effect}</arg>
<doc>Converts string to upper case.</doc>
<msg timestamp="20220120 16:08:59.042" level="INFO">${effect} = AUDIO VISUALIZER</msg>
<status status="PASS" starttime="20220120 16:08:59.041" endtime="20220120 16:08:59.042"/>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<arg>${is_mac} is ${True} and '${effect}'=='AUDIO VISUALIZER'</arg>
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:08:59.043" endtime="20220120 16:08:59.044"/>
</kw>
<kw name="lightsync.Change lightsync effect to" library="lightsync">
<arg>${effect}</arg>
<doc>Selects an effect from the dropdown and verifies its config options</doc>
<kw name="light_sync.Click On Effect Dropdown" library="light_sync_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:08:59.047" endtime="20220120 16:08:59.586"/>
</kw>
<status status="PASS" starttime="20220120 16:08:59.046" endtime="20220120 16:08:59.587"/>
</kw>
<kw name="light_sync.Select Effect From Dropdown" library="light_sync_screen">
<arg>${effect}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown_item}</arg>
<arg>innerText=${effect}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:08:59.593" endtime="20220120 16:09:00.196"/>
</kw>
<status status="PASS" starttime="20220120 16:08:59.590" endtime="20220120 16:09:00.196"/>
</kw>
<status status="PASS" starttime="20220120 16:08:59.045" endtime="20220120 16:09:00.198"/>
</kw>
<kw name="lightsync.Verify lightsync effect set to" library="lightsync">
<arg>${effect}</arg>
<doc>Verifies that the lightsync effect is set to the given parameter</doc>
<kw name="light_sync.Verify Effect From GUI" library="light_sync_screen">
<arg>${effect}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${light_sync_effects_dropdown_current}</arg>
<arg>innerText=${effect}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:09:00.202" endtime="20220120 16:09:00.236"/>
</kw>
<status status="PASS" starttime="20220120 16:09:00.201" endtime="20220120 16:09:00.236"/>
</kw>
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220120 16:09:00.237" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220120 16:09:00.237" endtime="20220120 16:09:00.238"/>
</kw>
<if>
<branch type="IF" condition="'${effect}' == 'OFF'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:09:00.239" endtime="20220120 16:09:00.239"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==1</arg>
<arg>msg=OFF should not have any customizations</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:09:00.240" endtime="20220120 16:09:00.240"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:00.238" endtime="20220120 16:09:00.240"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'FIXED'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:09:00.242" endtime="20220120 16:09:00.242"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==2</arg>
<arg>msg=FIXED should have only 1 customization to choose color</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:09:00.243" endtime="20220120 16:09:00.243"/>
</kw>
<kw name="lightsync.Verify Fixed effect settings are displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:09:00.244" endtime="20220120 16:09:00.244"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:00.241" endtime="20220120 16:09:00.244"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'CYCLE'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:09:00.246" endtime="20220120 16:09:00.246"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==3</arg>
<arg>msg=CYCLE should have only 2 customization to choose rate &amp; brightness</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:09:00.247" endtime="20220120 16:09:00.247"/>
</kw>
<kw name="lightsync.Verify Cycle effect settings are displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:09:00.248" endtime="20220120 16:09:00.248"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:00.245" endtime="20220120 16:09:00.248"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'BREATHING'">
<kw name="light_sync.Get Count of Effect properties" library="light_sync_screen">
<var>${count}</var>
<doc>Returns the number of panel sections i.e. properties available for customizing each effect</doc>
<status status="NOT RUN" starttime="20220120 16:09:00.250" endtime="20220120 16:09:00.250"/>
</kw>
<kw name="Should Be True" library="BuiltIn">
<arg>${count}==4</arg>
<arg>msg=BREATHING should have only 3 customization to choose color, rate &amp; brightness</arg>
<doc>Fails if the given condition is not true.</doc>
<status status="NOT RUN" starttime="20220120 16:09:00.251" endtime="20220120 16:09:00.251"/>
</kw>
<kw name="lightsync.Verify Breathing effect settings are displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:09:00.253" endtime="20220120 16:09:00.253"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:00.249" endtime="20220120 16:09:00.253"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'SCREEN SAMPLER'">
<kw name="lightsync.Verify Screen Sampler section is displayed" library="lightsync">
<status status="NOT RUN" starttime="20220120 16:09:00.253" endtime="20220120 16:09:00.253"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:00.253" endtime="20220120 16:09:00.253"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'AUDIO VISUALIZER' and ${is_mac} is ${False}">
<kw name="lightsync.Verify Audio Visualizer section is displayed" library="lightsync">
<kw name="light_sync.Verify Color Picker is displayed" library="light_sync_screen">
<arg>type=foreground</arg>
<doc>Verifies the color picker is displayed
By default expects only 1 color picker
'foreground' and 'background' option needs to be provided in case of more than 1 color pickers</doc>
<if>
<branch type="IF" condition="'${type}' == 'default'">
<kw name="Expect Element" library="libraries.components.React">
<arg>${light_sync_color_picker}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="NOT RUN" starttime="20220120 16:09:00.257" endtime="20220120 16:09:00.257"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:00.257" endtime="20220120 16:09:00.258"/>
</branch>
<branch type="ELSE IF" condition="'${type}' == 'foreground'">
<kw name="Expect Element" library="libraries.components.React">
<arg>${light_sync_foreground_color_picker}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:09:00.258" endtime="20220120 16:09:00.279"/>
</kw>
<status status="PASS" starttime="20220120 16:09:00.258" endtime="20220120 16:09:00.279"/>
</branch>
<branch type="ELSE IF" condition="'${type}' == 'background'">
<kw name="Expect Element" library="libraries.components.React">
<arg>${light_sync_background_color_picker}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="NOT RUN" starttime="20220120 16:09:00.279" endtime="20220120 16:09:00.280"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:00.279" endtime="20220120 16:09:00.280"/>
</branch>
<status status="PASS" starttime="20220120 16:09:00.256" endtime="20220120 16:09:00.280"/>
</if>
<status status="PASS" starttime="20220120 16:09:00.256" endtime="20220120 16:09:00.280"/>
</kw>
<kw name="light_sync.Verify Color Picker is displayed" library="light_sync_screen">
<arg>type=background</arg>
<doc>Verifies the color picker is displayed
By default expects only 1 color picker
'foreground' and 'background' option needs to be provided in case of more than 1 color pickers</doc>
<if>
<branch type="IF" condition="'${type}' == 'default'">
<kw name="Expect Element" library="libraries.components.React">
<arg>${light_sync_color_picker}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="NOT RUN" starttime="20220120 16:09:00.282" endtime="20220120 16:09:00.282"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:00.281" endtime="20220120 16:09:00.282"/>
</branch>
<branch type="ELSE IF" condition="'${type}' == 'foreground'">
<kw name="Expect Element" library="libraries.components.React">
<arg>${light_sync_foreground_color_picker}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="NOT RUN" starttime="20220120 16:09:00.283" endtime="20220120 16:09:00.283"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:00.282" endtime="20220120 16:09:00.283"/>
</branch>
<branch type="ELSE IF" condition="'${type}' == 'background'">
<kw name="Expect Element" library="libraries.components.React">
<arg>${light_sync_background_color_picker}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:09:00.283" endtime="20220120 16:09:00.301"/>
</kw>
<status status="PASS" starttime="20220120 16:09:00.283" endtime="20220120 16:09:00.301"/>
</branch>
<status status="PASS" starttime="20220120 16:09:00.281" endtime="20220120 16:09:00.301"/>
</if>
<status status="PASS" starttime="20220120 16:09:00.281" endtime="20220120 16:09:00.302"/>
</kw>
<status status="PASS" starttime="20220120 16:09:00.255" endtime="20220120 16:09:00.302"/>
</kw>
<status status="PASS" starttime="20220120 16:09:00.254" endtime="20220120 16:09:00.302"/>
</branch>
<branch type="ELSE">
<kw name="LOG WARNING" library="logging">
<arg>${effect} verification not handled</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:09:00.302" endtime="20220120 16:09:00.302"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:00.302" endtime="20220120 16:09:00.302"/>
</branch>
<status status="PASS" starttime="20220120 16:09:00.238" endtime="20220120 16:09:00.302"/>
</if>
<status status="PASS" starttime="20220120 16:09:00.199" endtime="20220120 16:09:00.303"/>
</kw>
<status status="PASS" starttime="20220120 16:08:59.041" endtime="20220120 16:09:00.303"/>
</iter>
<status status="PASS" starttime="20220120 16:08:54.021" endtime="20220120 16:09:00.303"/>
</for>
<kw name="End Test" library="logging" type="TEARDOWN">
<arg>${KEYWORD STATUS}</arg>
<doc>Ensure to Call this keyword at Teardown of all High Level Test Keywords
If Test Fails - This will capture logs and screenshots and append links to report</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}Test Status: ${test_status}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:09:00.304" endtime="20220120 16:09:00.304"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${test_status}'=='FAIL'</arg>
<arg>Get Log Files And Upload To FTPDrive</arg>
<arg>end_test</arg>
<arg>ELSE</arg>
<arg>Return From Keyword</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20220120 16:09:00.306" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220120 16:09:00.306" endtime="20220120 16:09:00.306"/>
</kw>
<status status="PASS" starttime="20220120 16:09:00.306" endtime="20220120 16:09:00.306"/>
</kw>
<status status="PASS" starttime="20220120 16:09:00.303" endtime="20220120 16:09:00.306"/>
</kw>
<status status="PASS" starttime="20220120 16:08:16.782" endtime="20220120 16:09:00.306"/>
</kw>
<status status="PASS" starttime="20220120 16:08:16.781" endtime="20220120 16:09:00.306"/>
</kw>
<tag>Device: POWERPLAY (Windows, Wired)</tag>
<tag>Device Type: POWERPLAY</tag>
<tag>Feature: lightsync</tag>
<tag>OS: Windows-10-10.0.19041-SP0</tag>
<status status="PASS" starttime="20220120 16:08:16.777" endtime="20220120 16:09:00.307"/>
</test>
<test id="s1-t8" name="Test: Device Settings For Powerplay - SYS Verification: POWERPLAY (Windows, Wired)">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Test: Device Settings For Powerplay - SYS Verification</arg>
<arg>{'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '405f', 'firmware': '7.1.11', 'modelId': '4405f', 'type': 'POWERPLAY', 'device_specific_features': {'lightsync': {'effect': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}}, 'connection_interfaces': {'wired': {'pid': '405f', 'productId': '405f'}}}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Test: Device Settings For Powerplay - SYS Verification" library="powerplay_regression_system">
<arg>{'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '405f', 'firmware': '7.1.11', 'modelId': '4405f', 'type': 'POWERPLAY', 'device_specific_features': {'lightsync': {'effect': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}}, 'connection_interfaces': {'wired': {'pid': '405f', 'productId': '405f'}}}</arg>
<tag>device_settings</tag>
<doc>Test All The Device Settings Available For Mouse</doc>
<kw name="home.Open Device Configuration" library="home_screen">
<arg>${device['displayName']}</arg>
<doc>Click on the device to open device configuration and if device introduction page opens then skip it.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device Home Screen Loaded</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device Home Screen Loaded" library="home_screen">
<arg>${device_name}</arg>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:09:05.360" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:09:00.329" endtime="20220120 16:09:05.360"/>
</kw>
<status status="FAIL" starttime="20220120 16:09:00.329" endtime="20220120 16:09:05.361"/>
</kw>
<msg timestamp="20220120 16:09:05.361" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220120 16:09:00.328" endtime="20220120 16:09:05.361"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:09:05.364" endtime="20220120 16:09:05.364"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:09:05.364" endtime="20220120 16:09:05.364"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:09:05.365" endtime="20220120 16:09:05.365"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:09:05.366" endtime="20220120 16:09:05.366"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:09:05.367" endtime="20220120 16:09:05.367"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220120 16:09:05.368" endtime="20220120 16:09:05.368"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:05.362" endtime="20220120 16:09:05.368"/>
</branch>
<status status="PASS" starttime="20220120 16:09:05.362" endtime="20220120 16:09:05.368"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:09:05.372" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:09:05.371" endtime="20220120 16:09:05.372"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:09:05.373" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:09:05.374" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:09:05.373" endtime="20220120 16:09:05.374"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:09:15.389" level="INFO">Failed to find element with selector: #home-view and attributes:{}</msg>
<msg timestamp="20220120 16:09:15.390" level="INFO" html="true">&lt;a href=screenshot-20220120-160915.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160915.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:09:15.532" level="INFO">Failed to find element with selector: #home-view</msg>
<msg timestamp="20220120 16:09:15.533" level="FAIL">Failure: Selector "#home-view" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:09:05.377" endtime="20220120 16:09:15.533"/>
</kw>
<status status="FAIL" starttime="20220120 16:09:05.375" endtime="20220120 16:09:15.534"/>
</kw>
<status status="FAIL" starttime="20220120 16:09:05.370" endtime="20220120 16:09:15.534"/>
</kw>
<msg timestamp="20220120 16:09:15.534" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220120 16:09:05.369" endtime="20220120 16:09:15.534"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:09:15.535" endtime="20220120 16:09:15.535"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:09:15.536" endtime="20220120 16:09:15.552"/>
</kw>
<msg timestamp="20220120 16:09:15.552" level="INFO">${back_button_present} = True</msg>
<status status="PASS" starttime="20220120 16:09:15.536" endtime="20220120 16:09:15.552"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:09:15.553" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:09:15.553" endtime="20220120 16:09:15.553"/>
</kw>
<status status="PASS" starttime="20220120 16:09:00.328" endtime="20220120 16:09:15.554"/>
</iter>
<status status="PASS" starttime="20220120 16:09:00.328" endtime="20220120 16:09:15.554"/>
</for>
<status status="PASS" starttime="20220120 16:09:00.327" endtime="20220120 16:09:15.554"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:09:15.556" endtime="20220120 16:09:15.566"/>
</kw>
<msg timestamp="20220120 16:09:15.567" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:09:15.556" endtime="20220120 16:09:15.567"/>
</kw>
<msg timestamp="20220120 16:09:15.567" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:09:15.555" endtime="20220120 16:09:15.567"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:09:15.568" endtime="20220120 16:09:15.568"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${clicked}</var>
<arg>common.Click On Back</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:09:15.570" endtime="20220120 16:09:16.152"/>
</kw>
<status status="PASS" starttime="20220120 16:09:15.569" endtime="20220120 16:09:16.154"/>
</kw>
<msg timestamp="20220120 16:09:16.154" level="INFO">${clicked} = True</msg>
<status status="PASS" starttime="20220120 16:09:15.568" endtime="20220120 16:09:16.154"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clicked}==False</arg>
<arg>common.alerts</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:09:16.156" endtime="20220120 16:09:16.158"/>
</kw>
<status status="PASS" starttime="20220120 16:09:15.554" endtime="20220120 16:09:16.159"/>
</iter>
<iter>
<var name="${index}">1</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:09:17.184" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220120 16:09:17.186" level="INFO" html="true">&lt;a href=screenshot-20220120-160917.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160917.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:09:17.369" level="INFO">Failed to find element with selector: .back-button</msg>
<msg timestamp="20220120 16:09:17.370" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:09:16.166" endtime="20220120 16:09:17.370"/>
</kw>
<msg timestamp="20220120 16:09:17.370" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220120 16:09:16.164" endtime="20220120 16:09:17.370"/>
</kw>
<msg timestamp="20220120 16:09:17.370" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220120 16:09:16.161" endtime="20220120 16:09:17.370"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:09:17.371" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:09:17.370" endtime="20220120 16:09:17.371"/>
</kw>
<status status="PASS" starttime="20220120 16:09:16.159" endtime="20220120 16:09:17.371"/>
</iter>
<status status="PASS" starttime="20220120 16:09:15.554" endtime="20220120 16:09:17.371"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:09:17.373" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:09:17.373" endtime="20220120 16:09:17.373"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:09:17.374" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:09:17.375" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:09:17.374" endtime="20220120 16:09:17.375"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:09:17.375" endtime="20220120 16:09:17.390"/>
</kw>
<status status="PASS" starttime="20220120 16:09:17.375" endtime="20220120 16:09:17.391"/>
</kw>
<status status="PASS" starttime="20220120 16:09:17.372" endtime="20220120 16:09:17.391"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:09:19.406" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220120 16:09:19.406" level="INFO" html="true">&lt;a href=screenshot-20220120-160919.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160919.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:09:19.568" level="INFO">Failed to find element with selector: .back-button</msg>
<status status="PASS" starttime="20220120 16:09:17.391" endtime="20220120 16:09:19.569"/>
</kw>
<status status="PASS" starttime="20220120 16:09:17.372" endtime="20220120 16:09:19.569"/>
</kw>
<status status="PASS" starttime="20220120 16:09:00.327" endtime="20220120 16:09:19.570"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:09:19.591" level="FAIL">Failure: Selector ".left-arrow-container.disabled" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220120 16:09:19.573" endtime="20220120 16:09:19.591"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<status status="NOT RUN" starttime="20220120 16:09:19.592" endtime="20220120 16:09:19.592"/>
</kw>
<status status="FAIL" starttime="20220120 16:09:19.573" endtime="20220120 16:09:19.592"/>
</kw>
<msg timestamp="20220120 16:09:19.592" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220120 16:09:19.572" endtime="20220120 16:09:19.592"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:09:19.593" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:09:19.592" endtime="20220120 16:09:19.593"/>
</kw>
<status status="PASS" starttime="20220120 16:09:19.572" endtime="20220120 16:09:19.593"/>
</iter>
<status status="PASS" starttime="20220120 16:09:19.572" endtime="20220120 16:09:19.593"/>
</for>
<status status="PASS" starttime="20220120 16:09:19.571" endtime="20220120 16:09:19.593"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:09:21.642" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<msg timestamp="20220120 16:09:21.643" level="INFO" html="true">&lt;a href=screenshot-20220120-160921.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160921.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:09:21.852" level="INFO">Failed to find element with selector: .right-arrow-container.disabled</msg>
<status status="PASS" starttime="20220120 16:09:19.595" endtime="20220120 16:09:21.853"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:09:23.867" level="INFO">Failed to find element with selector: .right-arrow-container.hidden and attributes:{}</msg>
<msg timestamp="20220120 16:09:23.868" level="INFO" html="true">&lt;a href=screenshot-20220120-160923.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160923.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:09:24.047" level="INFO">Failed to find element with selector: .right-arrow-container.hidden</msg>
<status status="PASS" starttime="20220120 16:09:21.854" endtime="20220120 16:09:24.049"/>
</kw>
<status status="PASS" starttime="20220120 16:09:19.594" endtime="20220120 16:09:24.049"/>
</kw>
<msg timestamp="20220120 16:09:24.049" level="INFO">${right_scroll_present} = True</msg>
<status status="PASS" starttime="20220120 16:09:19.594" endtime="20220120 16:09:24.049"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:09:24.051" endtime="20220120 16:09:24.102"/>
</kw>
<msg timestamp="20220120 16:09:24.102" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220120 16:09:24.050" endtime="20220120 16:09:24.102"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:09:24.104" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:09:24.103" endtime="20220120 16:09:24.104"/>
</kw>
<status status="PASS" starttime="20220120 16:09:19.593" endtime="20220120 16:09:24.104"/>
</iter>
<status status="PASS" starttime="20220120 16:09:19.593" endtime="20220120 16:09:24.104"/>
</for>
<status status="PASS" starttime="20220120 16:09:19.570" endtime="20220120 16:09:24.104"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220120 16:09:29.106" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220120 16:09:24.105" endtime="20220120 16:09:29.106"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:09:29.114" endtime="20220120 16:09:29.158"/>
</kw>
<status status="PASS" starttime="20220120 16:09:29.111" endtime="20220120 16:09:29.158"/>
</kw>
<msg timestamp="20220120 16:09:29.158" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:09:29.109" endtime="20220120 16:09:29.158"/>
</kw>
<if>
<branch type="IF" condition="${status} is ${False}">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>GHUB is unable to load the device: ${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:09:29.158" endtime="20220120 16:09:29.158"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:29.158" endtime="20220120 16:09:29.158"/>
</branch>
<status status="PASS" starttime="20220120 16:09:29.158" endtime="20220120 16:09:29.159"/>
</if>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${status} is ${False}</arg>
<arg>Trigger Wake Bots</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:09:29.159" endtime="20220120 16:09:29.159"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${inactive_status}</var>
<arg>home.Is Specific Device Inactive</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Specific Device Inactive" library="home_screen">
<arg>${device_name}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>${home_device_inactive_device_name}${device_name}${home_device_inactive_device_icon}</arg>
<arg>3</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:09:32.188" level="FAIL">Failure: Selector "//h2[contains(text(),"POWERPLAY")]//following-sibling::div[contains(text(), "INACTIVE")]" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:09:29.161" endtime="20220120 16:09:32.188"/>
</kw>
<status status="FAIL" starttime="20220120 16:09:29.160" endtime="20220120 16:09:32.190"/>
</kw>
<msg timestamp="20220120 16:09:32.190" level="INFO">${inactive_status} = False</msg>
<status status="PASS" starttime="20220120 16:09:29.160" endtime="20220120 16:09:32.190"/>
</kw>
<if>
<branch type="IF" condition="${inactive_status}">
<kw name="Trigger Wake Bots" library="home_screen">
<status status="NOT RUN" starttime="20220120 16:09:32.192" endtime="20220120 16:09:32.193"/>
</kw>
<kw name="home.Restart GHUB Till Device Get Load" library="home_screen">
<arg>${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:09:32.194" endtime="20220120 16:09:32.195"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:09:32.196" endtime="20220120 16:09:32.196"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_loaded}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220120 16:09:32.197" endtime="20220120 16:09:32.198"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${device_loaded} is ${True}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20220120 16:09:32.199" endtime="20220120 16:09:32.199"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${inactive_status}</var>
<arg>home.Is Specific Device Inactive</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220120 16:09:32.200" endtime="20220120 16:09:32.200"/>
</kw>
<if>
<branch type="IF" condition="${inactive_status}">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>GHUB is unable to load the device: ${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:09:32.201" endtime="20220120 16:09:32.201"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:32.200" endtime="20220120 16:09:32.201"/>
</branch>
<status status="NOT RUN" starttime="20220120 16:09:32.200" endtime="20220120 16:09:32.201"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220120 16:09:32.202" endtime="20220120 16:09:32.203"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${device_loaded} is ${False} or ${inactive_status} is ${True} or ${device_reflected_on_ui} is ${False}</arg>
<arg>home.Reconnect Device Till Device Get Load</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20220120 16:09:32.204" endtime="20220120 16:09:32.204"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:32.191" endtime="20220120 16:09:32.204"/>
</branch>
<status status="PASS" starttime="20220120 16:09:32.191" endtime="20220120 16:09:32.204"/>
</if>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:09:32.224" level="FAIL">Failure: Selector ".left-arrow-container.disabled" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220120 16:09:32.211" endtime="20220120 16:09:32.225"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<status status="NOT RUN" starttime="20220120 16:09:32.225" endtime="20220120 16:09:32.226"/>
</kw>
<status status="FAIL" starttime="20220120 16:09:32.210" endtime="20220120 16:09:32.226"/>
</kw>
<msg timestamp="20220120 16:09:32.227" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220120 16:09:32.209" endtime="20220120 16:09:32.227"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:09:32.228" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:09:32.227" endtime="20220120 16:09:32.228"/>
</kw>
<status status="PASS" starttime="20220120 16:09:32.208" endtime="20220120 16:09:32.228"/>
</iter>
<status status="PASS" starttime="20220120 16:09:32.207" endtime="20220120 16:09:32.228"/>
</for>
<status status="PASS" starttime="20220120 16:09:32.207" endtime="20220120 16:09:32.228"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:09:34.267" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<msg timestamp="20220120 16:09:34.268" level="INFO" html="true">&lt;a href=screenshot-20220120-160934.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160934.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:09:34.460" level="INFO">Failed to find element with selector: .right-arrow-container.disabled</msg>
<status status="PASS" starttime="20220120 16:09:32.230" endtime="20220120 16:09:34.461"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:09:36.524" level="INFO">Failed to find element with selector: .right-arrow-container.hidden and attributes:{}</msg>
<msg timestamp="20220120 16:09:36.526" level="INFO" html="true">&lt;a href=screenshot-20220120-160936.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160936.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:09:36.727" level="INFO">Failed to find element with selector: .right-arrow-container.hidden</msg>
<status status="PASS" starttime="20220120 16:09:34.462" endtime="20220120 16:09:36.729"/>
</kw>
<status status="PASS" starttime="20220120 16:09:32.230" endtime="20220120 16:09:36.729"/>
</kw>
<msg timestamp="20220120 16:09:36.729" level="INFO">${right_scroll_present} = True</msg>
<status status="PASS" starttime="20220120 16:09:32.229" endtime="20220120 16:09:36.729"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:09:36.730" endtime="20220120 16:09:36.764"/>
</kw>
<msg timestamp="20220120 16:09:36.765" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220120 16:09:36.730" endtime="20220120 16:09:36.765"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:09:36.766" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:09:36.765" endtime="20220120 16:09:36.766"/>
</kw>
<status status="PASS" starttime="20220120 16:09:32.228" endtime="20220120 16:09:36.766"/>
</iter>
<status status="PASS" starttime="20220120 16:09:32.228" endtime="20220120 16:09:36.766"/>
</for>
<status status="PASS" starttime="20220120 16:09:32.205" endtime="20220120 16:09:36.766"/>
</kw>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:09:36.767" endtime="20220120 16:09:36.789"/>
</kw>
<status status="PASS" starttime="20220120 16:09:36.767" endtime="20220120 16:09:36.789"/>
</kw>
<status status="PASS" starttime="20220120 16:09:00.326" endtime="20220120 16:09:36.789"/>
</kw>
<msg timestamp="20220120 16:09:36.790" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:09:00.325" endtime="20220120 16:09:36.790"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'False'">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>${device_name} not loaded in GHub.</arg>
<status status="NOT RUN" starttime="20220120 16:09:36.790" endtime="20220120 16:09:36.790"/>
</kw>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220120 16:09:36.791" endtime="20220120 16:09:36.791"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:36.790" endtime="20220120 16:09:36.791"/>
</branch>
<status status="PASS" starttime="20220120 16:09:36.790" endtime="20220120 16:09:36.791"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${inactive}</var>
<arg>home.Is Specific Device Inactive</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Specific Device Inactive" library="home_screen">
<arg>${device_name}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>${home_device_inactive_device_name}${device_name}${home_device_inactive_device_icon}</arg>
<arg>3</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:09:39.823" level="FAIL">Failure: Selector "//h2[contains(text(),"POWERPLAY")]//following-sibling::div[contains(text(), "INACTIVE")]" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:09:36.793" endtime="20220120 16:09:39.823"/>
</kw>
<status status="FAIL" starttime="20220120 16:09:36.792" endtime="20220120 16:09:39.824"/>
</kw>
<msg timestamp="20220120 16:09:39.824" level="INFO">${inactive} = False</msg>
<status status="PASS" starttime="20220120 16:09:36.791" endtime="20220120 16:09:39.825"/>
</kw>
<if>
<branch type="IF" condition="${inactive}">
<kw name="Sleep" library="BuiltIn">
<arg>20</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:09:39.827" endtime="20220120 16:09:39.829"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:39.825" endtime="20220120 16:09:39.829"/>
</branch>
<status status="PASS" starttime="20220120 16:09:39.825" endtime="20220120 16:09:39.830"/>
</if>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:09:39.831" endtime="20220120 16:09:40.471"/>
</kw>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220120 16:09:42.491" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220120 16:09:42.493" level="INFO" html="true">&lt;a href=screenshot-20220120-160942.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-160942.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:09:42.659" level="INFO">Failed to find element with selector: .splash-screen-skip-button</msg>
<msg timestamp="20220120 16:09:42.660" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:09:40.475" endtime="20220120 16:09:42.660"/>
</kw>
<status status="PASS" starttime="20220120 16:09:40.474" endtime="20220120 16:09:42.660"/>
</kw>
<status status="PASS" starttime="20220120 16:09:40.473" endtime="20220120 16:09:42.660"/>
</kw>
<kw name="device_view.Handle Got It Popup" library="device_main_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${got_it_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_got_it_button}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_got_it_button}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:09:47.684" level="FAIL">Failure: Selector "//div[@class='coach-mark']/button[text()='GOT IT']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:09:42.661" endtime="20220120 16:09:47.684"/>
</kw>
<msg timestamp="20220120 16:09:47.685" level="INFO">${got_it_button_present} = False</msg>
<status status="PASS" starttime="20220120 16:09:42.661" endtime="20220120 16:09:47.685"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${got_it_button_present} is ${False}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220120 16:09:47.689" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220120 16:09:47.687" endtime="20220120 16:09:47.689"/>
</kw>
<status status="PASS" starttime="20220120 16:09:42.661" endtime="20220120 16:09:47.690"/>
</kw>
<status status="PASS" starttime="20220120 16:09:00.313" endtime="20220120 16:09:47.690"/>
</kw>
<kw name="device_view.Click On Settings" library="device_main_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${device_view_settings}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:09:47.696" level="INFO">${words} = ['#setting-sprocket']</msg>
<status status="PASS" starttime="20220120 16:09:47.695" endtime="20220120 16:09:47.696"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:09:47.697" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:09:47.697" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:09:47.697" endtime="20220120 16:09:47.697"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:09:47.699" endtime="20220120 16:09:48.317"/>
</kw>
<status status="PASS" starttime="20220120 16:09:47.698" endtime="20220120 16:09:48.318"/>
</kw>
<status status="PASS" starttime="20220120 16:09:47.693" endtime="20220120 16:09:48.319"/>
</kw>
<status status="PASS" starttime="20220120 16:09:47.692" endtime="20220120 16:09:48.320"/>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>device_settings.Verify Correct Device Appears</arg>
<arg>${device['displayName']}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="device_settings.Verify Correct Device Appears" library="device_settings">
<arg>${device['displayName']}</arg>
<doc>Click Device &gt; Settings
Check if the text in the settings page matches the device name</doc>
<kw name="device_settings.Verfiy Device Name" library="device_settings_screen">
<arg>${device_name}</arg>
<kw name="Get Attribute" library="libraries.components.React">
<var>${name}</var>
<arg>selector=${device_settings_device_name}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220120 16:09:48.369" level="INFO">${name} = POWERPLAY</msg>
<status status="PASS" starttime="20220120 16:09:48.350" endtime="20220120 16:09:48.369"/>
</kw>
<kw name="Convert To Upper Case" library="String">
<var>${name}</var>
<arg>${name}</arg>
<doc>Converts string to upper case.</doc>
<msg timestamp="20220120 16:09:48.370" level="INFO">${name} = POWERPLAY</msg>
<status status="PASS" starttime="20220120 16:09:48.370" endtime="20220120 16:09:48.370"/>
</kw>
<kw name="Convert To Upper Case" library="String">
<var>${device_name}</var>
<arg>${device_name}</arg>
<doc>Converts string to upper case.</doc>
<msg timestamp="20220120 16:09:48.371" level="INFO">${device_name} = POWERPLAY</msg>
<status status="PASS" starttime="20220120 16:09:48.371" endtime="20220120 16:09:48.371"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${device_name}</arg>
<arg>${name}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220120 16:09:48.371" endtime="20220120 16:09:48.372"/>
</kw>
<status status="PASS" starttime="20220120 16:09:48.349" endtime="20220120 16:09:48.372"/>
</kw>
<status status="PASS" starttime="20220120 16:09:48.328" endtime="20220120 16:09:48.372"/>
</kw>
<status status="PASS" starttime="20220120 16:09:48.323" endtime="20220120 16:09:48.372"/>
</kw>
<kw name="json.Get Device Settings Feature From Device Specific Features" library="json_data_handler">
<var>@{device_settings}</var>
<arg>${device}</arg>
<kw name="Get Device Settings Feature From Device Specific Features" library="libraries.json_data_handler">
<var>${device_settings}</var>
<arg>${device}</arg>
<msg timestamp="20220120 16:09:48.374" level="INFO">${device_settings} = []</msg>
<status status="PASS" starttime="20220120 16:09:48.374" endtime="20220120 16:09:48.374"/>
</kw>
<msg timestamp="20220120 16:09:48.375" level="INFO">@{device_settings} = [ ]</msg>
<status status="PASS" starttime="20220120 16:09:48.373" endtime="20220120 16:09:48.375"/>
</kw>
<if>
<branch type="IF" condition="'device startup effect' in @{device_settings}">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>device_settings.Test Device Settings - Device Startup Effect SYS Validation</arg>
<arg>${device}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<status status="NOT RUN" starttime="20220120 16:09:48.375" endtime="20220120 16:09:48.375"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:48.375" endtime="20220120 16:09:48.375"/>
</branch>
<status status="PASS" starttime="20220120 16:09:48.375" endtime="20220120 16:09:48.375"/>
</if>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>device_settings.Test Device Settings - Firmware Version SYS Validation</arg>
<arg>${device}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="device_settings.Test Device Settings - Firmware Version SYS Validation" library="device_settings">
<arg>${device}</arg>
<doc>Check the firmware returned by the backend/firmware matches with the JSON firmware</doc>
<kw name="backend.Get Firmware Version" library="backend">
<var>${sys_firmware}</var>
<arg>${device['displayName']}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220120 16:09:48.390" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220120 16:09:48.390" endtime="20220120 16:09:48.391"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220120 16:09:49.400" level="INFO">16:05:08.271514: {"msgId": "", "verb": "OPTIONS", "path": "/", "origin": "backend"}
16:05:44.116228: {"msgId": "9552c310-aa42-42f6-bbee-d2fb1c63b234", "verb": "SET", "path": "/configuration", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.application.Configuration", "autolaunch": false, "language": "", "onboardingShown": true, "migrationShown": true, "seenCoachMarks": ["coach-mark-panel-persistent-lock", "coach-mark-color-picker", "coach-mark-lighting-effect-selector", "coach-mark-lighting-effect-edit", "coach-mark-microphone-input-gain", "coach-mark-microphone-recording", "coach-mark-microphone-enable-blue-voice", "coach-mark-lighting-effect-editor-timeline", "coach-mark-lighting-effect-editor-frame-selection", "coach-mark-microphone-advanced-settings", "coach-mark-microphone-select-preset"], "blueVoiceAdvancedControlsEnabled": false, "brand": "", "notificationsEnabled": false, "settingsLoadedFromBackup": false, "keyValue": [], "lowBatteryNotificationsEnabled": false, "lockNotificationsEnabled": false, "nonInteractivePrompted": []}}
16:09:48.398614: {"msgId": "ac853322-2d2c-42be-a67c-10e19a86ec8e", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 16479, "state": "ACTIVE", "onboardMode": false, "resourcesAvailable": true, "connectionType": "WIRELESS", "hasWirelessInterface": true, "deviceType": "CHARGE_PAD", "deviceModel": "powerplay", "displayName": "POWERPLAY", "extendedDisplayName": "POWERPLAY Wireless Charging System", "slotPrefix": "powerplay", "thumbnail": "pipeline://core/thumbnails/powerplay.png", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSEPAD_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO"}, "zones": [{"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": false, "lowBatteryEffect": false, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": false, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": false, "nonInteractive": false, "chargepadCompatible": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_405f", "pid": 16479, "modelId": 0, "extendedModel": 0, "serialNumber": "825247489", "path": "usb\\vid_046d&amp;pid_c53a&amp;mi_02\\8&amp;9961625&amp;1&amp;0002:6", "containerId": "", "deviceType": "CHARGE_PAD", "deviceName": "Candy companion chip", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "7.1.11", "connectionType": "WIRELESS", "hasOnboardMode": false}, {"type": "HIDIO", "id": "HID_046d_c53a_ff000001", "pid": 50490, "modelId": 0, "extendedModel": 0, "serialNumber": "", "path": "\\\\?\\HID#VID_046D&amp;PID_C53A&amp;MI_02&amp;COL01#9&amp;1F335058&amp;0&amp;0000#{4D1E55B2-F16F-11CF-88CB-001111000030}", "containerId": "e4feb25d-6ec2-11ec-a9ae-2cea7f042504", "deviceType": "INVALID_TYPE", "deviceName": "", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "", "connectionType": "USB", "hasOnboardMode": false}], "slots": {"powerplay_lighting_setting_firmware": {"id": "powerplay_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}}}, {"id": "dev00000001", "pid": 16519, "state": "NOT_CONNECTED", "onboardMode": false, "resourcesAvailable": true, "connectionType": "WIRELESS", "hasWirelessInterface": true, "deviceType": "MOUSE", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_PRIMARY": "PRIMARY", "ZONE_BRANDING": "LOGO"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true}, "activeInterfaces": [], "slots": {}}]}}</msg>
<msg timestamp="20220120 16:09:49.401" level="INFO">${res} =  {"msgId": "ac853322-2d2c-42be-a67c-10e19a86ec8e", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220120 16:09:48.391" endtime="20220120 16:09:49.401"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220120 16:09:49.403" level="INFO">${res} = {'msgId': 'ac853322-2d2c-42be-a67c-10e19a86ec8e', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220120 16:09:49.402" endtime="20220120 16:09:49.403"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220120 16:09:49.444" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 16479, 'state': 'ACTIVE', 'onboardMode': False, 'resourcesAvailable': True, 'conne...</msg>
<status status="PASS" starttime="20220120 16:09:49.405" endtime="20220120 16:09:49.444"/>
</kw>
<msg timestamp="20220120 16:09:49.444" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 16479, 'state': 'ACTIVE', 'onboardMode': False, 'resourcesAvailable': True, 'conne...</msg>
<status status="PASS" starttime="20220120 16:09:49.404" endtime="20220120 16:09:49.444"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220120 16:09:49.724" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 16479, 'state': 'ACTIVE', 'onboardMode': False, 'resourcesAvailable': True, 'connectionType': 'WIRELESS', 'hasWirelessInterface': True, 'deviceType': 'CHARGE_PAD', 'devi...</msg>
<status status="PASS" starttime="20220120 16:09:49.447" endtime="20220120 16:09:49.724"/>
</kw>
<msg timestamp="20220120 16:09:49.746" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 16479, 'state': 'ACTIVE', 'onboardMode': False, 'resourcesAvailable': True, 'connectionType': 'WIRELESS', 'hasWirelessInterface': True, 'deviceType': 'CHARGE_PAD', 'devi...</msg>
<status status="PASS" starttime="20220120 16:09:49.446" endtime="20220120 16:09:49.747"/>
</kw>
<msg timestamp="20220120 16:09:49.747" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 16479, 'state': 'ACTIVE', 'onboardMode': False, 'resourcesAvailable': True, 'connectionType': 'WIRELESS', 'hasWirelessInterface': True, 'deviceType': 'CHARGE_PAD', 'devi...</msg>
<status status="PASS" starttime="20220120 16:09:49.445" endtime="20220120 16:09:49.747"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 16479, 'state': 'ACTIVE', 'onboardMode': False, 'resourcesAvailable': True, 'connectionType': 'WIRELESS', 'hasWirelessInterface': True, 'deviceType': 'CHARGE_PAD', 'device...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220120 16:09:49.819" level="INFO">${result} = ['POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POW...</msg>
<status status="PASS" starttime="20220120 16:09:49.750" endtime="20220120 16:09:49.819"/>
</kw>
<msg timestamp="20220120 16:09:49.819" level="INFO">${result} = ['POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POWERPLAY', 'POW...</msg>
<status status="PASS" starttime="20220120 16:09:49.749" endtime="20220120 16:09:49.819"/>
</kw>
<msg timestamp="20220120 16:09:49.820" level="INFO">${device_displayname} = POWERPLAY</msg>
<status status="PASS" starttime="20220120 16:09:49.748" endtime="20220120 16:09:49.820"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220120 16:09:49.893" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', '046d_405f', 'HID_046d_c53a_ff000001', 'powerplay_lighting_setting_firmware', 'dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', '046d_405f', 'H...</msg>
<status status="PASS" starttime="20220120 16:09:49.823" endtime="20220120 16:09:49.893"/>
</kw>
<msg timestamp="20220120 16:09:49.893" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', '046d_405f', 'HID_046d_c53a_ff000001', 'powerplay_lighting_setting_firmware', 'dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', '046d_405f', 'H...</msg>
<status status="PASS" starttime="20220120 16:09:49.822" endtime="20220120 16:09:49.893"/>
</kw>
<msg timestamp="20220120 16:09:49.893" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220120 16:09:49.821" endtime="20220120 16:09:49.893"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:09:49.894" endtime="20220120 16:09:49.894"/>
</kw>
<status status="PASS" starttime="20220120 16:09:49.820" endtime="20220120 16:09:49.894"/>
</branch>
<status status="PASS" starttime="20220120 16:09:49.820" endtime="20220120 16:09:49.894"/>
</if>
<status status="PASS" starttime="20220120 16:09:49.747" endtime="20220120 16:09:49.894"/>
</iter>
<iter>
<var name="${device_data}">{'id': 'dev00000001', 'pid': 16519, 'state': 'NOT_CONNECTED', 'onboardMode': False, 'resourcesAvailable': True, 'connectionType': 'WIRELESS', 'hasWirelessInterface': True, 'deviceType': 'MOUSE', 'devi...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220120 16:09:49.986" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220120 16:09:49.898" endtime="20220120 16:09:49.986"/>
</kw>
<msg timestamp="20220120 16:09:49.986" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220120 16:09:49.897" endtime="20220120 16:09:49.986"/>
</kw>
<msg timestamp="20220120 16:09:49.987" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220120 16:09:49.895" endtime="20220120 16:09:49.987"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<status status="NOT RUN" starttime="20220120 16:09:49.988" endtime="20220120 16:09:49.988"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20220120 16:09:49.988" endtime="20220120 16:09:49.988"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:49.987" endtime="20220120 16:09:49.988"/>
</branch>
<status status="PASS" starttime="20220120 16:09:49.987" endtime="20220120 16:09:49.988"/>
</if>
<status status="PASS" starttime="20220120 16:09:49.895" endtime="20220120 16:09:49.988"/>
</iter>
<status status="PASS" starttime="20220120 16:09:49.747" endtime="20220120 16:09:49.988"/>
</for>
<msg timestamp="20220120 16:09:49.989" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220120 16:09:48.389" endtime="20220120 16:09:49.989"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/devices/${device_id}/info</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220120 16:09:49.990" level="INFO">{'verb': 'GET', 'path': '/devices/dev00000000/info'}</msg>
<status status="PASS" starttime="20220120 16:09:49.989" endtime="20220120 16:09:49.990"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/${device_id}/info</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220120 16:09:49.991" endtime="20220120 16:09:49.995"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220120 16:09:50.995" level="INFO">16:09:49.994188: {"msgId": "a4bfde26-d652-4257-b41a-cbae8ed95249", "verb": "GET", "path": "/devices/dev00000000/info", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info", "id": "dev00000000", "pid": 16479, "state": "ACTIVE", "onboardMode": false, "resourcesAvailable": true, "connectionType": "WIRELESS", "hasWirelessInterface": true, "deviceType": "CHARGE_PAD", "deviceModel": "powerplay", "displayName": "POWERPLAY", "extendedDisplayName": "POWERPLAY Wireless Charging System", "slotPrefix": "powerplay", "thumbnail": "pipeline://core/thumbnails/powerplay.png", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSEPAD_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO"}, "zones": [{"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": false, "lowBatteryEffect": false, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": false, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": false, "nonInteractive": false, "chargepadCompatible": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_405f", "pid": 16479, "modelId": 0, "extendedModel": 0, "serialNumber": "825247489", "path": "usb\\vid_046d&amp;pid_c53a&amp;mi_02\\8&amp;9961625&amp;1&amp;0002:6", "containerId": "", "deviceType": "CHARGE_PAD", "deviceName": "Candy companion chip", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "7.1.11", "connectionType": "WIRELESS", "hasOnboardMode": false}, {"type": "HIDIO", "id": "HID_046d_c53a_ff000001", "pid": 50490, "modelId": 0, "extendedModel": 0, "serialNumber": "", "path": "\\\\?\\HID#VID_046D&amp;PID_C53A&amp;MI_02&amp;COL01#9&amp;1F335058&amp;0&amp;0000#{4D1E55B2-F16F-11CF-88CB-001111000030}", "containerId": "e4feb25d-6ec2-11ec-a9ae-2cea7f042504", "deviceType": "INVALID_TYPE", "deviceName": "", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "", "connectionType": "USB", "hasOnboardMode": false}], "slots": {"powerplay_lighting_setting_firmware": {"id": "powerplay_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}}}}</msg>
<msg timestamp="20220120 16:09:50.996" level="INFO">${response} =  {"msgId": "a4bfde26-d652-4257-b41a-cbae8ed95249", "verb": "GET", "path": "/devices/dev00000000/info", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.google...</msg>
<status status="PASS" starttime="20220120 16:09:49.995" endtime="20220120 16:09:50.996"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220120 16:09:50.999" level="INFO">${response} = {'msgId': 'a4bfde26-d652-4257-b41a-cbae8ed95249', 'verb': 'GET', 'path': '/devices/dev00000000/info', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googlea...</msg>
<status status="PASS" starttime="20220120 16:09:50.998" endtime="20220120 16:09:50.999"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220120 16:09:51.045" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220120 16:09:51.007" endtime="20220120 16:09:51.045"/>
</kw>
<msg timestamp="20220120 16:09:51.045" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220120 16:09:51.005" endtime="20220120 16:09:51.045"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220120 16:09:51.070" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220120 16:09:51.047" endtime="20220120 16:09:51.070"/>
</kw>
<msg timestamp="20220120 16:09:51.070" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220120 16:09:51.046" endtime="20220120 16:09:51.070"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:09:51.071" endtime="20220120 16:09:51.071"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220120 16:09:51.072" endtime="20220120 16:09:51.072"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220120 16:09:51.073" endtime="20220120 16:09:51.073"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:09:51.073" endtime="20220120 16:09:51.073"/>
</kw>
<status status="PASS" starttime="20220120 16:09:51.002" endtime="20220120 16:09:51.074"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${activeInterfaces}</var>
<arg>${response}</arg>
<arg>activeInterfaces</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220120 16:09:51.152" level="INFO">${result} = [[{'type': 'DEVIO', 'id': '046d_405f', 'pid': 16479, 'modelId': 0, 'extendedModel': 0, 'serialNumber': '825247489', 'path': 'usb\\vid_046d&amp;pid_c53a&amp;mi_02\\8&amp;9961625&amp;1&amp;0002:6', 'containerId': '', 'devi...</msg>
<status status="PASS" starttime="20220120 16:09:51.076" endtime="20220120 16:09:51.152"/>
</kw>
<msg timestamp="20220120 16:09:51.154" level="INFO">${result} = [[{'type': 'DEVIO', 'id': '046d_405f', 'pid': 16479, 'modelId': 0, 'extendedModel': 0, 'serialNumber': '825247489', 'path': 'usb\\vid_046d&amp;pid_c53a&amp;mi_02\\8&amp;9961625&amp;1&amp;0002:6', 'containerId': '', 'devi...</msg>
<status status="PASS" starttime="20220120 16:09:51.075" endtime="20220120 16:09:51.154"/>
</kw>
<msg timestamp="20220120 16:09:51.154" level="INFO">${activeInterfaces} = [{'type': 'DEVIO', 'id': '046d_405f', 'pid': 16479, 'modelId': 0, 'extendedModel': 0, 'serialNumber': '825247489', 'path': 'usb\\vid_046d&amp;pid_c53a&amp;mi_02\\8&amp;9961625&amp;1&amp;0002:6', 'containerId': '', 'devic...</msg>
<status status="PASS" starttime="20220120 16:09:51.074" endtime="20220120 16:09:51.154"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${activeInterfaces}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:09:51.154" endtime="20220120 16:09:51.155"/>
</kw>
<kw name="Get From Dictionary" library="Collections">
<var>${firmware_version}</var>
<arg>${activeInterfaces}[0]</arg>
<arg>firmwareVersion</arg>
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<msg timestamp="20220120 16:09:51.156" level="INFO">${firmware_version} = 7.1.11</msg>
<status status="PASS" starttime="20220120 16:09:51.155" endtime="20220120 16:09:51.156"/>
</kw>
<msg timestamp="20220120 16:09:51.156" level="INFO">${sys_firmware} = 7.1.11</msg>
<status status="PASS" starttime="20220120 16:09:48.377" endtime="20220120 16:09:51.156"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${sys_firmware}</arg>
<arg>${device['firmware']}</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<status status="PASS" starttime="20220120 16:09:51.156" endtime="20220120 16:09:51.167"/>
</kw>
<status status="PASS" starttime="20220120 16:09:48.377" endtime="20220120 16:09:51.167"/>
</kw>
<status status="PASS" starttime="20220120 16:09:48.376" endtime="20220120 16:09:51.167"/>
</kw>
<if>
<branch type="IF" condition="&quot;on board memory mode&quot; in @{device_settings}">
<kw name="device_settings.Disable Onboard Memory Mode" library="device_settings">
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:09:51.168" endtime="20220120 16:09:51.168"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:51.167" endtime="20220120 16:09:51.168"/>
</branch>
<status status="PASS" starttime="20220120 16:09:51.167" endtime="20220120 16:09:51.168"/>
</if>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:09:56.193" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:09:51.171" endtime="20220120 16:09:56.193"/>
</kw>
<status status="FAIL" starttime="20220120 16:09:51.171" endtime="20220120 16:09:56.195"/>
</kw>
<msg timestamp="20220120 16:09:56.196" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220120 16:09:51.170" endtime="20220120 16:09:56.196"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:09:56.198" endtime="20220120 16:09:56.200"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:09:56.201" endtime="20220120 16:09:56.201"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:09:56.202" endtime="20220120 16:09:56.203"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:09:56.204" endtime="20220120 16:09:56.204"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:09:56.205" endtime="20220120 16:09:56.205"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220120 16:09:56.207" endtime="20220120 16:09:56.207"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:09:56.197" endtime="20220120 16:09:56.207"/>
</branch>
<status status="PASS" starttime="20220120 16:09:56.196" endtime="20220120 16:09:56.207"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:09:56.212" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:09:56.212" endtime="20220120 16:09:56.212"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:09:56.214" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:09:56.214" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:09:56.213" endtime="20220120 16:09:56.214"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:10:06.242" level="INFO">Failed to find element with selector: #home-view and attributes:{}</msg>
<msg timestamp="20220120 16:10:06.244" level="INFO" html="true">&lt;a href=screenshot-20220120-161006.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-161006.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:10:06.400" level="INFO">Failed to find element with selector: #home-view</msg>
<msg timestamp="20220120 16:10:06.401" level="FAIL">Failure: Selector "#home-view" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:09:56.216" endtime="20220120 16:10:06.401"/>
</kw>
<status status="FAIL" starttime="20220120 16:09:56.215" endtime="20220120 16:10:06.401"/>
</kw>
<status status="FAIL" starttime="20220120 16:09:56.210" endtime="20220120 16:10:06.401"/>
</kw>
<msg timestamp="20220120 16:10:06.402" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220120 16:09:56.209" endtime="20220120 16:10:06.402"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:10:06.402" endtime="20220120 16:10:06.403"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:10:06.404" endtime="20220120 16:10:06.420"/>
</kw>
<msg timestamp="20220120 16:10:06.421" level="INFO">${back_button_present} = True</msg>
<status status="PASS" starttime="20220120 16:10:06.403" endtime="20220120 16:10:06.421"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:10:06.422" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:10:06.421" endtime="20220120 16:10:06.422"/>
</kw>
<status status="PASS" starttime="20220120 16:09:51.170" endtime="20220120 16:10:06.422"/>
</iter>
<status status="PASS" starttime="20220120 16:09:51.170" endtime="20220120 16:10:06.422"/>
</for>
<status status="PASS" starttime="20220120 16:09:51.170" endtime="20220120 16:10:06.422"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:10:06.424" endtime="20220120 16:10:06.434"/>
</kw>
<msg timestamp="20220120 16:10:06.434" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:10:06.424" endtime="20220120 16:10:06.434"/>
</kw>
<msg timestamp="20220120 16:10:06.434" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:10:06.423" endtime="20220120 16:10:06.434"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:10:06.435" endtime="20220120 16:10:06.435"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${clicked}</var>
<arg>common.Click On Back</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:10:06.437" endtime="20220120 16:10:07.033"/>
</kw>
<status status="PASS" starttime="20220120 16:10:06.436" endtime="20220120 16:10:07.034"/>
</kw>
<msg timestamp="20220120 16:10:07.035" level="INFO">${clicked} = True</msg>
<status status="PASS" starttime="20220120 16:10:06.436" endtime="20220120 16:10:07.035"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clicked}==False</arg>
<arg>common.alerts</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:10:07.037" endtime="20220120 16:10:07.038"/>
</kw>
<status status="PASS" starttime="20220120 16:10:06.422" endtime="20220120 16:10:07.039"/>
</iter>
<iter>
<var name="${index}">1</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:10:07.048" endtime="20220120 16:10:07.075"/>
</kw>
<msg timestamp="20220120 16:10:07.075" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:10:07.046" endtime="20220120 16:10:07.075"/>
</kw>
<msg timestamp="20220120 16:10:07.076" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:10:07.043" endtime="20220120 16:10:07.076"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:10:07.077" endtime="20220120 16:10:07.077"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${clicked}</var>
<arg>common.Click On Back</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:10:07.079" endtime="20220120 16:10:07.643"/>
</kw>
<status status="PASS" starttime="20220120 16:10:07.078" endtime="20220120 16:10:07.643"/>
</kw>
<msg timestamp="20220120 16:10:07.644" level="INFO">${clicked} = True</msg>
<status status="PASS" starttime="20220120 16:10:07.078" endtime="20220120 16:10:07.644"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clicked}==False</arg>
<arg>common.alerts</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:10:07.647" endtime="20220120 16:10:07.648"/>
</kw>
<status status="PASS" starttime="20220120 16:10:07.040" endtime="20220120 16:10:07.648"/>
</iter>
<iter>
<var name="${index}">2</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:10:08.668" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220120 16:10:08.670" level="INFO" html="true">&lt;a href=screenshot-20220120-161008.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-161008.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:10:08.845" level="INFO">Failed to find element with selector: .back-button</msg>
<msg timestamp="20220120 16:10:08.846" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:10:07.654" endtime="20220120 16:10:08.846"/>
</kw>
<msg timestamp="20220120 16:10:08.846" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220120 16:10:07.653" endtime="20220120 16:10:08.846"/>
</kw>
<msg timestamp="20220120 16:10:08.846" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220120 16:10:07.650" endtime="20220120 16:10:08.846"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:10:08.847" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:10:08.847" endtime="20220120 16:10:08.847"/>
</kw>
<status status="PASS" starttime="20220120 16:10:07.649" endtime="20220120 16:10:08.847"/>
</iter>
<status status="PASS" starttime="20220120 16:10:06.422" endtime="20220120 16:10:08.848"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:10:08.850" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:10:08.849" endtime="20220120 16:10:08.850"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:10:08.850" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:10:08.850" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:10:08.850" endtime="20220120 16:10:08.850"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:10:08.852" endtime="20220120 16:10:08.866"/>
</kw>
<status status="PASS" starttime="20220120 16:10:08.851" endtime="20220120 16:10:08.866"/>
</kw>
<status status="PASS" starttime="20220120 16:10:08.849" endtime="20220120 16:10:08.867"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:10:10.886" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220120 16:10:10.888" level="INFO" html="true">&lt;a href=screenshot-20220120-161010.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-161010.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:10:11.082" level="INFO">Failed to find element with selector: .back-button</msg>
<status status="PASS" starttime="20220120 16:10:08.867" endtime="20220120 16:10:11.083"/>
</kw>
<status status="PASS" starttime="20220120 16:10:08.848" endtime="20220120 16:10:11.083"/>
</kw>
<status status="PASS" starttime="20220120 16:09:51.169" endtime="20220120 16:10:11.083"/>
</kw>
<kw name="End Test" library="logging" type="TEARDOWN">
<arg>${KEYWORD STATUS}</arg>
<doc>Ensure to Call this keyword at Teardown of all High Level Test Keywords
If Test Fails - This will capture logs and screenshots and append links to report</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}Test Status: ${test_status}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:10:11.085" endtime="20220120 16:10:11.085"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${test_status}'=='FAIL'</arg>
<arg>Get Log Files And Upload To FTPDrive</arg>
<arg>end_test</arg>
<arg>ELSE</arg>
<arg>Return From Keyword</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20220120 16:10:11.086" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220120 16:10:11.086" endtime="20220120 16:10:11.086"/>
</kw>
<status status="PASS" starttime="20220120 16:10:11.085" endtime="20220120 16:10:11.086"/>
</kw>
<status status="PASS" starttime="20220120 16:10:11.084" endtime="20220120 16:10:11.086"/>
</kw>
<status status="PASS" starttime="20220120 16:09:00.313" endtime="20220120 16:10:11.087"/>
</kw>
<status status="PASS" starttime="20220120 16:09:00.312" endtime="20220120 16:10:11.087"/>
</kw>
<tag>Device: POWERPLAY (Windows, Wired)</tag>
<tag>Device Type: POWERPLAY</tag>
<tag>Feature: device_settings</tag>
<tag>OS: Windows-10-10.0.19041-SP0</tag>
<status status="PASS" starttime="20220120 16:09:00.308" endtime="20220120 16:10:11.087"/>
</test>
<test id="s1-t9" name="Test: Verify available lighting effects for Powerplay in GHub using firmware: POWERPLAY (Windows, Wired)">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Test: Verify available lighting effects for Powerplay in GHub using firmware</arg>
<arg>{'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '405f', 'firmware': '7.1.11', 'modelId': '4405f', 'type': 'POWERPLAY', 'device_specific_features': {'lightsync': {'effect': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}}, 'connection_interfaces': {'wired': {'pid': '405f', 'productId': '405f'}}}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Test: Verify available lighting effects for Powerplay in GHub using firmware" library="powerplay_regression_system">
<arg>{'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '405f', 'firmware': '7.1.11', 'modelId': '4405f', 'type': 'POWERPLAY', 'device_specific_features': {'lightsync': {'effect': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}}, 'connection_interfaces': {'wired': {'pid': '405f', 'productId': '405f'}}}</arg>
<tag>lightsync</tag>
<doc>Select the Powerplay device in G HUB
Go to the light setting page
Select OFF / FIXED / CYCLE / BREATHING / SCREEN SAMPLER</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>"Test all available lightsync effects for POWERPLAY"</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:10:11.093" endtime="20220120 16:10:11.093"/>
</kw>
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220120 16:10:11.094" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220120 16:10:11.094" endtime="20220120 16:10:11.094"/>
</kw>
<kw name="home.Open Device Configuration" library="home_screen">
<arg>${device['displayName']}</arg>
<doc>Click on the device to open device configuration and if device introduction page opens then skip it.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device Home Screen Loaded</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device Home Screen Loaded" library="home_screen">
<arg>${device_name}</arg>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:10:16.172" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:10:11.113" endtime="20220120 16:10:16.173"/>
</kw>
<status status="FAIL" starttime="20220120 16:10:11.111" endtime="20220120 16:10:16.174"/>
</kw>
<msg timestamp="20220120 16:10:16.175" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220120 16:10:11.110" endtime="20220120 16:10:16.175"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:10:16.177" endtime="20220120 16:10:16.178"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:10:16.179" endtime="20220120 16:10:16.179"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:10:16.180" endtime="20220120 16:10:16.180"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220120 16:10:16.181" endtime="20220120 16:10:16.181"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:10:16.183" endtime="20220120 16:10:16.183"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220120 16:10:16.184" endtime="20220120 16:10:16.184"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:16.176" endtime="20220120 16:10:16.185"/>
</branch>
<status status="PASS" starttime="20220120 16:10:16.175" endtime="20220120 16:10:16.185"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:10:16.189" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:10:16.188" endtime="20220120 16:10:16.189"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:10:16.190" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:10:16.190" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:10:16.190" endtime="20220120 16:10:16.190"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:10:16.193" endtime="20220120 16:10:16.208"/>
</kw>
<status status="PASS" starttime="20220120 16:10:16.191" endtime="20220120 16:10:16.208"/>
</kw>
<status status="PASS" starttime="20220120 16:10:16.187" endtime="20220120 16:10:16.209"/>
</kw>
<msg timestamp="20220120 16:10:16.209" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220120 16:10:16.186" endtime="20220120 16:10:16.209"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:10:16.210" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:10:16.210" endtime="20220120 16:10:16.210"/>
</kw>
<status status="PASS" starttime="20220120 16:10:11.109" endtime="20220120 16:10:16.210"/>
</iter>
<status status="PASS" starttime="20220120 16:10:11.109" endtime="20220120 16:10:16.211"/>
</for>
<status status="PASS" starttime="20220120 16:10:11.109" endtime="20220120 16:10:16.211"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:10:17.223" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220120 16:10:17.224" level="INFO" html="true">&lt;a href=screenshot-20220120-161017.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-161017.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:10:17.400" level="INFO">Failed to find element with selector: .back-button</msg>
<msg timestamp="20220120 16:10:17.402" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:10:16.214" endtime="20220120 16:10:17.402"/>
</kw>
<msg timestamp="20220120 16:10:17.402" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220120 16:10:16.213" endtime="20220120 16:10:17.402"/>
</kw>
<msg timestamp="20220120 16:10:17.403" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220120 16:10:16.212" endtime="20220120 16:10:17.403"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:10:17.404" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:10:17.403" endtime="20220120 16:10:17.404"/>
</kw>
<status status="PASS" starttime="20220120 16:10:16.211" endtime="20220120 16:10:17.404"/>
</iter>
<status status="PASS" starttime="20220120 16:10:16.211" endtime="20220120 16:10:17.404"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:10:17.407" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220120 16:10:17.407" endtime="20220120 16:10:17.407"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:10:17.408" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:10:17.408" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:10:17.408" endtime="20220120 16:10:17.408"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:10:17.409" endtime="20220120 16:10:17.420"/>
</kw>
<status status="PASS" starttime="20220120 16:10:17.408" endtime="20220120 16:10:17.420"/>
</kw>
<status status="PASS" starttime="20220120 16:10:17.406" endtime="20220120 16:10:17.420"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:10:19.476" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220120 16:10:19.477" level="INFO" html="true">&lt;a href=screenshot-20220120-161019.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-161019.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:10:19.640" level="INFO">Failed to find element with selector: .back-button</msg>
<status status="PASS" starttime="20220120 16:10:17.421" endtime="20220120 16:10:19.641"/>
</kw>
<status status="PASS" starttime="20220120 16:10:17.405" endtime="20220120 16:10:19.641"/>
</kw>
<status status="PASS" starttime="20220120 16:10:11.108" endtime="20220120 16:10:19.642"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:10:19.661" level="FAIL">Failure: Selector ".left-arrow-container.disabled" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220120 16:10:19.645" endtime="20220120 16:10:19.662"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<status status="NOT RUN" starttime="20220120 16:10:19.662" endtime="20220120 16:10:19.662"/>
</kw>
<status status="FAIL" starttime="20220120 16:10:19.645" endtime="20220120 16:10:19.662"/>
</kw>
<msg timestamp="20220120 16:10:19.663" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220120 16:10:19.644" endtime="20220120 16:10:19.663"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:10:19.663" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:10:19.663" endtime="20220120 16:10:19.663"/>
</kw>
<status status="PASS" starttime="20220120 16:10:19.644" endtime="20220120 16:10:19.664"/>
</iter>
<status status="PASS" starttime="20220120 16:10:19.644" endtime="20220120 16:10:19.664"/>
</for>
<status status="PASS" starttime="20220120 16:10:19.643" endtime="20220120 16:10:19.664"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:10:21.673" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<msg timestamp="20220120 16:10:21.674" level="INFO" html="true">&lt;a href=screenshot-20220120-161021.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-161021.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:10:21.856" level="INFO">Failed to find element with selector: .right-arrow-container.disabled</msg>
<status status="PASS" starttime="20220120 16:10:19.666" endtime="20220120 16:10:21.858"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:10:23.866" level="INFO">Failed to find element with selector: .right-arrow-container.hidden and attributes:{}</msg>
<msg timestamp="20220120 16:10:23.867" level="INFO" html="true">&lt;a href=screenshot-20220120-161023.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-161023.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:10:24.050" level="INFO">Failed to find element with selector: .right-arrow-container.hidden</msg>
<status status="PASS" starttime="20220120 16:10:21.858" endtime="20220120 16:10:24.051"/>
</kw>
<status status="PASS" starttime="20220120 16:10:19.665" endtime="20220120 16:10:24.052"/>
</kw>
<msg timestamp="20220120 16:10:24.052" level="INFO">${right_scroll_present} = True</msg>
<status status="PASS" starttime="20220120 16:10:19.664" endtime="20220120 16:10:24.052"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:10:24.053" endtime="20220120 16:10:24.115"/>
</kw>
<msg timestamp="20220120 16:10:24.115" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220120 16:10:24.052" endtime="20220120 16:10:24.115"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:10:24.116" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:10:24.116" endtime="20220120 16:10:24.116"/>
</kw>
<status status="PASS" starttime="20220120 16:10:19.664" endtime="20220120 16:10:24.116"/>
</iter>
<status status="PASS" starttime="20220120 16:10:19.664" endtime="20220120 16:10:24.117"/>
</for>
<status status="PASS" starttime="20220120 16:10:19.643" endtime="20220120 16:10:24.117"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220120 16:10:29.119" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220120 16:10:24.117" endtime="20220120 16:10:29.119"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:10:29.123" endtime="20220120 16:10:29.173"/>
</kw>
<status status="PASS" starttime="20220120 16:10:29.121" endtime="20220120 16:10:29.174"/>
</kw>
<msg timestamp="20220120 16:10:29.174" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:10:29.120" endtime="20220120 16:10:29.174"/>
</kw>
<if>
<branch type="IF" condition="${status} is ${False}">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>GHUB is unable to load the device: ${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:10:29.175" endtime="20220120 16:10:29.175"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:29.174" endtime="20220120 16:10:29.175"/>
</branch>
<status status="PASS" starttime="20220120 16:10:29.174" endtime="20220120 16:10:29.175"/>
</if>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${status} is ${False}</arg>
<arg>Trigger Wake Bots</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:10:29.176" endtime="20220120 16:10:29.176"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${inactive_status}</var>
<arg>home.Is Specific Device Inactive</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Specific Device Inactive" library="home_screen">
<arg>${device_name}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>${home_device_inactive_device_name}${device_name}${home_device_inactive_device_icon}</arg>
<arg>3</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:10:32.189" level="FAIL">Failure: Selector "//h2[contains(text(),"POWERPLAY")]//following-sibling::div[contains(text(), "INACTIVE")]" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:10:29.180" endtime="20220120 16:10:32.190"/>
</kw>
<status status="FAIL" starttime="20220120 16:10:29.178" endtime="20220120 16:10:32.190"/>
</kw>
<msg timestamp="20220120 16:10:32.191" level="INFO">${inactive_status} = False</msg>
<status status="PASS" starttime="20220120 16:10:29.177" endtime="20220120 16:10:32.191"/>
</kw>
<if>
<branch type="IF" condition="${inactive_status}">
<kw name="Trigger Wake Bots" library="home_screen">
<status status="NOT RUN" starttime="20220120 16:10:32.192" endtime="20220120 16:10:32.193"/>
</kw>
<kw name="home.Restart GHUB Till Device Get Load" library="home_screen">
<arg>${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:10:32.194" endtime="20220120 16:10:32.194"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:10:32.196" endtime="20220120 16:10:32.196"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_loaded}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220120 16:10:32.197" endtime="20220120 16:10:32.197"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${device_loaded} is ${True}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20220120 16:10:32.198" endtime="20220120 16:10:32.198"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${inactive_status}</var>
<arg>home.Is Specific Device Inactive</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220120 16:10:32.200" endtime="20220120 16:10:32.200"/>
</kw>
<if>
<branch type="IF" condition="${inactive_status}">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>GHUB is unable to load the device: ${device_name}</arg>
<status status="NOT RUN" starttime="20220120 16:10:32.200" endtime="20220120 16:10:32.200"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:32.200" endtime="20220120 16:10:32.200"/>
</branch>
<status status="NOT RUN" starttime="20220120 16:10:32.200" endtime="20220120 16:10:32.201"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220120 16:10:32.201" endtime="20220120 16:10:32.201"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${device_loaded} is ${False} or ${inactive_status} is ${True} or ${device_reflected_on_ui} is ${False}</arg>
<arg>home.Reconnect Device Till Device Get Load</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20220120 16:10:32.203" endtime="20220120 16:10:32.203"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:32.191" endtime="20220120 16:10:32.203"/>
</branch>
<status status="PASS" starttime="20220120 16:10:32.191" endtime="20220120 16:10:32.203"/>
</if>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:10:32.224" level="FAIL">Failure: Selector ".left-arrow-container.disabled" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220120 16:10:32.208" endtime="20220120 16:10:32.224"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<status status="NOT RUN" starttime="20220120 16:10:32.224" endtime="20220120 16:10:32.224"/>
</kw>
<status status="FAIL" starttime="20220120 16:10:32.207" endtime="20220120 16:10:32.225"/>
</kw>
<msg timestamp="20220120 16:10:32.225" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220120 16:10:32.206" endtime="20220120 16:10:32.225"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:10:32.226" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:10:32.225" endtime="20220120 16:10:32.226"/>
</kw>
<status status="PASS" starttime="20220120 16:10:32.206" endtime="20220120 16:10:32.226"/>
</iter>
<status status="PASS" starttime="20220120 16:10:32.205" endtime="20220120 16:10:32.226"/>
</for>
<status status="PASS" starttime="20220120 16:10:32.205" endtime="20220120 16:10:32.226"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:10:34.292" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<msg timestamp="20220120 16:10:34.293" level="INFO" html="true">&lt;a href=screenshot-20220120-161034.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-161034.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:10:34.485" level="INFO">Failed to find element with selector: .right-arrow-container.disabled</msg>
<status status="PASS" starttime="20220120 16:10:32.229" endtime="20220120 16:10:34.486"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220120 16:10:36.549" level="INFO">Failed to find element with selector: .right-arrow-container.hidden and attributes:{}</msg>
<msg timestamp="20220120 16:10:36.550" level="INFO" html="true">&lt;a href=screenshot-20220120-161036.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-161036.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:10:36.731" level="INFO">Failed to find element with selector: .right-arrow-container.hidden</msg>
<status status="PASS" starttime="20220120 16:10:34.487" endtime="20220120 16:10:36.732"/>
</kw>
<status status="PASS" starttime="20220120 16:10:32.228" endtime="20220120 16:10:36.733"/>
</kw>
<msg timestamp="20220120 16:10:36.733" level="INFO">${right_scroll_present} = True</msg>
<status status="PASS" starttime="20220120 16:10:32.227" endtime="20220120 16:10:36.733"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:10:36.734" endtime="20220120 16:10:36.770"/>
</kw>
<msg timestamp="20220120 16:10:36.770" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220120 16:10:36.734" endtime="20220120 16:10:36.770"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220120 16:10:36.771" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220120 16:10:36.771" endtime="20220120 16:10:36.771"/>
</kw>
<status status="PASS" starttime="20220120 16:10:32.227" endtime="20220120 16:10:36.771"/>
</iter>
<status status="PASS" starttime="20220120 16:10:32.226" endtime="20220120 16:10:36.771"/>
</for>
<status status="PASS" starttime="20220120 16:10:32.204" endtime="20220120 16:10:36.772"/>
</kw>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220120 16:10:36.773" endtime="20220120 16:10:36.796"/>
</kw>
<status status="PASS" starttime="20220120 16:10:36.772" endtime="20220120 16:10:36.796"/>
</kw>
<status status="PASS" starttime="20220120 16:10:11.108" endtime="20220120 16:10:36.796"/>
</kw>
<msg timestamp="20220120 16:10:36.797" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:10:11.107" endtime="20220120 16:10:36.797"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'False'">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>${device_name} not loaded in GHub.</arg>
<status status="NOT RUN" starttime="20220120 16:10:36.797" endtime="20220120 16:10:36.797"/>
</kw>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220120 16:10:36.798" endtime="20220120 16:10:36.798"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:36.797" endtime="20220120 16:10:36.798"/>
</branch>
<status status="PASS" starttime="20220120 16:10:36.797" endtime="20220120 16:10:36.798"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${inactive}</var>
<arg>home.Is Specific Device Inactive</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Specific Device Inactive" library="home_screen">
<arg>${device_name}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>${home_device_inactive_device_name}${device_name}${home_device_inactive_device_icon}</arg>
<arg>3</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:10:39.815" level="FAIL">Failure: Selector "//h2[contains(text(),"POWERPLAY")]//following-sibling::div[contains(text(), "INACTIVE")]" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:10:36.800" endtime="20220120 16:10:39.815"/>
</kw>
<status status="FAIL" starttime="20220120 16:10:36.799" endtime="20220120 16:10:39.816"/>
</kw>
<msg timestamp="20220120 16:10:39.816" level="INFO">${inactive} = False</msg>
<status status="PASS" starttime="20220120 16:10:36.798" endtime="20220120 16:10:39.816"/>
</kw>
<if>
<branch type="IF" condition="${inactive}">
<kw name="Sleep" library="BuiltIn">
<arg>20</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220120 16:10:39.817" endtime="20220120 16:10:39.817"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:39.816" endtime="20220120 16:10:39.817"/>
</branch>
<status status="PASS" starttime="20220120 16:10:39.816" endtime="20220120 16:10:39.817"/>
</if>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:10:39.817" endtime="20220120 16:10:40.440"/>
</kw>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220120 16:10:42.471" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220120 16:10:42.472" level="INFO" html="true">&lt;a href=screenshot-20220120-161042.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=screenshot-20220120-161042.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220120 16:10:42.614" level="INFO">Failed to find element with selector: .splash-screen-skip-button</msg>
<msg timestamp="20220120 16:10:42.614" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:10:40.442" endtime="20220120 16:10:42.614"/>
</kw>
<status status="PASS" starttime="20220120 16:10:40.441" endtime="20220120 16:10:42.615"/>
</kw>
<status status="PASS" starttime="20220120 16:10:40.441" endtime="20220120 16:10:42.615"/>
</kw>
<kw name="device_view.Handle Got It Popup" library="device_main_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${got_it_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_got_it_button}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_got_it_button}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220120 16:10:47.628" level="FAIL">Failure: Selector "//div[@class='coach-mark']/button[text()='GOT IT']" is Not Loaded</msg>
<status status="FAIL" starttime="20220120 16:10:42.617" endtime="20220120 16:10:47.629"/>
</kw>
<msg timestamp="20220120 16:10:47.629" level="INFO">${got_it_button_present} = False</msg>
<status status="PASS" starttime="20220120 16:10:42.616" endtime="20220120 16:10:47.629"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${got_it_button_present} is ${False}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220120 16:10:47.630" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220120 16:10:47.629" endtime="20220120 16:10:47.630"/>
</kw>
<status status="PASS" starttime="20220120 16:10:42.616" endtime="20220120 16:10:47.630"/>
</kw>
<status status="PASS" starttime="20220120 16:10:11.096" endtime="20220120 16:10:47.630"/>
</kw>
<kw name="device_view.Click On LightSync Tab" library="device_main_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${device_view_lightsync_tab}</arg>
<arg>10</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220120 16:10:47.632" level="INFO">${words} = ['.icon-wrapper.lighting']</msg>
<status status="PASS" starttime="20220120 16:10:47.632" endtime="20220120 16:10:47.632"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220120 16:10:47.633" level="INFO">Length is 1</msg>
<msg timestamp="20220120 16:10:47.633" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220120 16:10:47.633" endtime="20220120 16:10:47.633"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:10:47.634" endtime="20220120 16:10:48.223"/>
</kw>
<status status="PASS" starttime="20220120 16:10:47.634" endtime="20220120 16:10:48.223"/>
</kw>
<status status="PASS" starttime="20220120 16:10:47.631" endtime="20220120 16:10:48.223"/>
</kw>
<status status="PASS" starttime="20220120 16:10:47.631" endtime="20220120 16:10:48.223"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>@{effect_list}</var>
<arg>${device['device_specific_features']['lightsync']['effect']}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220120 16:10:48.233" level="INFO">@{effect_list} = [ fixed | cycle | breathing | screen sampler | audio visualizer ]</msg>
<status status="PASS" starttime="20220120 16:10:48.224" endtime="20220120 16:10:48.233"/>
</kw>
<for flavor="IN">
<var>${effect}</var>
<value>@{effect_list}</value>
<iter>
<var name="${effect}">fixed</var>
<kw name="Convert To Upper Case" library="String">
<var>${effect}</var>
<arg>${effect}</arg>
<doc>Converts string to upper case.</doc>
<msg timestamp="20220120 16:10:48.234" level="INFO">${effect} = FIXED</msg>
<status status="PASS" starttime="20220120 16:10:48.233" endtime="20220120 16:10:48.234"/>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<arg>${is_mac} is ${True} and '${effect}'=='AUDIO VISUALIZER'</arg>
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:10:48.234" endtime="20220120 16:10:48.235"/>
</kw>
<kw name="lightsync.Change lightsync effect to" library="lightsync">
<arg>${effect}</arg>
<doc>Selects an effect from the dropdown and verifies its config options</doc>
<kw name="light_sync.Click On Effect Dropdown" library="light_sync_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:10:48.238" endtime="20220120 16:10:48.785"/>
</kw>
<status status="PASS" starttime="20220120 16:10:48.237" endtime="20220120 16:10:48.785"/>
</kw>
<kw name="light_sync.Select Effect From Dropdown" library="light_sync_screen">
<arg>${effect}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown_item}</arg>
<arg>innerText=${effect}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:10:48.788" endtime="20220120 16:10:49.395"/>
</kw>
<status status="PASS" starttime="20220120 16:10:48.786" endtime="20220120 16:10:49.395"/>
</kw>
<status status="PASS" starttime="20220120 16:10:48.236" endtime="20220120 16:10:49.395"/>
</kw>
<kw name="firmware.Verify lightsync effect" library="firmware">
<arg>${effect}</arg>
<arg>${device}</arg>
<doc>Verify the light sync effect set using cdevio</doc>
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220120 16:10:49.397" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220120 16:10:49.397" endtime="20220120 16:10:49.397"/>
</kw>
<if>
<branch type="IF" condition="'${effect}' == 'OFF'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['productId']}</arg>
<arg>primary</arg>
<arg>off</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:49.398" endtime="20220120 16:10:49.398"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:49.398" endtime="20220120 16:10:49.398"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'FIXED'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['productId']}</arg>
<arg>primary</arg>
<arg>fixed</arg>
<arg>${device['displayName']}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Zone Lighting Effect</arg>
<arg>pid=${firmware_pid}</arg>
<arg>zone=${zone}</arg>
<arg>lightingEffect=${lighting_effect}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Zone Lighting Effect" library="libraries.cdevio.device">
<arg>pid=${firmware_pid}</arg>
<arg>zone=${zone}</arg>
<arg>lightingEffect=${lighting_effect}</arg>
<msg timestamp="20220120 16:10:50.621" level="INFO">405f
primary
fixed
D:\GitRepos\Logitech\gerty\tools\python\mindstorm\bin\windows/cdevio.exe -json 405f
b'{\r\n\t"currentColor" : \r\n\t{\r\n\t\t"0" : \r\n\t\t{\r\n\t\t\t"B_value" : 255,\r\n\t\t\t"G_value" : 255,\r\n\t\t\t"R_value" : 0\r\n\t\t}\r\n\t},\r\n\t"deviceName" : "Candy companion chip",\r\n\t"extendedmodelid" : "0x0",\r\n\t"firmware" : "7.1.11",\r\n\t"modelId" : "4405f",\r\n\t"modelId_ext" : "4405f",\r\n\t"pid" : "405f",\r\n\t"productId" : "0x405f",\r\n\t"startUpEffect" : "Disable",\r\n\t"type" : "TOUCHPAD",\r\n\t"zoneCount" : 1,\r\n\t"zoneEffect" : \r\n\t{\r\n\t\t"0" : \r\n\t\t{\r\n\t\t\t"B" : 255,\r\n\t\t\t"G" : 255,\r\n\t\t\t"R" : 0,\r\n\t\t\t"effect" : "fixed"\r\n\t\t}\r\n\t}\r\n}'
{'currentColor': {'0': {'B_value': 255, 'G_value': 255, 'R_value': 0}}, 'deviceName': 'Candy companion chip', 'extendedmodelid': '0x0', 'firmware': '7.1.11', 'modelId': '4405f', 'modelId_ext': '4405f', 'pid': '405f', 'productId': '0x405f', 'startUpEffect': 'Disable', 'type': 'TOUCHPAD', 'zoneCount': 1, 'zoneEffect': {'0': {'B': 255, 'G': 255, 'R': 0, 'effect': 'fixed'}}}
{'currentColor': {'0': {'B_value': 255, 'G_value': 255, 'R_value': 0}}, 'deviceName': 'Candy companion chip', 'extendedmodelid': '0x0', 'firmware': '7.1.11', 'modelId': '4405f', 'modelId_ext': '4405f', 'pid': '405f', 'productId': '0x405f', 'startUpEffect': 'Disable', 'type': 'TOUCHPAD', 'zoneCount': 1, 'zoneEffect': {'0': {'B': 255, 'G': 255, 'R': 0, 'effect': 'fixed'}}}
fixed
fixed</msg>
<status status="PASS" starttime="20220120 16:10:49.423" endtime="20220120 16:10:50.622"/>
</kw>
<msg timestamp="20220120 16:10:50.622" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:10:49.421" endtime="20220120 16:10:50.622"/>
</kw>
<if>
<branch type="IF" condition="${status}==False and &quot;${onboard}&quot;==&quot;${None}&quot;">
<kw name="Convert To Upper Case" library="String">
<var>${lighting_effect}</var>
<arg>${lighting_effect}</arg>
<doc>Converts string to upper case.</doc>
<status status="NOT RUN" starttime="20220120 16:10:50.623" endtime="20220120 16:10:50.623"/>
</kw>
<kw name="backend.Expect Zone Lighting Effect" library="backend">
<arg>${device_name}</arg>
<arg>${lighting_effect}</arg>
<status status="NOT RUN" starttime="20220120 16:10:50.623" endtime="20220120 16:10:50.624"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:50.622" endtime="20220120 16:10:50.624"/>
</branch>
<status status="PASS" starttime="20220120 16:10:50.622" endtime="20220120 16:10:50.624"/>
</if>
<status status="PASS" starttime="20220120 16:10:49.400" endtime="20220120 16:10:50.624"/>
</kw>
<status status="PASS" starttime="20220120 16:10:49.398" endtime="20220120 16:10:50.624"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'CYCLE'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['productId']}</arg>
<arg>primary</arg>
<arg>cycle</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:50.625" endtime="20220120 16:10:50.625"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:50.624" endtime="20220120 16:10:50.625"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'BREATHING'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['pid']}</arg>
<arg>primary</arg>
<arg>breathing</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:50.625" endtime="20220120 16:10:50.625"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:50.625" endtime="20220120 16:10:50.625"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'SCREEN SAMPLER'">
<kw name="Log To Console" library="BuiltIn">
<arg>Firmware based SCREEN SAMPLER effect verification to be implemnted</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20220120 16:10:50.626" endtime="20220120 16:10:50.626"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:50.626" endtime="20220120 16:10:50.626"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'AUDIO VISUALIZER' and ${is_mac} is ${False}">
<kw name="Log To Console" library="BuiltIn">
<arg>Firmware based AUDIO VISUALIZER effect verification to be implemnted</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20220120 16:10:50.626" endtime="20220120 16:10:50.627"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:50.626" endtime="20220120 16:10:50.627"/>
</branch>
<branch type="ELSE">
<kw name="LOG WARNING" library="logging">
<arg>${effect} verification not handled</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:10:50.627" endtime="20220120 16:10:50.627"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:50.627" endtime="20220120 16:10:50.627"/>
</branch>
<status status="PASS" starttime="20220120 16:10:49.397" endtime="20220120 16:10:50.627"/>
</if>
<status status="PASS" starttime="20220120 16:10:49.396" endtime="20220120 16:10:50.627"/>
</kw>
<status status="PASS" starttime="20220120 16:10:48.233" endtime="20220120 16:10:50.627"/>
</iter>
<iter>
<var name="${effect}">cycle</var>
<kw name="Convert To Upper Case" library="String">
<var>${effect}</var>
<arg>${effect}</arg>
<doc>Converts string to upper case.</doc>
<msg timestamp="20220120 16:10:50.628" level="INFO">${effect} = CYCLE</msg>
<status status="PASS" starttime="20220120 16:10:50.628" endtime="20220120 16:10:50.628"/>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<arg>${is_mac} is ${True} and '${effect}'=='AUDIO VISUALIZER'</arg>
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:10:50.629" endtime="20220120 16:10:50.629"/>
</kw>
<kw name="lightsync.Change lightsync effect to" library="lightsync">
<arg>${effect}</arg>
<doc>Selects an effect from the dropdown and verifies its config options</doc>
<kw name="light_sync.Click On Effect Dropdown" library="light_sync_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:10:50.631" endtime="20220120 16:10:51.164"/>
</kw>
<status status="PASS" starttime="20220120 16:10:50.630" endtime="20220120 16:10:51.164"/>
</kw>
<kw name="light_sync.Select Effect From Dropdown" library="light_sync_screen">
<arg>${effect}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown_item}</arg>
<arg>innerText=${effect}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:10:51.166" endtime="20220120 16:10:51.757"/>
</kw>
<status status="PASS" starttime="20220120 16:10:51.165" endtime="20220120 16:10:51.757"/>
</kw>
<status status="PASS" starttime="20220120 16:10:50.630" endtime="20220120 16:10:51.757"/>
</kw>
<kw name="firmware.Verify lightsync effect" library="firmware">
<arg>${effect}</arg>
<arg>${device}</arg>
<doc>Verify the light sync effect set using cdevio</doc>
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220120 16:10:51.760" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220120 16:10:51.760" endtime="20220120 16:10:51.760"/>
</kw>
<if>
<branch type="IF" condition="'${effect}' == 'OFF'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['productId']}</arg>
<arg>primary</arg>
<arg>off</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:51.762" endtime="20220120 16:10:51.762"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:51.761" endtime="20220120 16:10:51.763"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'FIXED'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['productId']}</arg>
<arg>primary</arg>
<arg>fixed</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:51.764" endtime="20220120 16:10:51.764"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:51.763" endtime="20220120 16:10:51.764"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'CYCLE'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['productId']}</arg>
<arg>primary</arg>
<arg>cycle</arg>
<arg>${device['displayName']}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Zone Lighting Effect</arg>
<arg>pid=${firmware_pid}</arg>
<arg>zone=${zone}</arg>
<arg>lightingEffect=${lighting_effect}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Zone Lighting Effect" library="libraries.cdevio.device">
<arg>pid=${firmware_pid}</arg>
<arg>zone=${zone}</arg>
<arg>lightingEffect=${lighting_effect}</arg>
<msg timestamp="20220120 16:10:52.985" level="INFO">405f
primary
cycle
D:\GitRepos\Logitech\gerty\tools\python\mindstorm\bin\windows/cdevio.exe -json 405f
b'{\r\n\t"currentColor" : \r\n\t{\r\n\t\t"0" : \r\n\t\t{\r\n\t\t\t"B_value" : 0,\r\n\t\t\t"G_value" : 255,\r\n\t\t\t"R_value" : 0\r\n\t\t}\r\n\t},\r\n\t"deviceName" : "Candy companion chip",\r\n\t"extendedmodelid" : "0x0",\r\n\t"firmware" : "7.1.11",\r\n\t"modelId" : "4405f",\r\n\t"modelId_ext" : "4405f",\r\n\t"pid" : "405f",\r\n\t"productId" : "0x405f",\r\n\t"startUpEffect" : "Disable",\r\n\t"type" : "TOUCHPAD",\r\n\t"zoneCount" : 1,\r\n\t"zoneEffect" : \r\n\t{\r\n\t\t"0" : \r\n\t\t{\r\n\t\t\t"brightness" : 100,\r\n\t\t\t"effect" : "cycle",\r\n\t\t\t"rate" : 5000\r\n\t\t}\r\n\t}\r\n}'
{'currentColor': {'0': {'B_value': 0, 'G_value': 255, 'R_value': 0}}, 'deviceName': 'Candy companion chip', 'extendedmodelid': '0x0', 'firmware': '7.1.11', 'modelId': '4405f', 'modelId_ext': '4405f', 'pid': '405f', 'productId': '0x405f', 'startUpEffect': 'Disable', 'type': 'TOUCHPAD', 'zoneCount': 1, 'zoneEffect': {'0': {'brightness': 100, 'effect': 'cycle', 'rate': 5000}}}
{'currentColor': {'0': {'B_value': 0, 'G_value': 255, 'R_value': 0}}, 'deviceName': 'Candy companion chip', 'extendedmodelid': '0x0', 'firmware': '7.1.11', 'modelId': '4405f', 'modelId_ext': '4405f', 'pid': '405f', 'productId': '0x405f', 'startUpEffect': 'Disable', 'type': 'TOUCHPAD', 'zoneCount': 1, 'zoneEffect': {'0': {'brightness': 100, 'effect': 'cycle', 'rate': 5000}}}
cycle
cycle</msg>
<status status="PASS" starttime="20220120 16:10:51.790" endtime="20220120 16:10:52.985"/>
</kw>
<msg timestamp="20220120 16:10:52.985" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:10:51.790" endtime="20220120 16:10:52.985"/>
</kw>
<if>
<branch type="IF" condition="${status}==False and &quot;${onboard}&quot;==&quot;${None}&quot;">
<kw name="Convert To Upper Case" library="String">
<var>${lighting_effect}</var>
<arg>${lighting_effect}</arg>
<doc>Converts string to upper case.</doc>
<status status="NOT RUN" starttime="20220120 16:10:52.986" endtime="20220120 16:10:52.986"/>
</kw>
<kw name="backend.Expect Zone Lighting Effect" library="backend">
<arg>${device_name}</arg>
<arg>${lighting_effect}</arg>
<status status="NOT RUN" starttime="20220120 16:10:52.987" endtime="20220120 16:10:52.987"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:52.985" endtime="20220120 16:10:52.987"/>
</branch>
<status status="PASS" starttime="20220120 16:10:52.985" endtime="20220120 16:10:52.987"/>
</if>
<status status="PASS" starttime="20220120 16:10:51.765" endtime="20220120 16:10:52.987"/>
</kw>
<status status="PASS" starttime="20220120 16:10:51.764" endtime="20220120 16:10:52.987"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'BREATHING'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['pid']}</arg>
<arg>primary</arg>
<arg>breathing</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:52.988" endtime="20220120 16:10:52.988"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:52.988" endtime="20220120 16:10:52.988"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'SCREEN SAMPLER'">
<kw name="Log To Console" library="BuiltIn">
<arg>Firmware based SCREEN SAMPLER effect verification to be implemnted</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20220120 16:10:52.989" endtime="20220120 16:10:52.989"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:52.988" endtime="20220120 16:10:52.989"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'AUDIO VISUALIZER' and ${is_mac} is ${False}">
<kw name="Log To Console" library="BuiltIn">
<arg>Firmware based AUDIO VISUALIZER effect verification to be implemnted</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20220120 16:10:52.989" endtime="20220120 16:10:52.989"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:52.989" endtime="20220120 16:10:52.989"/>
</branch>
<branch type="ELSE">
<kw name="LOG WARNING" library="logging">
<arg>${effect} verification not handled</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:10:52.990" endtime="20220120 16:10:52.990"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:52.989" endtime="20220120 16:10:52.990"/>
</branch>
<status status="PASS" starttime="20220120 16:10:51.761" endtime="20220120 16:10:52.990"/>
</if>
<status status="PASS" starttime="20220120 16:10:51.758" endtime="20220120 16:10:52.990"/>
</kw>
<status status="PASS" starttime="20220120 16:10:50.628" endtime="20220120 16:10:52.990"/>
</iter>
<iter>
<var name="${effect}">breathing</var>
<kw name="Convert To Upper Case" library="String">
<var>${effect}</var>
<arg>${effect}</arg>
<doc>Converts string to upper case.</doc>
<msg timestamp="20220120 16:10:52.991" level="INFO">${effect} = BREATHING</msg>
<status status="PASS" starttime="20220120 16:10:52.991" endtime="20220120 16:10:52.991"/>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<arg>${is_mac} is ${True} and '${effect}'=='AUDIO VISUALIZER'</arg>
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:10:52.991" endtime="20220120 16:10:52.992"/>
</kw>
<kw name="lightsync.Change lightsync effect to" library="lightsync">
<arg>${effect}</arg>
<doc>Selects an effect from the dropdown and verifies its config options</doc>
<kw name="light_sync.Click On Effect Dropdown" library="light_sync_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:10:52.995" endtime="20220120 16:10:53.533"/>
</kw>
<status status="PASS" starttime="20220120 16:10:52.994" endtime="20220120 16:10:53.533"/>
</kw>
<kw name="light_sync.Select Effect From Dropdown" library="light_sync_screen">
<arg>${effect}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown_item}</arg>
<arg>innerText=${effect}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:10:53.535" endtime="20220120 16:10:54.125"/>
</kw>
<status status="PASS" starttime="20220120 16:10:53.534" endtime="20220120 16:10:54.126"/>
</kw>
<status status="PASS" starttime="20220120 16:10:52.993" endtime="20220120 16:10:54.127"/>
</kw>
<kw name="firmware.Verify lightsync effect" library="firmware">
<arg>${effect}</arg>
<arg>${device}</arg>
<doc>Verify the light sync effect set using cdevio</doc>
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220120 16:10:54.134" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220120 16:10:54.133" endtime="20220120 16:10:54.134"/>
</kw>
<if>
<branch type="IF" condition="'${effect}' == 'OFF'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['productId']}</arg>
<arg>primary</arg>
<arg>off</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:54.137" endtime="20220120 16:10:54.137"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:54.135" endtime="20220120 16:10:54.137"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'FIXED'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['productId']}</arg>
<arg>primary</arg>
<arg>fixed</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:54.139" endtime="20220120 16:10:54.139"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:54.137" endtime="20220120 16:10:54.140"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'CYCLE'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['productId']}</arg>
<arg>primary</arg>
<arg>cycle</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:54.142" endtime="20220120 16:10:54.142"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:54.140" endtime="20220120 16:10:54.143"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'BREATHING'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['pid']}</arg>
<arg>primary</arg>
<arg>breathing</arg>
<arg>${device['displayName']}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Zone Lighting Effect</arg>
<arg>pid=${firmware_pid}</arg>
<arg>zone=${zone}</arg>
<arg>lightingEffect=${lighting_effect}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Zone Lighting Effect" library="libraries.cdevio.device">
<arg>pid=${firmware_pid}</arg>
<arg>zone=${zone}</arg>
<arg>lightingEffect=${lighting_effect}</arg>
<msg timestamp="20220120 16:10:55.379" level="INFO">405f
primary
breathing
D:\GitRepos\Logitech\gerty\tools\python\mindstorm\bin\windows/cdevio.exe -json 405f
b'{\r\n\t"currentColor" : \r\n\t{\r\n\t\t"0" : \r\n\t\t{\r\n\t\t\t"B_value" : 172,\r\n\t\t\t"G_value" : 172,\r\n\t\t\t"R_value" : 0\r\n\t\t}\r\n\t},\r\n\t"deviceName" : "Candy companion chip",\r\n\t"extendedmodelid" : "0x0",\r\n\t"firmware" : "7.1.11",\r\n\t"modelId" : "4405f",\r\n\t"modelId_ext" : "4405f",\r\n\t"pid" : "405f",\r\n\t"productId" : "0x405f",\r\n\t"startUpEffect" : "Disable",\r\n\t"type" : "TOUCHPAD",\r\n\t"zoneCount" : 1,\r\n\t"zoneEffect" : \r\n\t{\r\n\t\t"0" : \r\n\t\t{\r\n\t\t\t"B" : 255,\r\n\t\t\t"G" : 255,\r\n\t\t\t"R" : 0,\r\n\t\t\t"brightness" : 100,\r\n\t\t\t"effect" : "breathing",\r\n\t\t\t"rate" : 5000\r\n\t\t}\r\n\t}\r\n}'
{'currentColor': {'0': {'B_value': 172, 'G_value': 172, 'R_value': 0}}, 'deviceName': 'Candy companion chip', 'extendedmodelid': '0x0', 'firmware': '7.1.11', 'modelId': '4405f', 'modelId_ext': '4405f', 'pid': '405f', 'productId': '0x405f', 'startUpEffect': 'Disable', 'type': 'TOUCHPAD', 'zoneCount': 1, 'zoneEffect': {'0': {'B': 255, 'G': 255, 'R': 0, 'brightness': 100, 'effect': 'breathing', 'rate': 5000}}}
{'currentColor': {'0': {'B_value': 172, 'G_value': 172, 'R_value': 0}}, 'deviceName': 'Candy companion chip', 'extendedmodelid': '0x0', 'firmware': '7.1.11', 'modelId': '4405f', 'modelId_ext': '4405f', 'pid': '405f', 'productId': '0x405f', 'startUpEffect': 'Disable', 'type': 'TOUCHPAD', 'zoneCount': 1, 'zoneEffect': {'0': {'B': 255, 'G': 255, 'R': 0, 'brightness': 100, 'effect': 'breathing', 'rate': 5000}}}
breathing
breathing</msg>
<status status="PASS" starttime="20220120 16:10:54.173" endtime="20220120 16:10:55.379"/>
</kw>
<msg timestamp="20220120 16:10:55.380" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220120 16:10:54.173" endtime="20220120 16:10:55.380"/>
</kw>
<if>
<branch type="IF" condition="${status}==False and &quot;${onboard}&quot;==&quot;${None}&quot;">
<kw name="Convert To Upper Case" library="String">
<var>${lighting_effect}</var>
<arg>${lighting_effect}</arg>
<doc>Converts string to upper case.</doc>
<status status="NOT RUN" starttime="20220120 16:10:55.381" endtime="20220120 16:10:55.381"/>
</kw>
<kw name="backend.Expect Zone Lighting Effect" library="backend">
<arg>${device_name}</arg>
<arg>${lighting_effect}</arg>
<status status="NOT RUN" starttime="20220120 16:10:55.381" endtime="20220120 16:10:55.381"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:55.380" endtime="20220120 16:10:55.381"/>
</branch>
<status status="PASS" starttime="20220120 16:10:55.380" endtime="20220120 16:10:55.382"/>
</if>
<status status="PASS" starttime="20220120 16:10:54.146" endtime="20220120 16:10:55.382"/>
</kw>
<status status="PASS" starttime="20220120 16:10:54.143" endtime="20220120 16:10:55.382"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'SCREEN SAMPLER'">
<kw name="Log To Console" library="BuiltIn">
<arg>Firmware based SCREEN SAMPLER effect verification to be implemnted</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20220120 16:10:55.382" endtime="20220120 16:10:55.382"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:55.382" endtime="20220120 16:10:55.382"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'AUDIO VISUALIZER' and ${is_mac} is ${False}">
<kw name="Log To Console" library="BuiltIn">
<arg>Firmware based AUDIO VISUALIZER effect verification to be implemnted</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20220120 16:10:55.383" endtime="20220120 16:10:55.383"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:55.383" endtime="20220120 16:10:55.383"/>
</branch>
<branch type="ELSE">
<kw name="LOG WARNING" library="logging">
<arg>${effect} verification not handled</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:10:55.383" endtime="20220120 16:10:55.383"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:55.383" endtime="20220120 16:10:55.383"/>
</branch>
<status status="PASS" starttime="20220120 16:10:54.134" endtime="20220120 16:10:55.384"/>
</if>
<status status="PASS" starttime="20220120 16:10:54.130" endtime="20220120 16:10:55.384"/>
</kw>
<status status="PASS" starttime="20220120 16:10:52.990" endtime="20220120 16:10:55.384"/>
</iter>
<iter>
<var name="${effect}">screen sampler</var>
<kw name="Convert To Upper Case" library="String">
<var>${effect}</var>
<arg>${effect}</arg>
<doc>Converts string to upper case.</doc>
<msg timestamp="20220120 16:10:55.385" level="INFO">${effect} = SCREEN SAMPLER</msg>
<status status="PASS" starttime="20220120 16:10:55.385" endtime="20220120 16:10:55.385"/>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<arg>${is_mac} is ${True} and '${effect}'=='AUDIO VISUALIZER'</arg>
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:10:55.385" endtime="20220120 16:10:55.386"/>
</kw>
<kw name="lightsync.Change lightsync effect to" library="lightsync">
<arg>${effect}</arg>
<doc>Selects an effect from the dropdown and verifies its config options</doc>
<kw name="light_sync.Click On Effect Dropdown" library="light_sync_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:10:55.388" endtime="20220120 16:10:55.935"/>
</kw>
<status status="PASS" starttime="20220120 16:10:55.388" endtime="20220120 16:10:55.936"/>
</kw>
<kw name="light_sync.Select Effect From Dropdown" library="light_sync_screen">
<arg>${effect}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown_item}</arg>
<arg>innerText=${effect}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:10:55.941" endtime="20220120 16:10:56.571"/>
</kw>
<status status="PASS" starttime="20220120 16:10:55.938" endtime="20220120 16:10:56.572"/>
</kw>
<status status="PASS" starttime="20220120 16:10:55.386" endtime="20220120 16:10:56.572"/>
</kw>
<kw name="firmware.Verify lightsync effect" library="firmware">
<arg>${effect}</arg>
<arg>${device}</arg>
<doc>Verify the light sync effect set using cdevio</doc>
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220120 16:10:56.576" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220120 16:10:56.576" endtime="20220120 16:10:56.576"/>
</kw>
<if>
<branch type="IF" condition="'${effect}' == 'OFF'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['productId']}</arg>
<arg>primary</arg>
<arg>off</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:56.578" endtime="20220120 16:10:56.579"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:56.577" endtime="20220120 16:10:56.579"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'FIXED'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['productId']}</arg>
<arg>primary</arg>
<arg>fixed</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:56.581" endtime="20220120 16:10:56.581"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:56.580" endtime="20220120 16:10:56.582"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'CYCLE'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['productId']}</arg>
<arg>primary</arg>
<arg>cycle</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:56.583" endtime="20220120 16:10:56.584"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:56.583" endtime="20220120 16:10:56.584"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'BREATHING'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['pid']}</arg>
<arg>primary</arg>
<arg>breathing</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:56.586" endtime="20220120 16:10:56.586"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:56.584" endtime="20220120 16:10:56.586"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'SCREEN SAMPLER'">
<kw name="Log To Console" library="BuiltIn">
<arg>Firmware based SCREEN SAMPLER effect verification to be implemnted</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:10:56.587" endtime="20220120 16:10:56.588"/>
</kw>
<status status="PASS" starttime="20220120 16:10:56.586" endtime="20220120 16:10:56.588"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'AUDIO VISUALIZER' and ${is_mac} is ${False}">
<kw name="Log To Console" library="BuiltIn">
<arg>Firmware based AUDIO VISUALIZER effect verification to be implemnted</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20220120 16:10:56.589" endtime="20220120 16:10:56.589"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:56.588" endtime="20220120 16:10:56.590"/>
</branch>
<branch type="ELSE">
<kw name="LOG WARNING" library="logging">
<arg>${effect} verification not handled</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:10:56.590" endtime="20220120 16:10:56.590"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:56.590" endtime="20220120 16:10:56.591"/>
</branch>
<status status="PASS" starttime="20220120 16:10:56.577" endtime="20220120 16:10:56.591"/>
</if>
<status status="PASS" starttime="20220120 16:10:56.574" endtime="20220120 16:10:56.591"/>
</kw>
<status status="PASS" starttime="20220120 16:10:55.384" endtime="20220120 16:10:56.591"/>
</iter>
<iter>
<var name="${effect}">audio visualizer</var>
<kw name="Convert To Upper Case" library="String">
<var>${effect}</var>
<arg>${effect}</arg>
<doc>Converts string to upper case.</doc>
<msg timestamp="20220120 16:10:56.593" level="INFO">${effect} = AUDIO VISUALIZER</msg>
<status status="PASS" starttime="20220120 16:10:56.593" endtime="20220120 16:10:56.593"/>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<arg>${is_mac} is ${True} and '${effect}'=='AUDIO VISUALIZER'</arg>
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220120 16:10:56.594" endtime="20220120 16:10:56.595"/>
</kw>
<kw name="lightsync.Change lightsync effect to" library="lightsync">
<arg>${effect}</arg>
<doc>Selects an effect from the dropdown and verifies its config options</doc>
<kw name="light_sync.Click On Effect Dropdown" library="light_sync_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:10:56.599" endtime="20220120 16:10:57.150"/>
</kw>
<status status="PASS" starttime="20220120 16:10:56.598" endtime="20220120 16:10:57.151"/>
</kw>
<kw name="light_sync.Select Effect From Dropdown" library="light_sync_screen">
<arg>${effect}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${light_sync_effect_dropdown_item}</arg>
<arg>innerText=${effect}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220120 16:10:57.156" endtime="20220120 16:10:57.754"/>
</kw>
<status status="PASS" starttime="20220120 16:10:57.153" endtime="20220120 16:10:57.755"/>
</kw>
<status status="PASS" starttime="20220120 16:10:56.596" endtime="20220120 16:10:57.755"/>
</kw>
<kw name="firmware.Verify lightsync effect" library="firmware">
<arg>${effect}</arg>
<arg>${device}</arg>
<doc>Verify the light sync effect set using cdevio</doc>
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220120 16:10:57.762" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220120 16:10:57.761" endtime="20220120 16:10:57.762"/>
</kw>
<if>
<branch type="IF" condition="'${effect}' == 'OFF'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['productId']}</arg>
<arg>primary</arg>
<arg>off</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:57.765" endtime="20220120 16:10:57.765"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:57.763" endtime="20220120 16:10:57.765"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'FIXED'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['productId']}</arg>
<arg>primary</arg>
<arg>fixed</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:57.767" endtime="20220120 16:10:57.768"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:57.766" endtime="20220120 16:10:57.768"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'CYCLE'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['productId']}</arg>
<arg>primary</arg>
<arg>cycle</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:57.770" endtime="20220120 16:10:57.770"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:57.769" endtime="20220120 16:10:57.770"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'BREATHING'">
<kw name="firmware.Expect Zone Lighting Effect" library="firmware">
<arg>${device['pid']}</arg>
<arg>primary</arg>
<arg>breathing</arg>
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220120 16:10:57.772" endtime="20220120 16:10:57.772"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:57.771" endtime="20220120 16:10:57.772"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'SCREEN SAMPLER'">
<kw name="Log To Console" library="BuiltIn">
<arg>Firmware based SCREEN SAMPLER effect verification to be implemnted</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20220120 16:10:57.773" endtime="20220120 16:10:57.773"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:57.772" endtime="20220120 16:10:57.773"/>
</branch>
<branch type="ELSE IF" condition="'${effect}' == 'AUDIO VISUALIZER' and ${is_mac} is ${False}">
<kw name="Log To Console" library="BuiltIn">
<arg>Firmware based AUDIO VISUALIZER effect verification to be implemnted</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:10:57.774" endtime="20220120 16:10:57.775"/>
</kw>
<status status="PASS" starttime="20220120 16:10:57.774" endtime="20220120 16:10:57.775"/>
</branch>
<branch type="ELSE">
<kw name="LOG WARNING" library="logging">
<arg>${effect} verification not handled</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220120 16:10:57.776" endtime="20220120 16:10:57.776"/>
</kw>
<status status="NOT RUN" starttime="20220120 16:10:57.775" endtime="20220120 16:10:57.776"/>
</branch>
<status status="PASS" starttime="20220120 16:10:57.762" endtime="20220120 16:10:57.776"/>
</if>
<status status="PASS" starttime="20220120 16:10:57.758" endtime="20220120 16:10:57.777"/>
</kw>
<status status="PASS" starttime="20220120 16:10:56.592" endtime="20220120 16:10:57.777"/>
</iter>
<status status="PASS" starttime="20220120 16:10:48.233" endtime="20220120 16:10:57.777"/>
</for>
<kw name="End Test" library="logging" type="TEARDOWN">
<arg>${KEYWORD STATUS}</arg>
<doc>Ensure to Call this keyword at Teardown of all High Level Test Keywords
If Test Fails - This will capture logs and screenshots and append links to report</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}Test Status: ${test_status}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:10:57.779" endtime="20220120 16:10:57.780"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${test_status}'=='FAIL'</arg>
<arg>Get Log Files And Upload To FTPDrive</arg>
<arg>end_test</arg>
<arg>ELSE</arg>
<arg>Return From Keyword</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20220120 16:10:57.781" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220120 16:10:57.781" endtime="20220120 16:10:57.782"/>
</kw>
<status status="PASS" starttime="20220120 16:10:57.780" endtime="20220120 16:10:57.782"/>
</kw>
<status status="PASS" starttime="20220120 16:10:57.778" endtime="20220120 16:10:57.782"/>
</kw>
<status status="PASS" starttime="20220120 16:10:11.093" endtime="20220120 16:10:57.782"/>
</kw>
<status status="PASS" starttime="20220120 16:10:11.092" endtime="20220120 16:10:57.782"/>
</kw>
<tag>Device: POWERPLAY (Windows, Wired)</tag>
<tag>Device Type: POWERPLAY</tag>
<tag>Feature: lightsync</tag>
<tag>OS: Windows-10-10.0.19041-SP0</tag>
<status status="PASS" starttime="20220120 16:10:11.087" endtime="20220120 16:10:57.783"/>
</test>
<test id="s1-t10" name="Test: Verify If POWERPLAY Can Sync Other Device using backend: POWERPLAY (Windows, Wired)">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Test: Verify If POWERPLAY Can Sync Other Device using backend</arg>
<arg>{'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '405f', 'firmware': '7.1.11', 'modelId': '4405f', 'type': 'POWERPLAY', 'device_specific_features': {'lightsync': {'effect': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}}, 'connection_interfaces': {'wired': {'pid': '405f', 'productId': '405f'}}}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Test: Verify If POWERPLAY Can Sync Other Device using backend" library="powerplay_regression_system">
<arg>{'displayName': 'POWERPLAY', 'connection_type': 'wired', 'hub': 1752629528, 'portNumber': 0, 'features': {'device_settings': ['ui', 'sys'], 'lightsync': ['ui', 'sys']}, 'pid': '405f', 'productId': '405f', 'firmware': '7.1.11', 'modelId': '4405f', 'type': 'POWERPLAY', 'device_specific_features': {'lightsync': {'effect': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}}, 'connection_interfaces': {'wired': {'pid': '405f', 'productId': '405f'}}}</arg>
<tag>lightsync</tag>
<doc>Select the device
Go to lighting page
Sync other device
Select first light effect
Verify if all the devices have the same lighting effect
Select the second lighting effect
Verify if all the devices have the same lighting effect</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>"Test if POWERPLAY can light sync with other devices"</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:10:57.792" endtime="20220120 16:10:57.793"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${headset}</var>
<arg>displayName=G733</arg>
<arg>productId=ab5</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220120 16:10:57.794" level="INFO">${headset} = {'displayName': 'G733', 'productId': 'ab5'}</msg>
<status status="PASS" starttime="20220120 16:10:57.793" endtime="20220120 16:10:57.794"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${keyboard}</var>
<arg>displayName=G915</arg>
<arg>productId=407c</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220120 16:10:57.794" level="INFO">${keyboard} = {'displayName': 'G915', 'productId': '407c'}</msg>
<status status="PASS" starttime="20220120 16:10:57.794" endtime="20220120 16:10:57.794"/>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<var>${mouse}</var>
<arg>displayName=PRO WIRELESS</arg>
<arg>productId=4079</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20220120 16:10:57.795" level="INFO">${mouse} = {'displayName': 'PRO WIRELESS', 'productId': '4079'}</msg>
<status status="PASS" starttime="20220120 16:10:57.795" endtime="20220120 16:10:57.795"/>
</kw>
<kw name="End Test" library="logging" type="TEARDOWN">
<arg>${KEYWORD STATUS}</arg>
<doc>Ensure to Call this keyword at Teardown of all High Level Test Keywords
If Test Fails - This will capture logs and screenshots and append links to report</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}Test Status: ${test_status}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220120 16:10:57.796" endtime="20220120 16:10:57.797"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${test_status}'=='FAIL'</arg>
<arg>Get Log Files And Upload To FTPDrive</arg>
<arg>end_test</arg>
<arg>ELSE</arg>
<arg>Return From Keyword</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20220120 16:10:57.798" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220120 16:10:57.798" endtime="20220120 16:10:57.798"/>
</kw>
<status status="PASS" starttime="20220120 16:10:57.797" endtime="20220120 16:10:57.798"/>
</kw>
<status status="PASS" starttime="20220120 16:10:57.795" endtime="20220120 16:10:57.798"/>
</kw>
<status status="PASS" starttime="20220120 16:10:57.791" endtime="20220120 16:10:57.798"/>
</kw>
<status status="PASS" starttime="20220120 16:10:57.790" endtime="20220120 16:10:57.798"/>
</kw>
<tag>Device: POWERPLAY (Windows, Wired)</tag>
<tag>Device Type: POWERPLAY</tag>
<tag>Feature: lightsync</tag>
<tag>OS: Windows-10-10.0.19041-SP0</tag>
<status status="PASS" starttime="20220120 16:10:57.783" endtime="20220120 16:10:57.799"/>
</test>
<kw name="Run Keywords" library="BuiltIn" type="TEARDOWN">
<arg>Disconnect All Devices Connected With Acroname</arg>
<arg>AND</arg>
<arg>Close iTriggerBox</arg>
<arg>AND</arg>
<arg>Terminate All</arg>
<arg>skip_rack=True</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Disconnect All Devices Connected With Acroname" library="libraries.acroname_hub.device.Device">
<msg timestamp="20220120 16:11:05.845" level="INFO">1752629528
1752629528
1752629528
1752629528
1752629528
1752629528
1752629528
1752629528</msg>
<status status="PASS" starttime="20220120 16:10:57.800" endtime="20220120 16:11:05.845"/>
</kw>
<kw name="Close ITriggerBox" library="tools.python.mindstorm.itriggerbox.keywords.device.Device">
<msg timestamp="20220120 16:11:05.848" level="INFO">No Connection Found with iTriggerBox. Skipping the step!</msg>
<status status="PASS" starttime="20220120 16:11:05.848" endtime="20220120 16:11:05.848"/>
</kw>
<kw name="Terminate All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to terminate all associated processes (including support applications such as VirtualHere).</doc>
<status status="PASS" starttime="20220120 16:11:05.850" endtime="20220120 16:11:11.956"/>
</kw>
<status status="PASS" starttime="20220120 16:10:57.800" endtime="20220120 16:11:11.957"/>
</kw>
<doc>Build Under Test: staging_2022.2.8659_Windows</doc>
<status status="PASS" starttime="20220120 16:03:25.811" endtime="20220120 16:11:11.957"/>
</suite>
<statistics>
<total>
<stat pass="10" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="7" fail="0" skip="0">Device: POWERPLAY (Windows, Wired)</stat>
<stat pass="7" fail="0" skip="0">Device Type: POWERPLAY</stat>
<stat pass="4" fail="0" skip="0">Feature: device_settings</stat>
<stat pass="3" fail="0" skip="0">Feature: lightsync</stat>
<stat pass="7" fail="0" skip="0">OS: Windows-10-10.0.19041-SP0</stat>
<stat pass="1" fail="0" skip="0">Pre-setup: application_specific</stat>
<stat pass="1" fail="0" skip="0">Pre-setup: device_specific</stat>
<stat pass="1" fail="0" skip="0">Pre-setup: test_setup</stat>
</tag>
<suite>
<stat pass="10" fail="0" skip="0" id="s1" name="Kragle Regression">Kragle Regression</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
