<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.1 (Python 3.9.7 on win32)" generated="20220314 16:46:46.289" rpa="false" schemaversion="2">
<suite id="s1" name="Kragle Regression" source="C:\Users\cpgpq\Documents\Automation\gerty\test_cases\01_kragle\kragle_regression.robot">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Set Library Search Order</arg>
<arg>libraries.utilities.system_volume.system_audio</arg>
<arg>libraries.utilities.common</arg>
<arg>libraries.acroname_hub.device.Device</arg>
<arg>libraries.process</arg>
<arg>libraries.device</arg>
<arg>libraries.input.keyboard</arg>
<arg>libraries.process.Application</arg>
<arg>AND</arg>
<arg>common.Restart GHUB</arg>
<arg>AND</arg>
<arg>Disconnect All Devices Connected With Acroname</arg>
<arg>AND</arg>
<arg>Initialize Suite</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Set Library Search Order" library="BuiltIn">
<arg>libraries.utilities.system_volume.system_audio</arg>
<arg>libraries.utilities.common</arg>
<arg>libraries.acroname_hub.device.Device</arg>
<arg>libraries.process</arg>
<arg>libraries.device</arg>
<arg>libraries.input.keyboard</arg>
<arg>libraries.process.Application</arg>
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<status status="PASS" starttime="20220314 16:47:01.104" endtime="20220314 16:47:01.104"/>
</kw>
<kw name="common.Restart GHUB" library="common_keywords_kragle">
<kw name="Log To Console" library="BuiltIn">
<arg>Restarting GHUB...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:47:01.105" endtime="20220314 16:47:01.105"/>
</kw>
<kw name="Control Lghub" library="libraries.process.Application">
<status status="PASS" starttime="20220314 16:47:01.106" endtime="20220314 16:47:01.106"/>
</kw>
<kw name="Terminate All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to terminate all associated processes (including support applications such as VirtualHere).</doc>
<status status="PASS" starttime="20220314 16:47:01.106" endtime="20220314 16:47:05.427"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:47:15.430" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20220314 16:47:05.428" endtime="20220314 16:47:15.430"/>
</kw>
<kw name="Launch All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to launch all associated processes (including support applications). Already running process are
not re-launched.</doc>
<status status="PASS" starttime="20220314 16:47:15.431" endtime="20220314 16:47:28.684"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:47:33.689" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220314 16:47:28.684" endtime="20220314 16:47:33.689"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="PASS" starttime="20220314 16:47:33.689" endtime="20220314 16:47:38.956"/>
</kw>
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:47:43.994" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:47:38.956" endtime="20220314 16:47:43.994"/>
</kw>
<status status="FAIL" starttime="20220314 16:47:38.956" endtime="20220314 16:47:43.994"/>
</kw>
<msg timestamp="20220314 16:47:43.994" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 16:47:38.956" endtime="20220314 16:47:43.994"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 16:47:43.994" endtime="20220314 16:47:43.994"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:47:43.994" endtime="20220314 16:47:43.994"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:47:43.994" endtime="20220314 16:47:43.994"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:47:44.010" endtime="20220314 16:47:44.010"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:47:44.010" endtime="20220314 16:47:44.010"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 16:47:44.010" endtime="20220314 16:47:44.010"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:47:43.994" endtime="20220314 16:47:44.010"/>
</branch>
<status status="PASS" starttime="20220314 16:47:43.994" endtime="20220314 16:47:44.010"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:47:44.010" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:47:44.010" endtime="20220314 16:47:44.010"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:47:44.010" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:47:44.010" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:47:44.010" endtime="20220314 16:47:44.010"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:47:54.026" level="INFO">Failed to find element with selector: #home-view and attributes:{}</msg>
<msg timestamp="20220314 16:47:54.026" level="FAIL">Failure: Selector "#home-view" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:47:44.010" endtime="20220314 16:47:54.026"/>
</kw>
<status status="FAIL" starttime="20220314 16:47:44.010" endtime="20220314 16:47:54.026"/>
</kw>
<status status="FAIL" starttime="20220314 16:47:44.010" endtime="20220314 16:47:54.026"/>
</kw>
<msg timestamp="20220314 16:47:54.026" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220314 16:47:44.010" endtime="20220314 16:47:54.026"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:47:54.026" endtime="20220314 16:47:54.026"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:47:59.042" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 16:47:59.042" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:47:54.042" endtime="20220314 16:47:59.042"/>
</kw>
<msg timestamp="20220314 16:47:59.042" level="INFO">${back_button_present} = False</msg>
<status status="PASS" starttime="20220314 16:47:54.042" endtime="20220314 16:47:59.042"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:47:59.042" endtime="20220314 16:47:59.042"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${first_time_setup}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:48:04.070" level="FAIL">Failure: Selector "//strong[text()='Logitech G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:47:59.058" endtime="20220314 16:48:04.070"/>
</kw>
<status status="FAIL" starttime="20220314 16:47:59.058" endtime="20220314 16:48:04.070"/>
</kw>
<msg timestamp="20220314 16:48:04.070" level="INFO">${first_time_setup} = False</msg>
<status status="PASS" starttime="20220314 16:47:59.042" endtime="20220314 16:48:04.070"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${onboarding_screen}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:48:04.085" level="INFO">${words} = ['#logging-opt-in.dot']</msg>
<status status="PASS" starttime="20220314 16:48:04.085" endtime="20220314 16:48:04.085"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:48:04.085" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:48:04.085" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:48:04.085" endtime="20220314 16:48:04.085"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:48:09.132" level="INFO">Failed to find element with selector: #logging-opt-in.dot and attributes:{}</msg>
<msg timestamp="20220314 16:48:09.132" level="FAIL">Failure: Selector "#logging-opt-in.dot" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:48:04.085" endtime="20220314 16:48:09.132"/>
</kw>
<status status="FAIL" starttime="20220314 16:48:04.085" endtime="20220314 16:48:09.132"/>
</kw>
<status status="FAIL" starttime="20220314 16:48:04.070" endtime="20220314 16:48:09.132"/>
</kw>
<msg timestamp="20220314 16:48:09.132" level="INFO">${onboarding_screen} = False</msg>
<status status="PASS" starttime="20220314 16:48:04.070" endtime="20220314 16:48:09.132"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${first_time_setup} is ${True} or ${onboarding_screen} is ${True}</arg>
<arg>ghub_onboarding.First Time Setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:48:09.132" endtime="20220314 16:48:09.132"/>
</kw>
<status status="PASS" starttime="20220314 16:47:38.956" endtime="20220314 16:48:09.132"/>
</iter>
<iter>
<var name="${INDEX}">1</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:48:14.186" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:48:09.147" endtime="20220314 16:48:14.186"/>
</kw>
<status status="FAIL" starttime="20220314 16:48:09.132" endtime="20220314 16:48:14.186"/>
</kw>
<msg timestamp="20220314 16:48:14.186" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 16:48:09.132" endtime="20220314 16:48:14.186"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 16:48:14.186" endtime="20220314 16:48:14.186"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:48:14.202" endtime="20220314 16:48:14.202"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:48:14.202" endtime="20220314 16:48:14.202"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:48:14.202" endtime="20220314 16:48:14.202"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:48:14.202" endtime="20220314 16:48:14.202"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 16:48:14.202" endtime="20220314 16:48:14.202"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:48:14.186" endtime="20220314 16:48:14.202"/>
</branch>
<status status="PASS" starttime="20220314 16:48:14.186" endtime="20220314 16:48:14.202"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:48:14.202" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:48:14.202" endtime="20220314 16:48:14.202"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:48:14.202" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:48:14.202" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:48:14.202" endtime="20220314 16:48:14.202"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:48:14.202" endtime="20220314 16:48:18.982"/>
</kw>
<status status="PASS" starttime="20220314 16:48:14.202" endtime="20220314 16:48:18.982"/>
</kw>
<status status="PASS" starttime="20220314 16:48:14.202" endtime="20220314 16:48:18.982"/>
</kw>
<msg timestamp="20220314 16:48:18.983" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220314 16:48:14.202" endtime="20220314 16:48:18.983"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:48:18.986" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:48:18.985" endtime="20220314 16:48:18.986"/>
</kw>
<status status="PASS" starttime="20220314 16:48:09.132" endtime="20220314 16:48:18.987"/>
</iter>
<status status="PASS" starttime="20220314 16:47:38.956" endtime="20220314 16:48:18.987"/>
</for>
<status status="PASS" starttime="20220314 16:47:38.956" endtime="20220314 16:48:18.987"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.Set GHUB As Active Window</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Set GHUB As Active Window" library="common_keywords_kragle">
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220314 16:48:18.990" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220314 16:48:18.989" endtime="20220314 16:48:18.990"/>
</kw>
<if>
<branch type="IF" condition="${is_mac} is ${True}">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>lghub</arg>
<arg>${maximized_screen}</arg>
<status status="NOT RUN" starttime="20220314 16:48:18.990" endtime="20220314 16:48:18.990"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:48:18.990" endtime="20220314 16:48:18.990"/>
</branch>
<branch type="ELSE">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>Logitech G HUB</arg>
<arg>${maximized_screen}</arg>
<status status="PASS" starttime="20220314 16:48:18.991" endtime="20220314 16:48:19.146"/>
</kw>
<status status="PASS" starttime="20220314 16:48:18.991" endtime="20220314 16:48:19.146"/>
</branch>
<status status="PASS" starttime="20220314 16:48:18.990" endtime="20220314 16:48:19.147"/>
</if>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:48:21.158" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20220314 16:48:19.148" endtime="20220314 16:48:21.158"/>
</kw>
<status status="PASS" starttime="20220314 16:48:18.989" endtime="20220314 16:48:21.158"/>
</kw>
<status status="PASS" starttime="20220314 16:48:18.988" endtime="20220314 16:48:21.158"/>
</kw>
<status status="PASS" starttime="20220314 16:47:01.105" endtime="20220314 16:48:21.158"/>
</kw>
<kw name="Disconnect All Devices Connected With Acroname" library="libraries.acroname_hub.device.Device">
<msg timestamp="20220314 16:48:29.243" level="INFO">3856831629
3856831629
3856831629
3856831629
3856831629
3856831629
3856831629
3856831629</msg>
<status status="PASS" starttime="20220314 16:48:21.158" endtime="20220314 16:48:29.243"/>
</kw>
<kw name="Initialize Suite">
<doc>Set global variables of json data and device connection type.</doc>
<kw name="Get App Version" library="libraries.utilities.utils">
<var>${app_version}</var>
<msg timestamp="20220314 16:48:29.256" level="INFO">${app_version} = staging_2022.3.239682_Windows</msg>
<status status="PASS" starttime="20220314 16:48:29.246" endtime="20220314 16:48:29.256"/>
</kw>
<kw name="Get Os Type" library="libraries.utilities.utils">
<var>${os_type}</var>
<msg timestamp="20220314 16:48:29.258" level="INFO">${os_type} = Windows</msg>
<status status="PASS" starttime="20220314 16:48:29.257" endtime="20220314 16:48:29.258"/>
</kw>
<kw name="Get Platform Details" library="libraries.utilities.utils">
<var>${os_version}</var>
<msg timestamp="20220314 16:48:29.274" level="INFO">${os_version} = Windows-10-10.0.22000-SP0</msg>
<status status="PASS" starttime="20220314 16:48:29.259" endtime="20220314 16:48:29.274"/>
</kw>
<kw name="os.Verify And Set Is Windows As Global Variable" library="operating_system">
<kw name="Is Windows" library="libraries.utilities.system_volume.system_audio">
<var>${status}</var>
<msg timestamp="20220314 16:48:29.277" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:48:29.277" endtime="20220314 16:48:29.277"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${is_windows}</arg>
<arg>${status}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220314 16:48:29.293" level="INFO">${is_windows} = True</msg>
<status status="PASS" starttime="20220314 16:48:29.278" endtime="20220314 16:48:29.293"/>
</kw>
<status status="PASS" starttime="20220314 16:48:29.276" endtime="20220314 16:48:29.293"/>
</kw>
<kw name="Set Suite Documentation" library="BuiltIn">
<arg>Build Under Test: ${app_version}</arg>
<doc>Sets documentation for the current test suite.</doc>
<msg timestamp="20220314 16:48:29.295" level="INFO">Set suite documentation to:
Build Under Test: staging_2022.3.239682_Windows</msg>
<status status="PASS" starttime="20220314 16:48:29.295" endtime="20220314 16:48:29.295"/>
</kw>
<kw name="json.Get Json Data" library="json_data_handler">
<var>${json_data}</var>
<arg>${json_data_file}</arg>
<kw name="Get Json Data" library="libraries.json_data_handler">
<var>${json_data}</var>
<arg>${json_data_file}</arg>
<doc>The get_json_data function is used to read json file and create object for it
:return: json object of the json file</doc>
<msg timestamp="20220314 16:48:29.300" level="INFO">${json_data} = {'connection_type': 'Acroname', 'devices': [{'name': 'G903 LIGHTSPEED', 'hub': 3856831629, 'portNumber': 6, 'connection_type': 'wired', 'features': {'dpi': ['sys']}}], 'reference': {'all_devices': {'m...</msg>
<status status="PASS" starttime="20220314 16:48:29.298" endtime="20220314 16:48:29.300"/>
</kw>
<msg timestamp="20220314 16:48:29.302" level="INFO">${json_data} = {'connection_type': 'Acroname', 'devices': [{'name': 'G903 LIGHTSPEED', 'hub': 3856831629, 'portNumber': 6, 'connection_type': 'wired', 'features': {'dpi': ['sys']}}], 'reference': {'all_devices': {'m...</msg>
<status status="PASS" starttime="20220314 16:48:29.296" endtime="20220314 16:48:29.302"/>
</kw>
<kw name="json.Get Connection Type" library="json_data_handler">
<var>${conn_type}</var>
<arg>${json_data}</arg>
<kw name="Get Connection Type" library="libraries.json_data_handler">
<var>${conn_type}</var>
<arg>${json_data}</arg>
<doc>The get_connection_type function is used to traverse json object and get connection type
:param json_data:json object of the json file
:return: type of connection present</doc>
<msg timestamp="20220314 16:48:29.304" level="INFO">${conn_type} = Acroname</msg>
<status status="PASS" starttime="20220314 16:48:29.304" endtime="20220314 16:48:29.304"/>
</kw>
<msg timestamp="20220314 16:48:29.304" level="INFO">${conn_type} = Acroname</msg>
<status status="PASS" starttime="20220314 16:48:29.303" endtime="20220314 16:48:29.305"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${device_connection_type}</arg>
<arg>${conn_type}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220314 16:48:29.306" level="INFO">${device_connection_type} = Acroname</msg>
<status status="PASS" starttime="20220314 16:48:29.305" endtime="20220314 16:48:29.306"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${json_data}</arg>
<arg>${json_data}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220314 16:48:29.308" level="INFO">${json_data} = {'connection_type': 'Acroname', 'devices': [{'name': 'G903 LIGHTSPEED', 'hub': 3856831629, 'portNumber': 6, 'connection_type': 'wired', 'features': {'dpi': ['sys']}}], 'reference': {'all_devices': {'m...</msg>
<status status="PASS" starttime="20220314 16:48:29.306" endtime="20220314 16:48:29.308"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${os_type}</arg>
<arg>${os_type}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220314 16:48:29.309" level="INFO">${os_type} = Windows</msg>
<status status="PASS" starttime="20220314 16:48:29.308" endtime="20220314 16:48:29.309"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${os_version}</arg>
<arg>${os_version}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220314 16:48:29.310" level="INFO">${os_version} = Windows-10-10.0.22000-SP0</msg>
<status status="PASS" starttime="20220314 16:48:29.310" endtime="20220314 16:48:29.310"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${ignore_cloud_account_sync_issue}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220314 16:48:29.311" level="INFO">${ignore_cloud_account_sync_issue} = True</msg>
<status status="PASS" starttime="20220314 16:48:29.310" endtime="20220314 16:48:29.311"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clear_settings_reqd}</arg>
<arg>common.Clear App Settings And Start Fresh With Unlocking Persistent Profile</arg>
<arg>ELSE</arg>
<arg>profile.Unlock Persistent Profile In Global Configuration</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="common.Clear App Settings And Start Fresh With Unlocking Persistent Profile" library="common_keywords_kragle">
<doc>Clear GHUB app Custom Settings And Launch The App With Default Settings With Unlocking Persistent Profile</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Clearing App Settings</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:48:29.313" endtime="20220314 16:48:29.313"/>
</kw>
<kw name="Control Lghub" library="libraries.process.Application">
<status status="PASS" starttime="20220314 16:48:29.313" endtime="20220314 16:48:29.314"/>
</kw>
<kw name="common.Clear Settings" library="common_keywords_kragle">
<doc>Related to the process.robot</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=REMOVE</arg>
<arg>path=/configuration</arg>
<arg>json={}</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:48:29.317" level="INFO">{'verb': 'REMOVE', 'path': '/configuration', 'payload': {}}</msg>
<status status="PASS" starttime="20220314 16:48:29.315" endtime="20220314 16:48:29.317"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>verb=REMOVE</arg>
<arg>path=/configuration</arg>
<arg>timeout=60</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:48:29.318" endtime="20220314 16:48:29.329"/>
</kw>
<status status="PASS" starttime="20220314 16:48:29.314" endtime="20220314 16:48:29.329"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<kw name="Control Lghub" library="libraries.process.Application">
<status status="PASS" starttime="20220314 16:48:29.330" endtime="20220314 16:48:29.330"/>
</kw>
<kw name="Terminate All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to terminate all associated processes (including support applications such as VirtualHere).</doc>
<status status="PASS" starttime="20220314 16:48:29.331" endtime="20220314 16:48:35.570"/>
</kw>
<status status="PASS" starttime="20220314 16:48:29.329" endtime="20220314 16:48:35.571"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:48:45.572" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20220314 16:48:35.572" endtime="20220314 16:48:45.572"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<kw name="Control Lghub" library="libraries.process.Application">
<status status="PASS" starttime="20220314 16:48:45.574" endtime="20220314 16:48:45.574"/>
</kw>
<kw name="Launch All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to launch all associated processes (including support applications). Already running process are
not re-launched.</doc>
<status status="PASS" starttime="20220314 16:48:45.575" endtime="20220314 16:48:58.491"/>
</kw>
<status status="PASS" starttime="20220314 16:48:45.572" endtime="20220314 16:48:58.491"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:49:03.501" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220314 16:48:58.491" endtime="20220314 16:49:03.501"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="PASS" starttime="20220314 16:49:03.501" endtime="20220314 16:49:08.765"/>
</kw>
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:49:13.779" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:49:08.765" endtime="20220314 16:49:13.779"/>
</kw>
<status status="FAIL" starttime="20220314 16:49:08.765" endtime="20220314 16:49:13.779"/>
</kw>
<msg timestamp="20220314 16:49:13.779" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 16:49:08.765" endtime="20220314 16:49:13.779"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 16:49:13.779" endtime="20220314 16:49:13.779"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:49:13.795" endtime="20220314 16:49:13.795"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:49:13.795" endtime="20220314 16:49:13.795"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:49:13.795" endtime="20220314 16:49:13.795"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:49:13.795" endtime="20220314 16:49:13.795"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 16:49:13.795" endtime="20220314 16:49:13.795"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:49:13.779" endtime="20220314 16:49:13.795"/>
</branch>
<status status="PASS" starttime="20220314 16:49:13.779" endtime="20220314 16:49:13.795"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:49:13.795" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:49:13.795" endtime="20220314 16:49:13.795"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:49:13.795" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:49:13.795" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:49:13.795" endtime="20220314 16:49:13.795"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:49:23.830" level="INFO">Failed to find element with selector: #home-view and attributes:{}</msg>
<msg timestamp="20220314 16:49:23.830" level="FAIL">Failure: Selector "#home-view" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:49:13.795" endtime="20220314 16:49:23.830"/>
</kw>
<status status="FAIL" starttime="20220314 16:49:13.795" endtime="20220314 16:49:23.830"/>
</kw>
<status status="FAIL" starttime="20220314 16:49:13.795" endtime="20220314 16:49:23.830"/>
</kw>
<msg timestamp="20220314 16:49:23.830" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220314 16:49:13.795" endtime="20220314 16:49:23.830"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:49:23.830" endtime="20220314 16:49:23.845"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:49:28.905" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 16:49:28.905" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:49:23.845" endtime="20220314 16:49:28.905"/>
</kw>
<msg timestamp="20220314 16:49:28.905" level="INFO">${back_button_present} = False</msg>
<status status="PASS" starttime="20220314 16:49:23.845" endtime="20220314 16:49:28.905"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:49:28.905" endtime="20220314 16:49:28.905"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${first_time_setup}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:49:28.920" endtime="20220314 16:49:28.936"/>
</kw>
<status status="PASS" starttime="20220314 16:49:28.920" endtime="20220314 16:49:28.936"/>
</kw>
<msg timestamp="20220314 16:49:28.936" level="INFO">${first_time_setup} = True</msg>
<status status="PASS" starttime="20220314 16:49:28.905" endtime="20220314 16:49:28.936"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${onboarding_screen}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:49:28.936" level="INFO">${words} = ['#logging-opt-in.dot']</msg>
<status status="PASS" starttime="20220314 16:49:28.936" endtime="20220314 16:49:28.936"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:49:28.936" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:49:28.936" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:49:28.936" endtime="20220314 16:49:28.936"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:49:34.000" level="INFO">Failed to find element with selector: #logging-opt-in.dot and attributes:{}</msg>
<msg timestamp="20220314 16:49:34.000" level="FAIL">Failure: Selector "#logging-opt-in.dot" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:49:28.936" endtime="20220314 16:49:34.000"/>
</kw>
<status status="FAIL" starttime="20220314 16:49:28.936" endtime="20220314 16:49:34.000"/>
</kw>
<status status="FAIL" starttime="20220314 16:49:28.936" endtime="20220314 16:49:34.000"/>
</kw>
<msg timestamp="20220314 16:49:34.000" level="INFO">${onboarding_screen} = False</msg>
<status status="PASS" starttime="20220314 16:49:28.936" endtime="20220314 16:49:34.000"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${first_time_setup} is ${True} or ${onboarding_screen} is ${True}</arg>
<arg>ghub_onboarding.First Time Setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="ghub_onboarding.First Time Setup" library="ghub_onboarding_flow_screen">
<doc>Related to the process</doc>
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${os}</var>
<msg timestamp="20220314 16:49:34.016" level="INFO">${os} = False</msg>
<status status="PASS" starttime="20220314 16:49:34.016" endtime="20220314 16:49:34.016"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=SET</arg>
<arg>path=/configuration</arg>
<arg>json={"onboardingShown": true, "migrationShown": true, "seenCoachMarks": ["coach-mark-panel-persistent-lock", "coach-mark-color-picker", "coach-mark-lighting-effect-selector", "coach-mark-lighting-effect-edit", "coach-mark-microphone-input-gain", "coach-mark-microphone-recording", "coach-mark-microphone-enable-blue-voice", "coach-mark-lighting-effect-editor-timeline", "coach-mark-lighting-effect-editor-frame-selection", "coach-mark-microphone-advanced-settings", "coach-mark-microphone-select-preset"]}</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:49:34.016" level="INFO">{'verb': 'SET', 'path': '/configuration', 'payload': {'onboardingShown': True, 'migrationShown': True, 'seenCoachMarks': ['coach-mark-panel-persistent-lock', 'coach-mark-color-picker', 'coach-mark-lighting-effect-selector', 'coach-mark-lighting-effect-edit', 'coach-mark-microphone-input-gain', 'coach-mark-microphone-recording', 'coach-mark-microphone-enable-blue-voice', 'coach-mark-lighting-effect-editor-timeline', 'coach-mark-lighting-effect-editor-frame-selection', 'coach-mark-microphone-advanced-settings', 'coach-mark-microphone-select-preset']}}</msg>
<status status="PASS" starttime="20220314 16:49:34.016" endtime="20220314 16:49:34.016"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${backend_response}</var>
<arg>Expect Message</arg>
<arg>verb=SET</arg>
<arg>path=/configuration</arg>
<arg>timeout=120</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>verb=SET</arg>
<arg>path=/configuration</arg>
<arg>timeout=120</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:49:34.016" endtime="20220314 16:49:34.031"/>
</kw>
<msg timestamp="20220314 16:49:34.031" level="INFO">${backend_response} = True</msg>
<status status="PASS" starttime="20220314 16:49:34.016" endtime="20220314 16:49:34.031"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${backend_response} is ${False}</arg>
<arg>LOG WARNING</arg>
<arg>Backend Response Failed For Onboarding Screen Request</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:49:34.032" endtime="20220314 16:49:34.033"/>
</kw>
<kw name="Reload Frontend" library="libraries.process.Frontend">
<status status="PASS" starttime="20220314 16:49:34.033" endtime="20220314 16:49:34.041"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:49:39.055" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220314 16:49:34.041" endtime="20220314 16:49:39.055"/>
</kw>
<kw name="ghub_onboarding.Dismiss Welcome To GHUB Window" library="ghub_onboarding_flow_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${welcome_window}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:49:44.070" level="FAIL">Failure: Selector "//strong[text()='Logitech G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:49:39.055" endtime="20220314 16:49:44.070"/>
</kw>
<status status="FAIL" starttime="20220314 16:49:39.055" endtime="20220314 16:49:44.070"/>
</kw>
<msg timestamp="20220314 16:49:44.070" level="INFO">${welcome_window} = False</msg>
<status status="PASS" starttime="20220314 16:49:39.055" endtime="20220314 16:49:44.070"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${welcome_window} is ${True}</arg>
<arg>common.Click On Right Scroll</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:49:44.070" endtime="20220314 16:49:44.070"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${potential_window}</var>
<arg>ghub_onboarding.Is Unlock Potentials Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Unlock Potentials Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_unlock_potentials}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:49:49.128" level="FAIL">Failure: Selector "//h1[text()='Unlock your potential']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:49:44.085" endtime="20220314 16:49:49.128"/>
</kw>
<status status="FAIL" starttime="20220314 16:49:44.085" endtime="20220314 16:49:49.128"/>
</kw>
<msg timestamp="20220314 16:49:49.128" level="INFO">${potential_window} = False</msg>
<status status="PASS" starttime="20220314 16:49:44.085" endtime="20220314 16:49:49.128"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${potential_window} is ${True}</arg>
<arg>common.Click On Right Scroll</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:49:49.143" endtime="20220314 16:49:49.143"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${launch_ghub}</var>
<arg>ghub_onboarding.Is Launch GHUB Button Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Launch GHUB Button Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_launch_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:49:54.197" level="FAIL">Failure: Selector "//button[text()='LAUNCH G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:49:49.143" endtime="20220314 16:49:54.197"/>
</kw>
<status status="FAIL" starttime="20220314 16:49:49.143" endtime="20220314 16:49:54.197"/>
</kw>
<msg timestamp="20220314 16:49:54.197" level="INFO">${launch_ghub} = False</msg>
<status status="PASS" starttime="20220314 16:49:49.143" endtime="20220314 16:49:54.197"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${launch_ghub} is ${True}</arg>
<arg>ghub_onboarding.Click on Launch GHUB Button</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:49:54.197" endtime="20220314 16:49:54.213"/>
</kw>
<status status="PASS" starttime="20220314 16:49:39.055" endtime="20220314 16:49:54.213"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>ghub_onboarding.Dismiss G HUB Analytics and Error Logging</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Dismiss G HUB Analytics and Error Logging" library="ghub_onboarding_flow_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_make_my_experince_better_radio_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:49:54.213" endtime="20220314 16:49:54.826"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_share_my_usage_data_checkbox}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:49:54.826" endtime="20220314 16:49:55.405"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_send_error_logs_checkbox}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:49:55.405" endtime="20220314 16:49:55.974"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_help_improve_ghub_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:49:55.974" endtime="20220314 16:49:56.592"/>
</kw>
<status status="PASS" starttime="20220314 16:49:54.213" endtime="20220314 16:49:56.592"/>
</kw>
<msg timestamp="20220314 16:49:56.592" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:49:54.213" endtime="20220314 16:49:56.592"/>
</kw>
<if>
<branch type="IF" condition="${status} is ${False}">
<kw name="Terminate All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to terminate all associated processes (including support applications such as VirtualHere).</doc>
<status status="NOT RUN" starttime="20220314 16:49:56.592" endtime="20220314 16:49:56.592"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>8</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:49:56.592" endtime="20220314 16:49:56.592"/>
</kw>
<kw name="Launch All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to launch all associated processes (including support applications). Already running process are
not re-launched.</doc>
<status status="NOT RUN" starttime="20220314 16:49:56.592" endtime="20220314 16:49:56.592"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>8</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:49:56.592" endtime="20220314 16:49:56.592"/>
</kw>
<kw name="ghub_onboarding.Dismiss Welcome To GHUB Window" library="ghub_onboarding_flow_screen">
<status status="NOT RUN" starttime="20220314 16:49:56.592" endtime="20220314 16:49:56.592"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>ghub_onboarding.Dismiss G HUB Analytics and Error Logging</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="NOT RUN" starttime="20220314 16:49:56.592" endtime="20220314 16:49:56.592"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:49:56.592" endtime="20220314 16:49:56.592"/>
</branch>
<status status="PASS" starttime="20220314 16:49:56.592" endtime="20220314 16:49:56.592"/>
</if>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>ghub_onboarding.Dismiss G HUB Analytics and Error Logging</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="ghub_onboarding.Dismiss G HUB Analytics and Error Logging" library="ghub_onboarding_flow_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_make_my_experince_better_radio_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:50:02.133" level="INFO">WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: stale element reference: element is not attached to the page document
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)</msg>
<msg timestamp="20220314 16:50:02.133" level="FAIL">Failure: Selector "#logging-opt-in.dot" is Not Clickable</msg>
<status status="FAIL" starttime="20220314 16:49:56.592" endtime="20220314 16:50:02.133"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_share_my_usage_data_checkbox}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="NOT RUN" starttime="20220314 16:50:02.133" endtime="20220314 16:50:02.133"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_send_error_logs_checkbox}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="NOT RUN" starttime="20220314 16:50:02.133" endtime="20220314 16:50:02.133"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_help_improve_ghub_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="NOT RUN" starttime="20220314 16:50:02.133" endtime="20220314 16:50:02.133"/>
</kw>
<status status="FAIL" starttime="20220314 16:49:56.592" endtime="20220314 16:50:02.133"/>
</kw>
<status status="PASS" starttime="20220314 16:49:56.592" endtime="20220314 16:50:02.133"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>home.Skip Device Introduction</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:50:04.149" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220314 16:50:04.149" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:50:02.133" endtime="20220314 16:50:04.149"/>
</kw>
<status status="PASS" starttime="20220314 16:50:02.133" endtime="20220314 16:50:04.149"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:50:06.164" level="FAIL">Failure: Selector "//*[@id="color-variant"]/button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:50:04.149" endtime="20220314 16:50:06.164"/>
</kw>
<status status="PASS" starttime="20220314 16:50:04.149" endtime="20220314 16:50:06.164"/>
</kw>
<status status="PASS" starttime="20220314 16:50:02.133" endtime="20220314 16:50:06.164"/>
</kw>
<status status="PASS" starttime="20220314 16:50:02.133" endtime="20220314 16:50:06.164"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>ghub_onboarding.Dismiss New Version Prompt</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="ghub_onboarding.Dismiss New Version Prompt" library="ghub_onboarding_flow_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_got_it_button}</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:50:09.195" level="INFO">Failed to find element with selector: #got-it and attributes:{}</msg>
<msg timestamp="20220314 16:50:09.195" level="FAIL">Failure: Selector "#got-it" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:50:06.164" endtime="20220314 16:50:09.195"/>
</kw>
<status status="FAIL" starttime="20220314 16:50:06.164" endtime="20220314 16:50:09.195"/>
</kw>
<status status="PASS" starttime="20220314 16:50:06.164" endtime="20220314 16:50:09.195"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>ghub_onboarding.Dismiss Release Notes</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="ghub_onboarding.Dismiss Release Notes" library="ghub_onboarding_flow_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_cancel_button}</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:50:12.228" level="INFO">Failed to find element with selector: .overlay-cancel and attributes:{}</msg>
<msg timestamp="20220314 16:50:12.228" level="FAIL">Failure: Selector ".overlay-cancel" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:50:09.211" endtime="20220314 16:50:12.228"/>
</kw>
<status status="FAIL" starttime="20220314 16:50:09.211" endtime="20220314 16:50:12.228"/>
</kw>
<status status="PASS" starttime="20220314 16:50:09.195" endtime="20220314 16:50:12.228"/>
</kw>
<status status="PASS" starttime="20220314 16:49:34.016" endtime="20220314 16:50:12.228"/>
</kw>
<status status="PASS" starttime="20220314 16:49:34.000" endtime="20220314 16:50:12.228"/>
</kw>
<status status="PASS" starttime="20220314 16:49:08.765" endtime="20220314 16:50:12.228"/>
</iter>
<iter>
<var name="${INDEX}">1</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:50:17.276" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:50:12.228" endtime="20220314 16:50:17.276"/>
</kw>
<status status="FAIL" starttime="20220314 16:50:12.228" endtime="20220314 16:50:17.276"/>
</kw>
<msg timestamp="20220314 16:50:17.276" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 16:50:12.228" endtime="20220314 16:50:17.276"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 16:50:17.276" endtime="20220314 16:50:17.276"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:50:17.276" endtime="20220314 16:50:17.276"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:50:17.276" endtime="20220314 16:50:17.292"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:50:17.292" endtime="20220314 16:50:17.292"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:50:17.293" endtime="20220314 16:50:17.293"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 16:50:17.293" endtime="20220314 16:50:17.293"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:50:17.276" endtime="20220314 16:50:17.293"/>
</branch>
<status status="PASS" starttime="20220314 16:50:17.276" endtime="20220314 16:50:17.293"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:50:17.293" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:50:17.293" endtime="20220314 16:50:17.293"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:50:17.293" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:50:17.293" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:50:17.293" endtime="20220314 16:50:17.293"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:50:17.293" endtime="20220314 16:50:17.325"/>
</kw>
<status status="PASS" starttime="20220314 16:50:17.293" endtime="20220314 16:50:17.325"/>
</kw>
<status status="PASS" starttime="20220314 16:50:17.293" endtime="20220314 16:50:17.325"/>
</kw>
<msg timestamp="20220314 16:50:17.325" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220314 16:50:17.293" endtime="20220314 16:50:17.325"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:50:17.325" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:50:17.325" endtime="20220314 16:50:17.325"/>
</kw>
<status status="PASS" starttime="20220314 16:50:12.228" endtime="20220314 16:50:17.325"/>
</iter>
<status status="PASS" starttime="20220314 16:49:08.765" endtime="20220314 16:50:17.325"/>
</for>
<status status="PASS" starttime="20220314 16:49:08.765" endtime="20220314 16:50:17.325"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.Set GHUB As Active Window</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Set GHUB As Active Window" library="common_keywords_kragle">
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220314 16:50:17.340" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220314 16:50:17.340" endtime="20220314 16:50:17.340"/>
</kw>
<if>
<branch type="IF" condition="${is_mac} is ${True}">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>lghub</arg>
<arg>${maximized_screen}</arg>
<status status="NOT RUN" starttime="20220314 16:50:17.340" endtime="20220314 16:50:17.340"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:50:17.340" endtime="20220314 16:50:17.340"/>
</branch>
<branch type="ELSE">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>Logitech G HUB</arg>
<arg>${maximized_screen}</arg>
<status status="PASS" starttime="20220314 16:50:17.340" endtime="20220314 16:50:17.370"/>
</kw>
<status status="PASS" starttime="20220314 16:50:17.340" endtime="20220314 16:50:17.370"/>
</branch>
<status status="PASS" starttime="20220314 16:50:17.340" endtime="20220314 16:50:17.370"/>
</if>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:50:19.382" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20220314 16:50:17.371" endtime="20220314 16:50:19.382"/>
</kw>
<status status="PASS" starttime="20220314 16:50:17.340" endtime="20220314 16:50:19.382"/>
</kw>
<status status="PASS" starttime="20220314 16:50:17.325" endtime="20220314 16:50:19.382"/>
</kw>
<kw name="profile.Unlock Persistent Profile In Global Configuration" library="profile">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.set ghub as active window</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Set GHUB As Active Window" library="common_keywords_kragle">
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220314 16:50:19.382" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220314 16:50:19.382" endtime="20220314 16:50:19.382"/>
</kw>
<if>
<branch type="IF" condition="${is_mac} is ${True}">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>lghub</arg>
<arg>${maximized_screen}</arg>
<status status="NOT RUN" starttime="20220314 16:50:19.382" endtime="20220314 16:50:19.382"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:50:19.382" endtime="20220314 16:50:19.382"/>
</branch>
<branch type="ELSE">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>Logitech G HUB</arg>
<arg>${maximized_screen}</arg>
<status status="PASS" starttime="20220314 16:50:19.382" endtime="20220314 16:50:19.398"/>
</kw>
<status status="PASS" starttime="20220314 16:50:19.382" endtime="20220314 16:50:19.398"/>
</branch>
<status status="PASS" starttime="20220314 16:50:19.382" endtime="20220314 16:50:19.398"/>
</if>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:50:21.414" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20220314 16:50:19.398" endtime="20220314 16:50:21.414"/>
</kw>
<status status="PASS" starttime="20220314 16:50:19.382" endtime="20220314 16:50:21.414"/>
</kw>
<status status="PASS" starttime="20220314 16:50:19.382" endtime="20220314 16:50:21.414"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Unlocking Persistent Profile...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:50:21.414" endtime="20220314 16:50:21.414"/>
</kw>
<kw name="home.Click On Settings" library="home_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${home_settings_icon}</arg>
<arg>4</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:50:21.414" level="INFO">${words} = ['#setting-sprocket']</msg>
<status status="PASS" starttime="20220314 16:50:21.414" endtime="20220314 16:50:21.414"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:50:21.414" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:50:21.414" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:50:21.414" endtime="20220314 16:50:21.414"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:50:21.414" endtime="20220314 16:50:22.051"/>
</kw>
<status status="PASS" starttime="20220314 16:50:21.414" endtime="20220314 16:50:22.051"/>
</kw>
<status status="PASS" starttime="20220314 16:50:21.414" endtime="20220314 16:50:22.052"/>
</kw>
<status status="PASS" starttime="20220314 16:50:21.414" endtime="20220314 16:50:22.053"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${setting_page}</var>
<arg>global_settings.Is Setting Page Loaded</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="global_settings.Is Setting Page Loaded" library="global_settings_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${global_app_settings_page}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:50:22.057" endtime="20220314 16:50:22.077"/>
</kw>
<status status="PASS" starttime="20220314 16:50:22.056" endtime="20220314 16:50:22.078"/>
</kw>
<msg timestamp="20220314 16:50:22.078" level="INFO">${setting_page} = True</msg>
<status status="PASS" starttime="20220314 16:50:22.054" endtime="20220314 16:50:22.078"/>
</kw>
<if>
<branch type="IF" condition="${setting_page}==False">
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:50:22.080" endtime="20220314 16:50:22.080"/>
</kw>
<kw name="home.Click On Settings" library="home_screen">
<status status="NOT RUN" starttime="20220314 16:50:22.081" endtime="20220314 16:50:22.081"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:50:22.079" endtime="20220314 16:50:22.081"/>
</branch>
<status status="PASS" starttime="20220314 16:50:22.078" endtime="20220314 16:50:22.082"/>
</if>
<kw name="global_settings.Click On Persistent Profile Dropdown" library="global_settings_screen">
<kw name="Click" library="libraries.components.React">
<arg>${global_settings_persistent_profile_dropdown}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:50:22.084" endtime="20220314 16:50:22.644"/>
</kw>
<status status="PASS" starttime="20220314 16:50:22.083" endtime="20220314 16:50:22.645"/>
</kw>
<kw name="global_settings.Select None From Persistent Profile Dropdown" library="global_settings_screen">
<kw name="Click" library="libraries.components.React">
<arg>${global_settings_persistent_profile_none}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:50:22.648" endtime="20220314 16:50:23.216"/>
</kw>
<status status="PASS" starttime="20220314 16:50:22.647" endtime="20220314 16:50:23.217"/>
</kw>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:50:23.220" endtime="20220314 16:50:23.810"/>
</kw>
<status status="PASS" starttime="20220314 16:50:23.219" endtime="20220314 16:50:23.810"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Unlocked Persistent Profile</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:50:23.811" endtime="20220314 16:50:23.812"/>
</kw>
<status status="PASS" starttime="20220314 16:50:19.382" endtime="20220314 16:50:23.812"/>
</kw>
<status status="PASS" starttime="20220314 16:48:29.312" endtime="20220314 16:50:23.813"/>
</kw>
<status status="PASS" starttime="20220314 16:48:29.311" endtime="20220314 16:50:23.813"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${is_login_reqd}</arg>
<arg>ghub.Login Cloud Account</arg>
<arg>${EMAIL}</arg>
<arg>${PASSWORD}</arg>
<arg>${ignore_cloud_account_sync_issue}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="ghub.Login Cloud Account" library="ghub_account">
<arg>${EMAIL}</arg>
<arg>${PASSWORD}</arg>
<arg>${ignore_cloud_account_sync_issue}</arg>
<kw name="Login" library="libraries.utilities.login.Login">
<arg>${EMAIL}</arg>
<arg>${PASSWORD}</arg>
<arg>${ignore_cloud_account_sync_issue}</arg>
<doc>Description: Click on account avatar button in GHUB home screen then enter the email id and
password in launched browser and click on 'Open LGHUB' prompt button in browser to sign in.</doc>
<msg timestamp="20220314 16:50:29.515" level="INFO">Failed to find element with selector: login-loading-text and attributes:{}</msg>
<msg timestamp="20220314 16:50:35.769" level="INFO">Signing out: CLPC7</msg>
<msg timestamp="20220314 16:50:41.400" level="INFO">Imported existing &lt;module 'comtypes.gen' from 'C:\\Users\\cpgpq\\AppData\\Local\\Programs\\Python\\Python39\\Lib\\site-packages\\comtypes\\gen\\__init__.py'&gt;</msg>
<msg timestamp="20220314 16:50:41.400" level="INFO">Using writeable comtypes cache directory: 'C:\Users\cpgpq\AppData\Local\Programs\Python\Python39\Lib\site-packages\comtypes\gen'</msg>
<msg timestamp="20220314 16:51:25.253" level="INFO">Failed to find element with selector: login-loading-text and attributes:{}</msg>
<msg timestamp="20220314 16:51:25.265" level="INFO">Verifying cloud account is synced</msg>
<msg timestamp="20220314 16:51:25.298" level="INFO">CLPC7 is logged in</msg>
<status status="PASS" starttime="20220314 16:50:23.817" endtime="20220314 16:51:25.396"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:51:30.402" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220314 16:51:25.397" endtime="20220314 16:51:30.402"/>
</kw>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:51:30.402" endtime="20220314 16:51:33.002"/>
</kw>
<status status="PASS" starttime="20220314 16:51:30.402" endtime="20220314 16:51:33.003"/>
</kw>
<status status="PASS" starttime="20220314 16:50:23.816" endtime="20220314 16:51:33.003"/>
</kw>
<status status="PASS" starttime="20220314 16:50:23.814" endtime="20220314 16:51:33.004"/>
</kw>
<status status="PASS" starttime="20220314 16:48:29.244" endtime="20220314 16:51:33.004"/>
</kw>
<status status="PASS" starttime="20220314 16:47:01.104" endtime="20220314 16:51:33.004"/>
</kw>
<test id="s1-t1" name="Test Application Specific Test Cases">
<kw name="Test App Features">
<arg>UI</arg>
<kw name="json.Get Application Specific Features To Test" library="json_data_handler">
<var>${features}</var>
<arg>${category}</arg>
<arg>${json_data}</arg>
<kw name="Get Application Specific Features To Test" library="libraries.json_data_handler">
<var>${features}</var>
<arg>${category}</arg>
<arg>${json_data}</arg>
<doc>The get_application_specific_features_to_test method is used to get features of provided device from the json data of json file.
@param category:
@param json_data: json object of the json file
@return: list of features depending on category (test case type)</doc>
<msg timestamp="20220314 16:51:33.011" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220314 16:51:33.011" endtime="20220314 16:51:33.011"/>
</kw>
<msg timestamp="20220314 16:51:33.012" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220314 16:51:33.009" endtime="20220314 16:51:33.012"/>
</kw>
<kw name="keyword.Get Application Specific Keywords To Execute For Features" library="keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${category}</arg>
<kw name="Get All Application Specific Keywords" library="libraries.keyword_handler">
<var>${all_keywords}</var>
<arg>${application}</arg>
<arg>${category}</arg>
<doc>The get_all_application_specific_keywords method is used to get all keywords from .robot files
from folder structure of a given application
@param application: Name of the application for eg. kragle / kiros etc.
@return: dictionary of keywords with respective tags</doc>
<msg timestamp="20220314 16:51:33.033" level="INFO">${all_keywords} = {'Test: Sample Lua.Script_Editor_Validation': 'lua', 'Test: Global Settings - Send Error Logs Process': 'global_settings', 'Test: Global Settings - Desktop Notifications': 'global_settings', 'Test: Gl...</msg>
<status status="PASS" starttime="20220314 16:51:33.014" endtime="20220314 16:51:33.033"/>
</kw>
<kw name="Get Application Specific Keywords By Features" library="libraries.keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${all_keywords}</arg>
<doc>The get_keywords_by_features method is used to get keywords with respective tags/features from all keywords.
@param features: list of tags/features
@param all_keywords: dictionary of all keywords with respective tags/features
@return: dictionary of keywords with respective features</doc>
<msg timestamp="20220314 16:51:33.035" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220314 16:51:33.034" endtime="20220314 16:51:33.035"/>
</kw>
<msg timestamp="20220314 16:51:33.035" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220314 16:51:33.013" endtime="20220314 16:51:33.035"/>
</kw>
<kw name="Run Application Keywords">
<arg>&amp;{keywords}</arg>
<for flavor="IN">
<var>${item}</var>
<value>&amp;{keywords}</value>
<status status="PASS" starttime="20220314 16:51:33.036" endtime="20220314 16:51:33.037"/>
</for>
<status status="PASS" starttime="20220314 16:51:33.036" endtime="20220314 16:51:33.037"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.006" endtime="20220314 16:51:33.037"/>
</kw>
<kw name="Test App Features">
<arg>SYS</arg>
<kw name="json.Get Application Specific Features To Test" library="json_data_handler">
<var>${features}</var>
<arg>${category}</arg>
<arg>${json_data}</arg>
<kw name="Get Application Specific Features To Test" library="libraries.json_data_handler">
<var>${features}</var>
<arg>${category}</arg>
<arg>${json_data}</arg>
<doc>The get_application_specific_features_to_test method is used to get features of provided device from the json data of json file.
@param category:
@param json_data: json object of the json file
@return: list of features depending on category (test case type)</doc>
<msg timestamp="20220314 16:51:33.041" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220314 16:51:33.041" endtime="20220314 16:51:33.041"/>
</kw>
<msg timestamp="20220314 16:51:33.042" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220314 16:51:33.039" endtime="20220314 16:51:33.042"/>
</kw>
<kw name="keyword.Get Application Specific Keywords To Execute For Features" library="keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${category}</arg>
<kw name="Get All Application Specific Keywords" library="libraries.keyword_handler">
<var>${all_keywords}</var>
<arg>${application}</arg>
<arg>${category}</arg>
<doc>The get_all_application_specific_keywords method is used to get all keywords from .robot files
from folder structure of a given application
@param application: Name of the application for eg. kragle / kiros etc.
@return: dictionary of keywords with respective tags</doc>
<msg timestamp="20220314 16:51:33.048" level="INFO">${all_keywords} = {}</msg>
<status status="PASS" starttime="20220314 16:51:33.045" endtime="20220314 16:51:33.048"/>
</kw>
<kw name="Get Application Specific Keywords By Features" library="libraries.keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${all_keywords}</arg>
<doc>The get_keywords_by_features method is used to get keywords with respective tags/features from all keywords.
@param features: list of tags/features
@param all_keywords: dictionary of all keywords with respective tags/features
@return: dictionary of keywords with respective features</doc>
<msg timestamp="20220314 16:51:33.049" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220314 16:51:33.049" endtime="20220314 16:51:33.049"/>
</kw>
<msg timestamp="20220314 16:51:33.049" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220314 16:51:33.043" endtime="20220314 16:51:33.049"/>
</kw>
<kw name="Run Application Keywords">
<arg>&amp;{keywords}</arg>
<for flavor="IN">
<var>${item}</var>
<value>&amp;{keywords}</value>
<status status="PASS" starttime="20220314 16:51:33.050" endtime="20220314 16:51:33.050"/>
</for>
<status status="PASS" starttime="20220314 16:51:33.049" endtime="20220314 16:51:33.050"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.038" endtime="20220314 16:51:33.050"/>
</kw>
<kw name="Test App Features">
<arg>ROBOT</arg>
<kw name="json.Get Application Specific Features To Test" library="json_data_handler">
<var>${features}</var>
<arg>${category}</arg>
<arg>${json_data}</arg>
<kw name="Get Application Specific Features To Test" library="libraries.json_data_handler">
<var>${features}</var>
<arg>${category}</arg>
<arg>${json_data}</arg>
<doc>The get_application_specific_features_to_test method is used to get features of provided device from the json data of json file.
@param category:
@param json_data: json object of the json file
@return: list of features depending on category (test case type)</doc>
<msg timestamp="20220314 16:51:33.052" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220314 16:51:33.052" endtime="20220314 16:51:33.052"/>
</kw>
<msg timestamp="20220314 16:51:33.052" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220314 16:51:33.051" endtime="20220314 16:51:33.052"/>
</kw>
<kw name="keyword.Get Application Specific Keywords To Execute For Features" library="keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${category}</arg>
<kw name="Get All Application Specific Keywords" library="libraries.keyword_handler">
<var>${all_keywords}</var>
<arg>${application}</arg>
<arg>${category}</arg>
<doc>The get_all_application_specific_keywords method is used to get all keywords from .robot files
from folder structure of a given application
@param application: Name of the application for eg. kragle / kiros etc.
@return: dictionary of keywords with respective tags</doc>
<msg timestamp="20220314 16:51:33.062" level="INFO">${all_keywords} = {}</msg>
<status status="PASS" starttime="20220314 16:51:33.053" endtime="20220314 16:51:33.062"/>
</kw>
<kw name="Get Application Specific Keywords By Features" library="libraries.keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${all_keywords}</arg>
<doc>The get_keywords_by_features method is used to get keywords with respective tags/features from all keywords.
@param features: list of tags/features
@param all_keywords: dictionary of all keywords with respective tags/features
@return: dictionary of keywords with respective features</doc>
<msg timestamp="20220314 16:51:33.063" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220314 16:51:33.063" endtime="20220314 16:51:33.063"/>
</kw>
<msg timestamp="20220314 16:51:33.063" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220314 16:51:33.053" endtime="20220314 16:51:33.063"/>
</kw>
<kw name="Run Application Keywords">
<arg>&amp;{keywords}</arg>
<for flavor="IN">
<var>${item}</var>
<value>&amp;{keywords}</value>
<status status="PASS" starttime="20220314 16:51:33.064" endtime="20220314 16:51:33.064"/>
</for>
<status status="PASS" starttime="20220314 16:51:33.063" endtime="20220314 16:51:33.064"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.050" endtime="20220314 16:51:33.064"/>
</kw>
<doc>It runs application specific test cases</doc>
<tag>Pre-setup: application_specific</tag>
<status status="PASS" starttime="20220314 16:51:33.005" endtime="20220314 16:51:33.064"/>
</test>
<test id="s1-t2" name="Test Device Specific Test Cases">
<kw name="json.Get Devices To Test With Connection Type" library="json_data_handler">
<var>@{devices}</var>
<arg>${json_data}</arg>
<kw name="Get Devices To Test With Connection Type" library="libraries.json_data_handler">
<var>@{devices}</var>
<arg>${json_data}</arg>
<doc>The get_devices_to_test_with_connection_type method is used to get all devices (to be tested)
with the connection_type appeneded in the device_name
@param json_data: json object of the json file
@return: list of device_name + connection_type (to be tested)</doc>
<msg timestamp="20220314 16:51:33.066" level="INFO">@{devices} = [ G903 LIGHTSPEED:wired ]</msg>
<status status="PASS" starttime="20220314 16:51:33.066" endtime="20220314 16:51:33.066"/>
</kw>
<msg timestamp="20220314 16:51:33.066" level="INFO">@{devices} = [ G903 LIGHTSPEED:wired ]</msg>
<status status="PASS" starttime="20220314 16:51:33.065" endtime="20220314 16:51:33.066"/>
</kw>
<for flavor="IN">
<var>${device_name}</var>
<value>@{devices}</value>
<iter>
<var name="${device_name}">G903 LIGHTSPEED:wired</var>
<kw name="Test Device Features">
<arg>${device_name}</arg>
<arg>UI</arg>
<kw name="json.Get Data Of Device" library="json_data_handler">
<var>${device}</var>
<arg>${device_name}</arg>
<arg>${json_data}</arg>
<kw name="Get Data Of Device" library="libraries.json_data_handler">
<var>${device}</var>
<arg>${device_name}</arg>
<arg>${json_data}</arg>
<doc>The get_data_of_device method is used to get all details of provided device from json data
@param device: device name
@param json_data: whole json data from .json file (provided at runtime/intialization).
@return: device with all details from json data.</doc>
<msg timestamp="20220314 16:51:33.069" level="INFO">${device} = {'displayName': 'G903 LIGHTSPEED', 'connection_type': 'wired', 'hub': 3856831629, 'portNumber': 6, 'features': {'dpi': ['sys']}, 'pid': 'c091', 'productId': '0xc091', 'firmware': '23.1.13', 'modelId':...</msg>
<status status="PASS" starttime="20220314 16:51:33.068" endtime="20220314 16:51:33.069"/>
</kw>
<msg timestamp="20220314 16:51:33.069" level="INFO">${device} = {'displayName': 'G903 LIGHTSPEED', 'connection_type': 'wired', 'hub': 3856831629, 'portNumber': 6, 'features': {'dpi': ['sys']}, 'pid': 'c091', 'productId': '0xc091', 'firmware': '23.1.13', 'modelId':...</msg>
<status status="PASS" starttime="20220314 16:51:33.067" endtime="20220314 16:51:33.069"/>
</kw>
<kw name="json.Get Device Features" library="json_data_handler">
<var>${features}</var>
<arg>${device_name}</arg>
<arg>${category}</arg>
<arg>${json_data}</arg>
<kw name="Get Device Features" library="libraries.json_data_handler">
<var>${features}</var>
<arg>${device_name}</arg>
<arg>${category}</arg>
<arg>${json_data}</arg>
<doc>The get_device_features method is used to get features of provided device from the json data of json file.
@param device_name: name of the device
@param category: test case type eg, ui/sys/robot.
@param json_data: json object of the json file
@return: list of features depending on category (test case type)</doc>
<msg timestamp="20220314 16:51:33.070" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220314 16:51:33.070" endtime="20220314 16:51:33.070"/>
</kw>
<msg timestamp="20220314 16:51:33.071" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220314 16:51:33.069" endtime="20220314 16:51:33.071"/>
</kw>
<kw name="keyword.Get Device Specific Keywords To Execute For Features" library="keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${category}</arg>
<arg>${device['type']}</arg>
<kw name="Get All Device Specific Keywords" library="libraries.keyword_handler">
<var>${all_keywords}</var>
<arg>${application}</arg>
<arg>${category}</arg>
<arg>${device_type}</arg>
<doc>The get_all_device_specific_keywords method is used to get all keywords who are having ${device} as an argument
from .robot files from folder structure of a given application and category
@param application: Name of the application for eg. kragle / kiros etc.
@param category: UI/System/Robotics
@param device_type: Mouse/Keyboard
@return: dictionary of keywords with respective tags</doc>
<msg timestamp="20220314 16:51:33.087" level="INFO">${all_keywords} = {'Test: Local And Cloud Profile For Mouse': ['cloud_profile'], 'Test: OOB Software Support For Mouse': ['oob'], 'Test: Lightsync Effect For Mouse - GUI Verification': ['lightsync'], 'Test: Lightsync E...</msg>
<status status="PASS" starttime="20220314 16:51:33.087" endtime="20220314 16:51:33.087"/>
</kw>
<kw name="Get Device Specific Keywords By Features" library="libraries.keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${all_keywords}</arg>
<doc>The get_keywords_by_features method is used to get keywords with respective tags/features from all keywords.
@param features: list of tags/features
@param all_keywords: dictionary of all keywords with respective tags/features
@return: dictionary of keywords with respective features</doc>
<msg timestamp="20220314 16:51:33.088" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220314 16:51:33.088" endtime="20220314 16:51:33.088"/>
</kw>
<msg timestamp="20220314 16:51:33.088" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220314 16:51:33.072" endtime="20220314 16:51:33.088"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${dict_size}</var>
<arg>${keywords}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:51:33.089" level="INFO">Length is 0</msg>
<msg timestamp="20220314 16:51:33.089" level="INFO">${dict_size} = 0</msg>
<status status="PASS" starttime="20220314 16:51:33.089" endtime="20220314 16:51:33.089"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${dict_size}'=='0'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 16:51:33.090" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 16:51:33.089" endtime="20220314 16:51:33.090"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.066" endtime="20220314 16:51:33.090"/>
</kw>
<kw name="Test Device Features">
<arg>${device_name}</arg>
<arg>SYS</arg>
<kw name="json.Get Data Of Device" library="json_data_handler">
<var>${device}</var>
<arg>${device_name}</arg>
<arg>${json_data}</arg>
<kw name="Get Data Of Device" library="libraries.json_data_handler">
<var>${device}</var>
<arg>${device_name}</arg>
<arg>${json_data}</arg>
<doc>The get_data_of_device method is used to get all details of provided device from json data
@param device: device name
@param json_data: whole json data from .json file (provided at runtime/intialization).
@return: device with all details from json data.</doc>
<msg timestamp="20220314 16:51:33.091" level="INFO">${device} = {'displayName': 'G903 LIGHTSPEED', 'connection_type': 'wired', 'hub': 3856831629, 'portNumber': 6, 'features': {'dpi': ['sys']}, 'pid': 'c091', 'productId': '0xc091', 'firmware': '23.1.13', 'modelId':...</msg>
<status status="PASS" starttime="20220314 16:51:33.091" endtime="20220314 16:51:33.091"/>
</kw>
<msg timestamp="20220314 16:51:33.092" level="INFO">${device} = {'displayName': 'G903 LIGHTSPEED', 'connection_type': 'wired', 'hub': 3856831629, 'portNumber': 6, 'features': {'dpi': ['sys']}, 'pid': 'c091', 'productId': '0xc091', 'firmware': '23.1.13', 'modelId':...</msg>
<status status="PASS" starttime="20220314 16:51:33.091" endtime="20220314 16:51:33.092"/>
</kw>
<kw name="json.Get Device Features" library="json_data_handler">
<var>${features}</var>
<arg>${device_name}</arg>
<arg>${category}</arg>
<arg>${json_data}</arg>
<kw name="Get Device Features" library="libraries.json_data_handler">
<var>${features}</var>
<arg>${device_name}</arg>
<arg>${category}</arg>
<arg>${json_data}</arg>
<doc>The get_device_features method is used to get features of provided device from the json data of json file.
@param device_name: name of the device
@param category: test case type eg, ui/sys/robot.
@param json_data: json object of the json file
@return: list of features depending on category (test case type)</doc>
<msg timestamp="20220314 16:51:33.093" level="INFO">${features} = ['dpi']</msg>
<status status="PASS" starttime="20220314 16:51:33.092" endtime="20220314 16:51:33.093"/>
</kw>
<msg timestamp="20220314 16:51:33.093" level="INFO">${features} = ['dpi']</msg>
<status status="PASS" starttime="20220314 16:51:33.092" endtime="20220314 16:51:33.093"/>
</kw>
<kw name="keyword.Get Device Specific Keywords To Execute For Features" library="keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${category}</arg>
<arg>${device['type']}</arg>
<kw name="Get All Device Specific Keywords" library="libraries.keyword_handler">
<var>${all_keywords}</var>
<arg>${application}</arg>
<arg>${category}</arg>
<arg>${device_type}</arg>
<doc>The get_all_device_specific_keywords method is used to get all keywords who are having ${device} as an argument
from .robot files from folder structure of a given application and category
@param application: Name of the application for eg. kragle / kiros etc.
@param category: UI/System/Robotics
@param device_type: Mouse/Keyboard
@return: dictionary of keywords with respective tags</doc>
<msg timestamp="20220314 16:51:33.100" level="INFO">${all_keywords} = {'Test: DPI With Onboard Profile For Mouse': ['dpi'], 'Test: DPI Sensitivity For Mouse': ['dpi'], 'Test: DPI Sensitivity With Sleep System For Mouse': ['dpi'], 'Test: DPI Sensitivity With Restart G HU...</msg>
<status status="PASS" starttime="20220314 16:51:33.100" endtime="20220314 16:51:33.100"/>
</kw>
<kw name="Get Device Specific Keywords By Features" library="libraries.keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${all_keywords}</arg>
<doc>The get_keywords_by_features method is used to get keywords with respective tags/features from all keywords.
@param features: list of tags/features
@param all_keywords: dictionary of all keywords with respective tags/features
@return: dictionary of keywords with respective features</doc>
<msg timestamp="20220314 16:51:33.101" level="INFO">&amp;{keywords} = { Test: DPI With Onboard Profile For Mouse=dpi | Test: DPI Sensitivity For Mouse=dpi | Test: DPI Sensitivity With Sleep System For Mouse=dpi | Test: DPI Sensitivity With Restart G HUB For Mouse=dpi }</msg>
<status status="PASS" starttime="20220314 16:51:33.101" endtime="20220314 16:51:33.101"/>
</kw>
<msg timestamp="20220314 16:51:33.101" level="INFO">&amp;{keywords} = { Test: DPI With Onboard Profile For Mouse=dpi | Test: DPI Sensitivity For Mouse=dpi | Test: DPI Sensitivity With Sleep System For Mouse=dpi | Test: DPI Sensitivity With Restart G HUB For Mouse=dpi }</msg>
<status status="PASS" starttime="20220314 16:51:33.093" endtime="20220314 16:51:33.101"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${dict_size}</var>
<arg>${keywords}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:51:33.102" level="INFO">Length is 4</msg>
<msg timestamp="20220314 16:51:33.102" level="INFO">${dict_size} = 4</msg>
<status status="PASS" starttime="20220314 16:51:33.101" endtime="20220314 16:51:33.102"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${dict_size}'=='0'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:51:33.102" endtime="20220314 16:51:33.102"/>
</kw>
<kw name="device_connector.Is New Device Arrived" library="device_connector">
<var>${is_new_device}</var>
<arg>${device_name}</arg>
<kw name="Set Local Variable" library="BuiltIn">
<arg>${return_value}</arg>
<arg>False</arg>
<doc>Makes a variable available everywhere within the local scope.</doc>
<msg timestamp="20220314 16:51:33.113" level="INFO">${return_value} = False</msg>
<status status="PASS" starttime="20220314 16:51:33.103" endtime="20220314 16:51:33.113"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_equal}</var>
<arg>Should Be Equal</arg>
<arg>${old_device}</arg>
<arg>${new_device}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Should Be Equal" library="BuiltIn">
<arg>${old_device}</arg>
<arg>${new_device}</arg>
<doc>Fails if the given objects are unequal.</doc>
<msg timestamp="20220314 16:51:33.114" level="FAIL">EMPTY != G903 LIGHTSPEED:wired</msg>
<status status="FAIL" starttime="20220314 16:51:33.114" endtime="20220314 16:51:33.114"/>
</kw>
<msg timestamp="20220314 16:51:33.114" level="INFO">${is_equal} = False</msg>
<status status="PASS" starttime="20220314 16:51:33.113" endtime="20220314 16:51:33.114"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${is_equal}'=='False'</arg>
<arg>Set Local Variable</arg>
<arg>${return_value}</arg>
<arg>True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Local Variable" library="BuiltIn">
<arg>${return_value}</arg>
<arg>True</arg>
<doc>Makes a variable available everywhere within the local scope.</doc>
<msg timestamp="20220314 16:51:33.115" level="INFO">${return_value} = True</msg>
<status status="PASS" starttime="20220314 16:51:33.115" endtime="20220314 16:51:33.115"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.115" endtime="20220314 16:51:33.115"/>
</kw>
<msg timestamp="20220314 16:51:33.115" level="INFO">${is_new_device} = True</msg>
<status status="PASS" starttime="20220314 16:51:33.103" endtime="20220314 16:51:33.115"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${is_new_device}</arg>
<arg>device_connector.Disconnect Old Device And Connect New Device</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="device_connector.Disconnect Old Device And Connect New Device" library="device_connector">
<arg>${device_name}</arg>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${old_device}' == 'EMPTY'</arg>
<arg>Add Test Case</arg>
<arg>Connect Device: ${new_device}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>device_connector.Connect Device</arg>
<arg>${new_device}</arg>
<arg>Tags=Pre-setup: test_setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Add Test Case" library="libraries.Listener">
<arg>Connect Device: ${new_device}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>device_connector.Connect Device</arg>
<arg>${new_device}</arg>
<arg>Tags=Pre-setup: test_setup</arg>
<doc>Adds a test case to the current suite</doc>
<msg timestamp="20220314 16:51:33.128" level="INFO">C:\Users\cpgpq\AppData\Local\Programs\Python\Python39\Lib\site-packages\robot\model\keyword.py:120: UserWarning: 'keywords' attribute is read-only and deprecated since Robot Framework 4.0. Use 'body', 'setup' or 'teardown' instead.
  warnings.warn(self.deprecation_message, UserWarning)</msg>
<status status="PASS" starttime="20220314 16:51:33.117" endtime="20220314 16:51:33.128"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.117" endtime="20220314 16:51:33.128"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${old_device}' != 'EMPTY'</arg>
<arg>Add Test Case</arg>
<arg>Disconnect: ${old_device} &amp; Connect: ${new_device}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>device_connector.Disconnect Old And Connect New</arg>
<arg>${old_device}</arg>
<arg>${new_device}</arg>
<arg>Tags=Pre-setup: test_setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:51:33.129" endtime="20220314 16:51:33.129"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${old_device}</arg>
<arg>${new_device}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220314 16:51:33.129" level="INFO">${old_device} = G903 LIGHTSPEED:wired</msg>
<status status="PASS" starttime="20220314 16:51:33.129" endtime="20220314 16:51:33.129"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.116" endtime="20220314 16:51:33.130"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.116" endtime="20220314 16:51:33.130"/>
</kw>
<for flavor="IN">
<var>${item}</var>
<value>&amp;{keywords}</value>
<iter>
<var name="${item}">('Test: DPI With Onboard Profile For Mouse', 'dpi')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>${item}[0]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220314 16:51:33.130" level="INFO">${keyword} = Test: DPI With Onboard Profile For Mouse</msg>
<status status="PASS" starttime="20220314 16:51:33.130" endtime="20220314 16:51:33.130"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${feature}</var>
<arg>${item}[1]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220314 16:51:33.131" level="INFO">${feature} = dpi</msg>
<status status="PASS" starttime="20220314 16:51:33.130" endtime="20220314 16:51:33.131"/>
</kw>
<kw name="Convert To Title Case" library="String">
<var>${conn_type}</var>
<arg>${device['connection_type']}</arg>
<doc>Converts string to title case.</doc>
<msg timestamp="20220314 16:51:33.138" level="INFO">${conn_type} = Wired</msg>
<status status="PASS" starttime="20220314 16:51:33.131" endtime="20220314 16:51:33.138"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${tags}</var>
<arg>Feature: ${feature}</arg>
<arg>Device: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>OS: ${os_version}</arg>
<arg>Device Type: ${device['type']}</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20220314 16:51:33.150" level="INFO">${tags} = ['Feature: dpi', 'Device: G903 LIGHTSPEED (Windows, Wired)', 'OS: Windows-10-10.0.22000-SP0', 'Device Type: MOUSE']</msg>
<status status="PASS" starttime="20220314 16:51:33.139" endtime="20220314 16:51:33.150"/>
</kw>
<kw name="Add Test Case" library="libraries.Listener">
<arg>${keyword}: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>${keyword}</arg>
<arg>${device}</arg>
<arg>Tags=${tags}</arg>
<doc>Adds a test case to the current suite</doc>
<status status="PASS" starttime="20220314 16:51:33.151" endtime="20220314 16:51:33.157"/>
</kw>
<kw name="Check Point To Reset GHUB">
<kw name="Evaluate" library="BuiltIn">
<var>${counter}</var>
<arg>${counter} + 1</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220314 16:51:33.158" level="INFO">${counter} = 1</msg>
<status status="PASS" starttime="20220314 16:51:33.158" endtime="20220314 16:51:33.158"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${reset}</var>
<arg>${counter} % ${reset_ghub_after_every_tcs}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220314 16:51:33.158" level="INFO">${reset} = 1</msg>
<status status="PASS" starttime="20220314 16:51:33.158" endtime="20220314 16:51:33.158"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Update Reset Number</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:51:33.159" endtime="20220314 16:51:33.159"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Add Test Case</arg>
<arg>Reset G HUB: ${reset_number}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>common.Clear App Settings And Start Fresh With Unlocking Persistent Profile</arg>
<arg>Tags=Pre-setup: reset_ghub</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:51:33.159" endtime="20220314 16:51:33.159"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${counter}</arg>
<arg>${counter}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20220314 16:51:33.160" level="INFO">${counter} = 1</msg>
<status status="PASS" starttime="20220314 16:51:33.160" endtime="20220314 16:51:33.160"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.157" endtime="20220314 16:51:33.160"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.130" endtime="20220314 16:51:33.160"/>
</iter>
<iter>
<var name="${item}">('Test: DPI Sensitivity For Mouse', 'dpi')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>${item}[0]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220314 16:51:33.160" level="INFO">${keyword} = Test: DPI Sensitivity For Mouse</msg>
<status status="PASS" starttime="20220314 16:51:33.160" endtime="20220314 16:51:33.160"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${feature}</var>
<arg>${item}[1]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220314 16:51:33.161" level="INFO">${feature} = dpi</msg>
<status status="PASS" starttime="20220314 16:51:33.161" endtime="20220314 16:51:33.161"/>
</kw>
<kw name="Convert To Title Case" library="String">
<var>${conn_type}</var>
<arg>${device['connection_type']}</arg>
<doc>Converts string to title case.</doc>
<msg timestamp="20220314 16:51:33.168" level="INFO">${conn_type} = Wired</msg>
<status status="PASS" starttime="20220314 16:51:33.161" endtime="20220314 16:51:33.168"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${tags}</var>
<arg>Feature: ${feature}</arg>
<arg>Device: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>OS: ${os_version}</arg>
<arg>Device Type: ${device['type']}</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20220314 16:51:33.180" level="INFO">${tags} = ['Feature: dpi', 'Device: G903 LIGHTSPEED (Windows, Wired)', 'OS: Windows-10-10.0.22000-SP0', 'Device Type: MOUSE']</msg>
<status status="PASS" starttime="20220314 16:51:33.168" endtime="20220314 16:51:33.180"/>
</kw>
<kw name="Add Test Case" library="libraries.Listener">
<arg>${keyword}: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>${keyword}</arg>
<arg>${device}</arg>
<arg>Tags=${tags}</arg>
<doc>Adds a test case to the current suite</doc>
<status status="PASS" starttime="20220314 16:51:33.180" endtime="20220314 16:51:33.186"/>
</kw>
<kw name="Check Point To Reset GHUB">
<kw name="Evaluate" library="BuiltIn">
<var>${counter}</var>
<arg>${counter} + 1</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220314 16:51:33.187" level="INFO">${counter} = 2</msg>
<status status="PASS" starttime="20220314 16:51:33.187" endtime="20220314 16:51:33.187"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${reset}</var>
<arg>${counter} % ${reset_ghub_after_every_tcs}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220314 16:51:33.188" level="INFO">${reset} = 2</msg>
<status status="PASS" starttime="20220314 16:51:33.187" endtime="20220314 16:51:33.188"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Update Reset Number</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:51:33.188" endtime="20220314 16:51:33.188"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Add Test Case</arg>
<arg>Reset G HUB: ${reset_number}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>common.Clear App Settings And Start Fresh With Unlocking Persistent Profile</arg>
<arg>Tags=Pre-setup: reset_ghub</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:51:33.188" endtime="20220314 16:51:33.188"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${counter}</arg>
<arg>${counter}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20220314 16:51:33.189" level="INFO">${counter} = 2</msg>
<status status="PASS" starttime="20220314 16:51:33.189" endtime="20220314 16:51:33.189"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.187" endtime="20220314 16:51:33.189"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.160" endtime="20220314 16:51:33.189"/>
</iter>
<iter>
<var name="${item}">('Test: DPI Sensitivity With Sleep System For Mouse', 'dpi')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>${item}[0]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220314 16:51:33.190" level="INFO">${keyword} = Test: DPI Sensitivity With Sleep System For Mouse</msg>
<status status="PASS" starttime="20220314 16:51:33.189" endtime="20220314 16:51:33.190"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${feature}</var>
<arg>${item}[1]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220314 16:51:33.190" level="INFO">${feature} = dpi</msg>
<status status="PASS" starttime="20220314 16:51:33.190" endtime="20220314 16:51:33.190"/>
</kw>
<kw name="Convert To Title Case" library="String">
<var>${conn_type}</var>
<arg>${device['connection_type']}</arg>
<doc>Converts string to title case.</doc>
<msg timestamp="20220314 16:51:33.197" level="INFO">${conn_type} = Wired</msg>
<status status="PASS" starttime="20220314 16:51:33.190" endtime="20220314 16:51:33.197"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${tags}</var>
<arg>Feature: ${feature}</arg>
<arg>Device: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>OS: ${os_version}</arg>
<arg>Device Type: ${device['type']}</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20220314 16:51:33.209" level="INFO">${tags} = ['Feature: dpi', 'Device: G903 LIGHTSPEED (Windows, Wired)', 'OS: Windows-10-10.0.22000-SP0', 'Device Type: MOUSE']</msg>
<status status="PASS" starttime="20220314 16:51:33.197" endtime="20220314 16:51:33.209"/>
</kw>
<kw name="Add Test Case" library="libraries.Listener">
<arg>${keyword}: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>${keyword}</arg>
<arg>${device}</arg>
<arg>Tags=${tags}</arg>
<doc>Adds a test case to the current suite</doc>
<status status="PASS" starttime="20220314 16:51:33.209" endtime="20220314 16:51:33.217"/>
</kw>
<kw name="Check Point To Reset GHUB">
<kw name="Evaluate" library="BuiltIn">
<var>${counter}</var>
<arg>${counter} + 1</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220314 16:51:33.219" level="INFO">${counter} = 3</msg>
<status status="PASS" starttime="20220314 16:51:33.218" endtime="20220314 16:51:33.219"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${reset}</var>
<arg>${counter} % ${reset_ghub_after_every_tcs}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220314 16:51:33.219" level="INFO">${reset} = 3</msg>
<status status="PASS" starttime="20220314 16:51:33.219" endtime="20220314 16:51:33.219"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Update Reset Number</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:51:33.220" endtime="20220314 16:51:33.220"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Add Test Case</arg>
<arg>Reset G HUB: ${reset_number}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>common.Clear App Settings And Start Fresh With Unlocking Persistent Profile</arg>
<arg>Tags=Pre-setup: reset_ghub</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:51:33.220" endtime="20220314 16:51:33.220"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${counter}</arg>
<arg>${counter}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20220314 16:51:33.221" level="INFO">${counter} = 3</msg>
<status status="PASS" starttime="20220314 16:51:33.221" endtime="20220314 16:51:33.221"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.217" endtime="20220314 16:51:33.221"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.189" endtime="20220314 16:51:33.221"/>
</iter>
<iter>
<var name="${item}">('Test: DPI Sensitivity With Restart G HUB For Mouse', 'dpi')</var>
<kw name="Set Variable" library="BuiltIn">
<var>${keyword}</var>
<arg>${item}[0]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220314 16:51:33.221" level="INFO">${keyword} = Test: DPI Sensitivity With Restart G HUB For Mouse</msg>
<status status="PASS" starttime="20220314 16:51:33.221" endtime="20220314 16:51:33.222"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${feature}</var>
<arg>${item}[1]</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220314 16:51:33.222" level="INFO">${feature} = dpi</msg>
<status status="PASS" starttime="20220314 16:51:33.222" endtime="20220314 16:51:33.222"/>
</kw>
<kw name="Convert To Title Case" library="String">
<var>${conn_type}</var>
<arg>${device['connection_type']}</arg>
<doc>Converts string to title case.</doc>
<msg timestamp="20220314 16:51:33.229" level="INFO">${conn_type} = Wired</msg>
<status status="PASS" starttime="20220314 16:51:33.222" endtime="20220314 16:51:33.229"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>${tags}</var>
<arg>Feature: ${feature}</arg>
<arg>Device: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>OS: ${os_version}</arg>
<arg>Device Type: ${device['type']}</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20220314 16:51:33.240" level="INFO">${tags} = ['Feature: dpi', 'Device: G903 LIGHTSPEED (Windows, Wired)', 'OS: Windows-10-10.0.22000-SP0', 'Device Type: MOUSE']</msg>
<status status="PASS" starttime="20220314 16:51:33.229" endtime="20220314 16:51:33.240"/>
</kw>
<kw name="Add Test Case" library="libraries.Listener">
<arg>${keyword}: ${device['displayName']} (${os_type}, ${conn_type})</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>${keyword}</arg>
<arg>${device}</arg>
<arg>Tags=${tags}</arg>
<doc>Adds a test case to the current suite</doc>
<status status="PASS" starttime="20220314 16:51:33.240" endtime="20220314 16:51:33.249"/>
</kw>
<kw name="Check Point To Reset GHUB">
<kw name="Evaluate" library="BuiltIn">
<var>${counter}</var>
<arg>${counter} + 1</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220314 16:51:33.250" level="INFO">${counter} = 4</msg>
<status status="PASS" starttime="20220314 16:51:33.250" endtime="20220314 16:51:33.250"/>
</kw>
<kw name="Evaluate" library="BuiltIn">
<var>${reset}</var>
<arg>${counter} % ${reset_ghub_after_every_tcs}</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20220314 16:51:33.252" level="INFO">${reset} = 4</msg>
<status status="PASS" starttime="20220314 16:51:33.252" endtime="20220314 16:51:33.252"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Update Reset Number</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:51:33.252" endtime="20220314 16:51:33.253"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${reset}==0</arg>
<arg>Add Test Case</arg>
<arg>Reset G HUB: ${reset_number}</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>common.Clear App Settings And Start Fresh With Unlocking Persistent Profile</arg>
<arg>Tags=Pre-setup: reset_ghub</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:51:33.253" endtime="20220314 16:51:33.253"/>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<arg>${counter}</arg>
<arg>${counter}</arg>
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<msg timestamp="20220314 16:51:33.253" level="INFO">${counter} = 4</msg>
<status status="PASS" starttime="20220314 16:51:33.253" endtime="20220314 16:51:33.253"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.250" endtime="20220314 16:51:33.254"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.221" endtime="20220314 16:51:33.254"/>
</iter>
<status status="PASS" starttime="20220314 16:51:33.130" endtime="20220314 16:51:33.254"/>
</for>
<status status="PASS" starttime="20220314 16:51:33.090" endtime="20220314 16:51:33.254"/>
</kw>
<kw name="Test Device Features">
<arg>${device_name}</arg>
<arg>ROBOT</arg>
<kw name="json.Get Data Of Device" library="json_data_handler">
<var>${device}</var>
<arg>${device_name}</arg>
<arg>${json_data}</arg>
<kw name="Get Data Of Device" library="libraries.json_data_handler">
<var>${device}</var>
<arg>${device_name}</arg>
<arg>${json_data}</arg>
<doc>The get_data_of_device method is used to get all details of provided device from json data
@param device: device name
@param json_data: whole json data from .json file (provided at runtime/intialization).
@return: device with all details from json data.</doc>
<msg timestamp="20220314 16:51:33.255" level="INFO">${device} = {'displayName': 'G903 LIGHTSPEED', 'connection_type': 'wired', 'hub': 3856831629, 'portNumber': 6, 'features': {'dpi': ['sys']}, 'pid': 'c091', 'productId': '0xc091', 'firmware': '23.1.13', 'modelId':...</msg>
<status status="PASS" starttime="20220314 16:51:33.255" endtime="20220314 16:51:33.255"/>
</kw>
<msg timestamp="20220314 16:51:33.255" level="INFO">${device} = {'displayName': 'G903 LIGHTSPEED', 'connection_type': 'wired', 'hub': 3856831629, 'portNumber': 6, 'features': {'dpi': ['sys']}, 'pid': 'c091', 'productId': '0xc091', 'firmware': '23.1.13', 'modelId':...</msg>
<status status="PASS" starttime="20220314 16:51:33.254" endtime="20220314 16:51:33.255"/>
</kw>
<kw name="json.Get Device Features" library="json_data_handler">
<var>${features}</var>
<arg>${device_name}</arg>
<arg>${category}</arg>
<arg>${json_data}</arg>
<kw name="Get Device Features" library="libraries.json_data_handler">
<var>${features}</var>
<arg>${device_name}</arg>
<arg>${category}</arg>
<arg>${json_data}</arg>
<doc>The get_device_features method is used to get features of provided device from the json data of json file.
@param device_name: name of the device
@param category: test case type eg, ui/sys/robot.
@param json_data: json object of the json file
@return: list of features depending on category (test case type)</doc>
<msg timestamp="20220314 16:51:33.256" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220314 16:51:33.256" endtime="20220314 16:51:33.256"/>
</kw>
<msg timestamp="20220314 16:51:33.257" level="INFO">${features} = []</msg>
<status status="PASS" starttime="20220314 16:51:33.256" endtime="20220314 16:51:33.257"/>
</kw>
<kw name="keyword.Get Device Specific Keywords To Execute For Features" library="keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${category}</arg>
<arg>${device['type']}</arg>
<kw name="Get All Device Specific Keywords" library="libraries.keyword_handler">
<var>${all_keywords}</var>
<arg>${application}</arg>
<arg>${category}</arg>
<arg>${device_type}</arg>
<doc>The get_all_device_specific_keywords method is used to get all keywords who are having ${device} as an argument
from .robot files from folder structure of a given application and category
@param application: Name of the application for eg. kragle / kiros etc.
@param category: UI/System/Robotics
@param device_type: Mouse/Keyboard
@return: dictionary of keywords with respective tags</doc>
<msg timestamp="20220314 16:51:33.263" level="INFO">${all_keywords} = {'Test: Command Assignments For Mouse': ['assignments'], 'Test: System Command Assignments For Mouse': ['assignments'], 'Test: Macro Command Assignments For Mouse': ['assignments'], 'Test: System Comm...</msg>
<status status="PASS" starttime="20220314 16:51:33.262" endtime="20220314 16:51:33.263"/>
</kw>
<kw name="Get Device Specific Keywords By Features" library="libraries.keyword_handler">
<var>&amp;{keywords}</var>
<arg>${features}</arg>
<arg>${all_keywords}</arg>
<doc>The get_keywords_by_features method is used to get keywords with respective tags/features from all keywords.
@param features: list of tags/features
@param all_keywords: dictionary of all keywords with respective tags/features
@return: dictionary of keywords with respective features</doc>
<msg timestamp="20220314 16:51:33.263" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220314 16:51:33.263" endtime="20220314 16:51:33.263"/>
</kw>
<msg timestamp="20220314 16:51:33.263" level="INFO">&amp;{keywords} = { }</msg>
<status status="PASS" starttime="20220314 16:51:33.257" endtime="20220314 16:51:33.263"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${dict_size}</var>
<arg>${keywords}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:51:33.264" level="INFO">Length is 0</msg>
<msg timestamp="20220314 16:51:33.264" level="INFO">${dict_size} = 0</msg>
<status status="PASS" starttime="20220314 16:51:33.264" endtime="20220314 16:51:33.264"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${dict_size}'=='0'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 16:51:33.264" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 16:51:33.264" endtime="20220314 16:51:33.264"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.254" endtime="20220314 16:51:33.265"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.066" endtime="20220314 16:51:33.265"/>
</iter>
<status status="PASS" starttime="20220314 16:51:33.066" endtime="20220314 16:51:33.265"/>
</for>
<doc>It runs device specific test cases depending on features for UI, System and Robotics.</doc>
<tag>Pre-setup: device_specific</tag>
<status status="PASS" starttime="20220314 16:51:33.064" endtime="20220314 16:51:33.265"/>
</test>
<test id="s1-t3" name="Connect Device: G903 LIGHTSPEED:wired">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>device_connector.Connect Device</arg>
<arg>G903 LIGHTSPEED:wired</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="device_connector.Connect Device" library="device_connector">
<arg>G903 LIGHTSPEED:wired</arg>
<doc>Connect devices to the acroname using device data available in json file.</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${device_connection_type}' != 'Acroname'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:51:33.266" endtime="20220314 16:51:33.266"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Connecting DUT: ${device_name}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:51:33.267" endtime="20220314 16:51:33.267"/>
</kw>
<kw name="Fetch From Left" library="String">
<var>${device_name}</var>
<arg>${device_name}</arg>
<arg>:</arg>
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<msg timestamp="20220314 16:51:33.267" level="INFO">${device_name} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:51:33.267" endtime="20220314 16:51:33.267"/>
</kw>
<kw name="device_connector.Connect To Acroname Device" library="device_connector">
<arg>${device_name}</arg>
<kw name="Connect Device" library="libraries.acroname_hub.device.Device">
<arg>${device_name}</arg>
<msg timestamp="20220314 16:51:34.274" level="INFO">6
3856831629
C4087
3856831629</msg>
<status status="PASS" starttime="20220314 16:51:33.268" endtime="20220314 16:51:34.274"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.268" endtime="20220314 16:51:34.274"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.266" endtime="20220314 16:51:34.274"/>
</kw>
<status status="PASS" starttime="20220314 16:51:33.265" endtime="20220314 16:51:34.274"/>
</kw>
<tag>Pre-setup: test_setup</tag>
<status status="PASS" starttime="20220314 16:51:33.265" endtime="20220314 16:51:34.275"/>
</test>
<test id="s1-t4" name="Test: DPI With Onboard Profile For Mouse: G903 LIGHTSPEED (Windows, Wired)">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Test: DPI With Onboard Profile For Mouse</arg>
<arg>{'displayName': 'G903 LIGHTSPEED', 'connection_type': 'wired', 'hub': 3856831629, 'portNumber': 6, 'features': {'dpi': ['sys']}, 'pid': 'c091', 'productId': '0xc091', 'firmware': '23.1.13', 'modelId': 'c4087', 'type': 'MOUSE', 'device_specific_features': {'lightsync': {'primary': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer'], 'logo': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}, 'device_settings': ['DPI Lighting', 'Startup Effect', 'Low Battery Mode', 'Firmware Version', 'On-Board Memory Mode', 'Battery Level']}, 'connection_interfaces': {'wired': {'pid': 'c091', 'productId': '0xc091'}, 'wireless': {'pid': '0x4087', 'productId': '0x4087'}}}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Test: DPI With Onboard Profile For Mouse" library="mouse_regression_system">
<arg>{'displayName': 'G903 LIGHTSPEED', 'connection_type': 'wired', 'hub': 3856831629, 'portNumber': 6, 'features': {'dpi': ['sys']}, 'pid': 'c091', 'productId': '0xc091', 'firmware': '23.1.13', 'modelId': 'c4087', 'type': 'MOUSE', 'device_specific_features': {'lightsync': {'primary': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer'], 'logo': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}, 'device_settings': ['DPI Lighting', 'Startup Effect', 'Low Battery Mode', 'Firmware Version', 'On-Board Memory Mode', 'Battery Level']}, 'connection_interfaces': {'wired': {'pid': 'c091', 'productId': '0xc091'}, 'wireless': {'pid': '0x4087', 'productId': '0x4087'}}}</arg>
<tag>dpi</tag>
<doc>Creates sample profile and saves those into onboard mode and checks their DPI sensitivity.
Also we can skip devices in the test depending on their 'displayName' and 'pid'
- Run dpi test with On-Board Profile Sensitivity Test for every device.
Disable onborad mode for device and change default profile DPI
Reset onbord profile for device and saves earlier created profiles into onboard mode
Verifies the Onboard DPI is set accrodingly
Disable Onboard mode and change the profile DPI - Verify it doesn't alter Onboard DPI</doc>
<kw name="dpi.Create And Upload Onboard Profile with different DPI for Mouse device" library="dpi">
<arg>${device}</arg>
<doc>Selects different profiles and assigns dpi and report rate with different values.
Upload it on onbaod memory of device</doc>
<kw name="profile.Create Profiles" library="profile">
<arg>1</arg>
<arg>2</arg>
<doc>Create profiles with provided profile names if profile is already created with the same name then do nothing.</doc>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:51:39.329" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:51:34.301" endtime="20220314 16:51:39.329"/>
</kw>
<status status="FAIL" starttime="20220314 16:51:34.300" endtime="20220314 16:51:39.332"/>
</kw>
<msg timestamp="20220314 16:51:39.332" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 16:51:34.300" endtime="20220314 16:51:39.332"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 16:51:39.332" endtime="20220314 16:51:39.334"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:51:39.334" endtime="20220314 16:51:39.334"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:51:39.335" endtime="20220314 16:51:39.335"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:51:39.336" endtime="20220314 16:51:39.336"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:51:39.337" endtime="20220314 16:51:39.337"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 16:51:39.338" endtime="20220314 16:51:39.338"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:51:39.332" endtime="20220314 16:51:39.338"/>
</branch>
<status status="PASS" starttime="20220314 16:51:39.332" endtime="20220314 16:51:39.338"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:51:39.341" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:51:39.340" endtime="20220314 16:51:39.341"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:51:39.342" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:51:39.342" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:51:39.341" endtime="20220314 16:51:39.342"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:51:39.343" endtime="20220314 16:51:39.359"/>
</kw>
<status status="PASS" starttime="20220314 16:51:39.342" endtime="20220314 16:51:39.359"/>
</kw>
<status status="PASS" starttime="20220314 16:51:39.339" endtime="20220314 16:51:39.360"/>
</kw>
<msg timestamp="20220314 16:51:39.360" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220314 16:51:39.339" endtime="20220314 16:51:39.360"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:51:39.361" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:51:39.361" endtime="20220314 16:51:39.362"/>
</kw>
<status status="PASS" starttime="20220314 16:51:34.300" endtime="20220314 16:51:39.362"/>
</iter>
<status status="PASS" starttime="20220314 16:51:34.299" endtime="20220314 16:51:39.363"/>
</for>
<status status="PASS" starttime="20220314 16:51:34.299" endtime="20220314 16:51:39.363"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:51:40.379" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 16:51:40.380" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:51:39.368" endtime="20220314 16:51:40.380"/>
</kw>
<msg timestamp="20220314 16:51:40.381" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:51:39.366" endtime="20220314 16:51:40.381"/>
</kw>
<msg timestamp="20220314 16:51:40.381" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:51:39.365" endtime="20220314 16:51:40.381"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:51:40.382" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:51:40.382" endtime="20220314 16:51:40.383"/>
</kw>
<status status="PASS" starttime="20220314 16:51:39.363" endtime="20220314 16:51:40.383"/>
</iter>
<status status="PASS" starttime="20220314 16:51:39.363" endtime="20220314 16:51:40.383"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:51:40.385" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:51:40.385" endtime="20220314 16:51:40.385"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:51:40.386" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:51:40.386" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:51:40.386" endtime="20220314 16:51:40.386"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:51:40.387" endtime="20220314 16:51:40.400"/>
</kw>
<status status="PASS" starttime="20220314 16:51:40.387" endtime="20220314 16:51:40.400"/>
</kw>
<status status="PASS" starttime="20220314 16:51:40.384" endtime="20220314 16:51:40.400"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:51:42.421" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:51:40.402" endtime="20220314 16:51:42.423"/>
</kw>
<status status="PASS" starttime="20220314 16:51:40.383" endtime="20220314 16:51:42.424"/>
</kw>
<status status="PASS" starttime="20220314 16:51:34.299" endtime="20220314 16:51:42.424"/>
</kw>
<kw name="home.Click On Appbar Application Name" library="home_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${home_appbar_application_name}</arg>
<arg>wait_timeout=10</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:51:42.429" level="INFO">${words} = ['.appbar-application-name']</msg>
<status status="PASS" starttime="20220314 16:51:42.428" endtime="20220314 16:51:42.429"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:51:42.430" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:51:42.430" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:51:42.429" endtime="20220314 16:51:42.430"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:51:42.431" endtime="20220314 16:51:43.036"/>
</kw>
<status status="PASS" starttime="20220314 16:51:42.430" endtime="20220314 16:51:43.036"/>
</kw>
<status status="PASS" starttime="20220314 16:51:42.427" endtime="20220314 16:51:43.037"/>
</kw>
<status status="PASS" starttime="20220314 16:51:42.426" endtime="20220314 16:51:43.038"/>
</kw>
<for flavor="IN">
<var>${profile_name}</var>
<value>@{profile_names}</value>
<iter>
<var name="${profile_name}">1</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${profile_present}</var>
<arg>profile_screen.Is Profile Present</arg>
<arg>${profile_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="profile_screen.Is Profile Present" library="profile_screen">
<arg>${profile_name}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${profile_card_title}</arg>
<arg>innerText=${profile_name}</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:51:46.249" level="INFO">Failed to find element with selector: .card-entry-title and attributes:{'innerText': '1'}</msg>
<msg timestamp="20220314 16:51:46.252" level="FAIL">Failure: Selector ".card-entry-title" with attribute(s) "{'innerText': '1'}" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:51:43.043" endtime="20220314 16:51:46.252"/>
</kw>
<status status="FAIL" starttime="20220314 16:51:43.041" endtime="20220314 16:51:46.254"/>
</kw>
<msg timestamp="20220314 16:51:46.254" level="INFO">${profile_present} = False</msg>
<status status="PASS" starttime="20220314 16:51:43.040" endtime="20220314 16:51:46.254"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${profile_present}==True</arg>
<arg>Log to console</arg>
<arg>Already Created Profile: ${profile_name}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:51:46.255" endtime="20220314 16:51:46.255"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${profile_present}==True</arg>
<arg>Continue For Loop</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:51:46.255" endtime="20220314 16:51:46.256"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Creating Profile: ${profile_name}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:51:46.256" endtime="20220314 16:51:46.256"/>
</kw>
<kw name="profile_screen.Click On Add Card Entry" library="profile_screen">
<kw name="Click" library="libraries.components.React">
<arg>${profile_card_entry}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:51:46.257" endtime="20220314 16:51:46.837"/>
</kw>
<status status="PASS" starttime="20220314 16:51:46.256" endtime="20220314 16:51:46.837"/>
</kw>
<kw name="profile_screen.Enter Card Name" library="profile_screen">
<arg>${profile_name}</arg>
<kw name="profile_screen.Verify Profile Name Text Area Present" library="profile_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${profile_add_card_name}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:51:46.843" endtime="20220314 16:51:46.869"/>
</kw>
<status status="PASS" starttime="20220314 16:51:46.841" endtime="20220314 16:51:46.869"/>
</kw>
<kw name="Input" library="libraries.components.React">
<arg>selector=${profile_add_card_name}</arg>
<arg>keys=${name}</arg>
<doc>Asserts that an element successfully receives input events for the given keys.</doc>
<status status="PASS" starttime="20220314 16:51:46.870" endtime="20220314 16:51:50.017"/>
</kw>
<status status="PASS" starttime="20220314 16:51:46.839" endtime="20220314 16:51:50.017"/>
</kw>
<status status="PASS" starttime="20220314 16:51:43.038" endtime="20220314 16:51:50.018"/>
</iter>
<iter>
<var name="${profile_name}">2</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${profile_present}</var>
<arg>profile_screen.Is Profile Present</arg>
<arg>${profile_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="profile_screen.Is Profile Present" library="profile_screen">
<arg>${profile_name}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${profile_card_title}</arg>
<arg>innerText=${profile_name}</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:51:53.287" level="INFO">Failed to find element with selector: .card-entry-title and attributes:{'innerText': '2'}</msg>
<msg timestamp="20220314 16:51:53.289" level="FAIL">Failure: Selector ".card-entry-title" with attribute(s) "{'innerText': '2'}" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:51:50.022" endtime="20220314 16:51:53.290"/>
</kw>
<status status="FAIL" starttime="20220314 16:51:50.021" endtime="20220314 16:51:53.292"/>
</kw>
<msg timestamp="20220314 16:51:53.292" level="INFO">${profile_present} = False</msg>
<status status="PASS" starttime="20220314 16:51:50.019" endtime="20220314 16:51:53.293"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${profile_present}==True</arg>
<arg>Log to console</arg>
<arg>Already Created Profile: ${profile_name}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:51:53.294" endtime="20220314 16:51:53.295"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${profile_present}==True</arg>
<arg>Continue For Loop</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:51:53.296" endtime="20220314 16:51:53.296"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Creating Profile: ${profile_name}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:51:53.298" endtime="20220314 16:51:53.298"/>
</kw>
<kw name="profile_screen.Click On Add Card Entry" library="profile_screen">
<kw name="Click" library="libraries.components.React">
<arg>${profile_card_entry}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:51:53.301" endtime="20220314 16:51:53.881"/>
</kw>
<status status="PASS" starttime="20220314 16:51:53.300" endtime="20220314 16:51:53.882"/>
</kw>
<kw name="profile_screen.Enter Card Name" library="profile_screen">
<arg>${profile_name}</arg>
<kw name="profile_screen.Verify Profile Name Text Area Present" library="profile_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${profile_add_card_name}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:51:53.887" endtime="20220314 16:51:53.919"/>
</kw>
<status status="PASS" starttime="20220314 16:51:53.885" endtime="20220314 16:51:53.920"/>
</kw>
<kw name="Input" library="libraries.components.React">
<arg>selector=${profile_add_card_name}</arg>
<arg>keys=${name}</arg>
<doc>Asserts that an element successfully receives input events for the given keys.</doc>
<status status="PASS" starttime="20220314 16:51:53.920" endtime="20220314 16:51:57.065"/>
</kw>
<status status="PASS" starttime="20220314 16:51:53.883" endtime="20220314 16:51:57.065"/>
</kw>
<status status="PASS" starttime="20220314 16:51:50.018" endtime="20220314 16:51:57.065"/>
</iter>
<status status="PASS" starttime="20220314 16:51:43.038" endtime="20220314 16:51:57.065"/>
</for>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:51:57.067" endtime="20220314 16:51:57.673"/>
</kw>
<status status="PASS" starttime="20220314 16:51:57.066" endtime="20220314 16:51:57.673"/>
</kw>
<status status="PASS" starttime="20220314 16:51:34.298" endtime="20220314 16:51:57.673"/>
</kw>
<kw name="home.Open Device Configuration" library="home_screen">
<arg>${device['displayName']}</arg>
<doc>Click on the device to open device configuration and if device introduction page opens then skip it.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device Home Screen Loaded</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device Home Screen Loaded" library="home_screen">
<arg>${device_name}</arg>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:52:02.709" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:51:57.688" endtime="20220314 16:52:02.709"/>
</kw>
<status status="FAIL" starttime="20220314 16:51:57.688" endtime="20220314 16:52:02.713"/>
</kw>
<msg timestamp="20220314 16:52:02.713" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 16:51:57.687" endtime="20220314 16:52:02.713"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 16:52:02.715" endtime="20220314 16:52:02.715"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:52:02.716" endtime="20220314 16:52:02.716"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:52:02.717" endtime="20220314 16:52:02.717"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:52:02.717" endtime="20220314 16:52:02.717"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:52:02.718" endtime="20220314 16:52:02.718"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 16:52:02.719" endtime="20220314 16:52:02.719"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:52:02.714" endtime="20220314 16:52:02.719"/>
</branch>
<status status="PASS" starttime="20220314 16:52:02.714" endtime="20220314 16:52:02.719"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:52:02.722" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:52:02.722" endtime="20220314 16:52:02.722"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:52:02.723" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:52:02.723" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:52:02.723" endtime="20220314 16:52:02.723"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:52:02.724" endtime="20220314 16:52:02.742"/>
</kw>
<status status="PASS" starttime="20220314 16:52:02.724" endtime="20220314 16:52:02.743"/>
</kw>
<status status="PASS" starttime="20220314 16:52:02.721" endtime="20220314 16:52:02.743"/>
</kw>
<msg timestamp="20220314 16:52:02.743" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220314 16:52:02.720" endtime="20220314 16:52:02.743"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:52:02.744" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:52:02.743" endtime="20220314 16:52:02.745"/>
</kw>
<status status="PASS" starttime="20220314 16:51:57.687" endtime="20220314 16:52:02.745"/>
</iter>
<status status="PASS" starttime="20220314 16:51:57.687" endtime="20220314 16:52:02.745"/>
</for>
<status status="PASS" starttime="20220314 16:51:57.686" endtime="20220314 16:52:02.746"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:52:03.815" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 16:52:03.816" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:52:02.748" endtime="20220314 16:52:03.817"/>
</kw>
<msg timestamp="20220314 16:52:03.817" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:52:02.748" endtime="20220314 16:52:03.817"/>
</kw>
<msg timestamp="20220314 16:52:03.818" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:52:02.747" endtime="20220314 16:52:03.818"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:52:03.820" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:52:03.819" endtime="20220314 16:52:03.821"/>
</kw>
<status status="PASS" starttime="20220314 16:52:02.746" endtime="20220314 16:52:03.821"/>
</iter>
<status status="PASS" starttime="20220314 16:52:02.746" endtime="20220314 16:52:03.821"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:52:03.824" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:52:03.824" endtime="20220314 16:52:03.824"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:52:03.825" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:52:03.825" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:52:03.825" endtime="20220314 16:52:03.825"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:52:03.827" endtime="20220314 16:52:03.841"/>
</kw>
<status status="PASS" starttime="20220314 16:52:03.826" endtime="20220314 16:52:03.841"/>
</kw>
<status status="PASS" starttime="20220314 16:52:03.823" endtime="20220314 16:52:03.841"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:52:05.852" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:52:03.842" endtime="20220314 16:52:05.854"/>
</kw>
<status status="PASS" starttime="20220314 16:52:03.822" endtime="20220314 16:52:05.854"/>
</kw>
<status status="PASS" starttime="20220314 16:51:57.686" endtime="20220314 16:52:05.855"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:52:07.878" level="INFO">Failed to find element with selector: .left-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:52:05.863" endtime="20220314 16:52:07.880"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:52:07.892" level="FAIL">Failure: Selector ".left-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 16:52:07.881" endtime="20220314 16:52:07.892"/>
</kw>
<status status="FAIL" starttime="20220314 16:52:05.862" endtime="20220314 16:52:07.895"/>
</kw>
<msg timestamp="20220314 16:52:07.895" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 16:52:05.861" endtime="20220314 16:52:07.895"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:52:07.897" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:52:07.896" endtime="20220314 16:52:07.898"/>
</kw>
<status status="PASS" starttime="20220314 16:52:05.860" endtime="20220314 16:52:07.898"/>
</iter>
<status status="PASS" starttime="20220314 16:52:05.859" endtime="20220314 16:52:07.898"/>
</for>
<status status="PASS" starttime="20220314 16:52:05.859" endtime="20220314 16:52:07.899"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:52:09.919" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:52:07.903" endtime="20220314 16:52:09.921"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:52:09.939" level="FAIL">Failure: Selector ".right-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 16:52:09.922" endtime="20220314 16:52:09.939"/>
</kw>
<status status="FAIL" starttime="20220314 16:52:07.902" endtime="20220314 16:52:09.941"/>
</kw>
<msg timestamp="20220314 16:52:09.941" level="INFO">${right_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 16:52:07.900" endtime="20220314 16:52:09.941"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:52:09.943" endtime="20220314 16:52:09.985"/>
</kw>
<msg timestamp="20220314 16:52:09.985" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220314 16:52:09.942" endtime="20220314 16:52:09.985"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:52:09.987" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:52:09.986" endtime="20220314 16:52:09.988"/>
</kw>
<status status="PASS" starttime="20220314 16:52:07.899" endtime="20220314 16:52:09.988"/>
</iter>
<status status="PASS" starttime="20220314 16:52:07.899" endtime="20220314 16:52:09.988"/>
</for>
<status status="PASS" starttime="20220314 16:52:05.856" endtime="20220314 16:52:09.989"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_device_in_active_state}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:52:09.992" endtime="20220314 16:52:10.019"/>
</kw>
<status status="PASS" starttime="20220314 16:52:09.991" endtime="20220314 16:52:10.019"/>
</kw>
<msg timestamp="20220314 16:52:10.019" level="INFO">${is_device_in_active_state} = True</msg>
<status status="PASS" starttime="20220314 16:52:09.990" endtime="20220314 16:52:10.019"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${is_device_in_active_state} is ${True}</arg>
<arg>${True}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 16:52:10.020" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 16:52:10.020" endtime="20220314 16:52:10.021"/>
</kw>
<status status="PASS" starttime="20220314 16:51:57.685" endtime="20220314 16:52:10.021"/>
</kw>
<msg timestamp="20220314 16:52:10.021" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:51:57.684" endtime="20220314 16:52:10.021"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'False'">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>${device_name} not loaded in GHub.</arg>
<status status="NOT RUN" starttime="20220314 16:52:10.022" endtime="20220314 16:52:10.022"/>
</kw>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220314 16:52:10.022" endtime="20220314 16:52:10.022"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:52:10.021" endtime="20220314 16:52:10.022"/>
</branch>
<status status="PASS" starttime="20220314 16:52:10.021" endtime="20220314 16:52:10.022"/>
</if>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:10.023" endtime="20220314 16:52:10.699"/>
</kw>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:52:12.758" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220314 16:52:12.759" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:52:10.702" endtime="20220314 16:52:12.760"/>
</kw>
<status status="PASS" starttime="20220314 16:52:10.701" endtime="20220314 16:52:12.760"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:52:14.824" level="FAIL">Failure: Selector "//*[@id="color-variant"]/button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:52:12.762" endtime="20220314 16:52:14.825"/>
</kw>
<status status="PASS" starttime="20220314 16:52:12.761" endtime="20220314 16:52:14.825"/>
</kw>
<status status="PASS" starttime="20220314 16:52:10.700" endtime="20220314 16:52:14.826"/>
</kw>
<kw name="device_view.Handle Got It Popup" library="device_main_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${got_it_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_got_it_button}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_got_it_button}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:52:19.866" level="FAIL">Failure: Selector "//div[@class='coach-mark']/button[text()='GOT IT']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:52:14.830" endtime="20220314 16:52:19.866"/>
</kw>
<msg timestamp="20220314 16:52:19.867" level="INFO">${got_it_button_present} = False</msg>
<status status="PASS" starttime="20220314 16:52:14.829" endtime="20220314 16:52:19.867"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${got_it_button_present} is ${False}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 16:52:19.869" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 16:52:19.868" endtime="20220314 16:52:19.870"/>
</kw>
<status status="PASS" starttime="20220314 16:52:14.827" endtime="20220314 16:52:19.870"/>
</kw>
<status status="PASS" starttime="20220314 16:51:57.674" endtime="20220314 16:52:19.870"/>
</kw>
<kw name="sensitivity_dpi.Select Sensitvity Dpi Button" library="sensitivity_dpi_screen">
<kw name="Click" library="libraries.components.React">
<arg>${sensitivity_dpi_senstivity_dpi}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:19.873" endtime="20220314 16:52:20.545"/>
</kw>
<status status="PASS" starttime="20220314 16:52:19.871" endtime="20220314 16:52:20.546"/>
</kw>
<kw name="device_View.Select Profile From Dropdown" library="device_main_screen">
<arg>Default</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${Status}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_profile_dropdown_item}</arg>
<arg>text=Default</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_profile_dropdown_item}</arg>
<arg>text=Default</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:52:21.622" level="INFO">Failed to find element with selector: .dropdown-item and attributes:{'text': 'Default'}</msg>
<msg timestamp="20220314 16:52:21.623" level="FAIL">Failure: Selector ".dropdown-item" with attribute(s) "{'text': 'Default'}" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:52:20.551" endtime="20220314 16:52:21.623"/>
</kw>
<msg timestamp="20220314 16:52:21.624" level="INFO">${Status} = False</msg>
<status status="PASS" starttime="20220314 16:52:20.550" endtime="20220314 16:52:21.624"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${Status} is ${False}</arg>
<arg>Click</arg>
<arg>selector=${device_view_profile_dropdown}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_view_profile_dropdown}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:21.627" endtime="20220314 16:52:22.192"/>
</kw>
<status status="PASS" starttime="20220314 16:52:21.625" endtime="20220314 16:52:22.192"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_view_profile_dropdown_item}</arg>
<arg>text=${profile_name}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:22.194" endtime="20220314 16:52:22.848"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.Select Yes On a Alert</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Select Yes On a Alert" library="common_keywords_kragle">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:52:26.739" level="INFO">Failed to find element with selector: .action-button and attributes:{'innerText': 'YES'}</msg>
<msg timestamp="20220314 16:52:26.741" level="FAIL">Failure: Selector ".action-button" with attribute(s) "{'innerText': 'YES'}" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:52:22.853" endtime="20220314 16:52:26.741"/>
</kw>
<status status="PASS" starttime="20220314 16:52:22.853" endtime="20220314 16:52:26.742"/>
</kw>
<status status="PASS" starttime="20220314 16:52:22.851" endtime="20220314 16:52:26.742"/>
</kw>
<status status="PASS" starttime="20220314 16:52:22.849" endtime="20220314 16:52:26.743"/>
</kw>
<status status="PASS" starttime="20220314 16:52:20.548" endtime="20220314 16:52:26.743"/>
</kw>
<kw name="sensitivity_dpi.Click On Restore Default Settings" library="sensitivity_dpi_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${sensitivity_dpi_restore_default}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:52:26.748" level="INFO">${words} = ['.panel-button', 'text=RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:52:26.748" endtime="20220314 16:52:26.748"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:52:26.750" level="INFO">Length is 2</msg>
<msg timestamp="20220314 16:52:26.750" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20220314 16:52:26.749" endtime="20220314 16:52:26.750"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="__Click UI Based On Attribute__" library="common_keywords_kragle">
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<doc>Internal fuction to do additional check on 'Click UI'. Not to be used anywhere else.</doc>
<kw name="Split String" library="String">
<var>${sub_words}</var>
<arg>${word}</arg>
<arg>=</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:52:26.754" level="INFO">${sub_words} = ['text', 'RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:52:26.753" endtime="20220314 16:52:26.754"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='text'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:26.755" endtime="20220314 16:52:27.370"/>
</kw>
<status status="PASS" starttime="20220314 16:52:26.755" endtime="20220314 16:52:27.370"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='innerText'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>innerText=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:52:27.372" endtime="20220314 16:52:27.373"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='value'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>value=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:52:27.374" endtime="20220314 16:52:27.374"/>
</kw>
<status status="PASS" starttime="20220314 16:52:26.752" endtime="20220314 16:52:27.375"/>
</kw>
<status status="PASS" starttime="20220314 16:52:26.751" endtime="20220314 16:52:27.375"/>
</kw>
<status status="PASS" starttime="20220314 16:52:26.746" endtime="20220314 16:52:27.376"/>
</kw>
<status status="PASS" starttime="20220314 16:52:26.745" endtime="20220314 16:52:27.376"/>
</kw>
<kw name="sensitivity_dpi.Select DPI By Level" library="sensitivity_dpi_screen">
<arg>1</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:27.379" endtime="20220314 16:52:27.961"/>
</kw>
<status status="PASS" starttime="20220314 16:52:27.377" endtime="20220314 16:52:27.961"/>
</kw>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>1</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:27.963" endtime="20220314 16:52:28.523"/>
</kw>
<status status="PASS" starttime="20220314 16:52:27.962" endtime="20220314 16:52:28.524"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_reportRate1}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:52:28.557" level="INFO">${report_rate} = 1000</msg>
<status status="PASS" starttime="20220314 16:52:28.527" endtime="20220314 16:52:28.557"/>
</kw>
<msg timestamp="20220314 16:52:28.558" level="INFO">${GUI_reportRate1} = 1000</msg>
<status status="PASS" starttime="20220314 16:52:28.526" endtime="20220314 16:52:28.558"/>
</kw>
<kw name="sensitivity_dpi.Get Current DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi1}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${dpi_current}</var>
<arg>selector=${sensitivity_dpi_speed_selected}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:52:28.583" level="INFO">${dpi_current} = 400</msg>
<status status="PASS" starttime="20220314 16:52:28.560" endtime="20220314 16:52:28.583"/>
</kw>
<msg timestamp="20220314 16:52:28.584" level="INFO">${GUI_dpi1} = 400</msg>
<status status="PASS" starttime="20220314 16:52:28.559" endtime="20220314 16:52:28.584"/>
</kw>
<kw name="device_View.Select Profile From Dropdown" library="device_main_screen">
<arg>1</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${Status}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_profile_dropdown_item}</arg>
<arg>text=Default</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_profile_dropdown_item}</arg>
<arg>text=Default</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:52:29.627" level="INFO">Failed to find element with selector: .dropdown-item and attributes:{'text': 'Default'}</msg>
<msg timestamp="20220314 16:52:29.628" level="FAIL">Failure: Selector ".dropdown-item" with attribute(s) "{'text': 'Default'}" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:52:28.586" endtime="20220314 16:52:29.628"/>
</kw>
<msg timestamp="20220314 16:52:29.629" level="INFO">${Status} = False</msg>
<status status="PASS" starttime="20220314 16:52:28.586" endtime="20220314 16:52:29.629"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${Status} is ${False}</arg>
<arg>Click</arg>
<arg>selector=${device_view_profile_dropdown}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_view_profile_dropdown}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:29.632" endtime="20220314 16:52:30.187"/>
</kw>
<status status="PASS" starttime="20220314 16:52:29.630" endtime="20220314 16:52:30.187"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_view_profile_dropdown_item}</arg>
<arg>text=${profile_name}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:30.189" endtime="20220314 16:52:30.864"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.Select Yes On a Alert</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Select Yes On a Alert" library="common_keywords_kragle">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:52:34.069" level="INFO">Failed to find element with selector: .action-button and attributes:{'innerText': 'YES'}</msg>
<msg timestamp="20220314 16:52:34.071" level="FAIL">Failure: Selector ".action-button" with attribute(s) "{'innerText': 'YES'}" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:52:30.869" endtime="20220314 16:52:34.071"/>
</kw>
<status status="PASS" starttime="20220314 16:52:30.869" endtime="20220314 16:52:34.072"/>
</kw>
<status status="PASS" starttime="20220314 16:52:30.867" endtime="20220314 16:52:34.072"/>
</kw>
<status status="PASS" starttime="20220314 16:52:30.866" endtime="20220314 16:52:34.073"/>
</kw>
<status status="PASS" starttime="20220314 16:52:28.585" endtime="20220314 16:52:34.073"/>
</kw>
<kw name="sensitivity_dpi.Select DPI By Level" library="sensitivity_dpi_screen">
<arg>2</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:34.075" endtime="20220314 16:52:34.660"/>
</kw>
<status status="PASS" starttime="20220314 16:52:34.074" endtime="20220314 16:52:34.660"/>
</kw>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>2</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:34.664" endtime="20220314 16:52:35.256"/>
</kw>
<status status="PASS" starttime="20220314 16:52:34.662" endtime="20220314 16:52:35.257"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_reportRate2}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:52:35.286" level="INFO">${report_rate} = 500</msg>
<status status="PASS" starttime="20220314 16:52:35.260" endtime="20220314 16:52:35.286"/>
</kw>
<msg timestamp="20220314 16:52:35.286" level="INFO">${GUI_reportRate2} = 500</msg>
<status status="PASS" starttime="20220314 16:52:35.259" endtime="20220314 16:52:35.287"/>
</kw>
<kw name="sensitivity_dpi.Get Current DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi2}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${dpi_current}</var>
<arg>selector=${sensitivity_dpi_speed_selected}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:52:35.315" level="INFO">${dpi_current} = 800</msg>
<status status="PASS" starttime="20220314 16:52:35.289" endtime="20220314 16:52:35.315"/>
</kw>
<msg timestamp="20220314 16:52:35.315" level="INFO">${GUI_dpi2} = 800</msg>
<status status="PASS" starttime="20220314 16:52:35.288" endtime="20220314 16:52:35.315"/>
</kw>
<kw name="device_View.Select Profile From Dropdown" library="device_main_screen">
<arg>2</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${Status}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_profile_dropdown_item}</arg>
<arg>text=Default</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_profile_dropdown_item}</arg>
<arg>text=Default</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:52:36.386" level="INFO">Failed to find element with selector: .dropdown-item and attributes:{'text': 'Default'}</msg>
<msg timestamp="20220314 16:52:36.387" level="FAIL">Failure: Selector ".dropdown-item" with attribute(s) "{'text': 'Default'}" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:52:35.319" endtime="20220314 16:52:36.388"/>
</kw>
<msg timestamp="20220314 16:52:36.388" level="INFO">${Status} = False</msg>
<status status="PASS" starttime="20220314 16:52:35.318" endtime="20220314 16:52:36.388"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${Status} is ${False}</arg>
<arg>Click</arg>
<arg>selector=${device_view_profile_dropdown}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_view_profile_dropdown}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:36.391" endtime="20220314 16:52:36.951"/>
</kw>
<status status="PASS" starttime="20220314 16:52:36.389" endtime="20220314 16:52:36.951"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_view_profile_dropdown_item}</arg>
<arg>text=${profile_name}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:36.953" endtime="20220314 16:52:37.630"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.Select Yes On a Alert</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Select Yes On a Alert" library="common_keywords_kragle">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:52:40.827" level="INFO">Failed to find element with selector: .action-button and attributes:{'innerText': 'YES'}</msg>
<msg timestamp="20220314 16:52:40.829" level="FAIL">Failure: Selector ".action-button" with attribute(s) "{'innerText': 'YES'}" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:52:37.635" endtime="20220314 16:52:40.829"/>
</kw>
<status status="PASS" starttime="20220314 16:52:37.634" endtime="20220314 16:52:40.830"/>
</kw>
<status status="PASS" starttime="20220314 16:52:37.633" endtime="20220314 16:52:40.830"/>
</kw>
<status status="PASS" starttime="20220314 16:52:37.631" endtime="20220314 16:52:40.830"/>
</kw>
<status status="PASS" starttime="20220314 16:52:35.317" endtime="20220314 16:52:40.831"/>
</kw>
<kw name="sensitivity_dpi.Select DPI By Level" library="sensitivity_dpi_screen">
<arg>3</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:40.832" endtime="20220314 16:52:41.405"/>
</kw>
<status status="PASS" starttime="20220314 16:52:40.831" endtime="20220314 16:52:41.407"/>
</kw>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>3</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:41.410" endtime="20220314 16:52:41.995"/>
</kw>
<status status="PASS" starttime="20220314 16:52:41.408" endtime="20220314 16:52:41.995"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_reportRate3}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:52:42.024" level="INFO">${report_rate} = 250</msg>
<status status="PASS" starttime="20220314 16:52:41.999" endtime="20220314 16:52:42.024"/>
</kw>
<msg timestamp="20220314 16:52:42.025" level="INFO">${GUI_reportRate3} = 250</msg>
<status status="PASS" starttime="20220314 16:52:41.997" endtime="20220314 16:52:42.025"/>
</kw>
<kw name="sensitivity_dpi.Get Current DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi3}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${dpi_current}</var>
<arg>selector=${sensitivity_dpi_speed_selected}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:52:42.052" level="INFO">${dpi_current} = 1600</msg>
<status status="PASS" starttime="20220314 16:52:42.028" endtime="20220314 16:52:42.053"/>
</kw>
<msg timestamp="20220314 16:52:42.053" level="INFO">${GUI_dpi3} = 1600</msg>
<status status="PASS" starttime="20220314 16:52:42.026" endtime="20220314 16:52:42.053"/>
</kw>
<kw name="device_View.Select Profile From Dropdown" library="device_main_screen">
<arg>Default</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${Status}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_profile_dropdown_item}</arg>
<arg>text=Default</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_profile_dropdown_item}</arg>
<arg>text=Default</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:52:43.115" level="INFO">Failed to find element with selector: .dropdown-item and attributes:{'text': 'Default'}</msg>
<msg timestamp="20220314 16:52:43.116" level="FAIL">Failure: Selector ".dropdown-item" with attribute(s) "{'text': 'Default'}" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:52:42.057" endtime="20220314 16:52:43.116"/>
</kw>
<msg timestamp="20220314 16:52:43.117" level="INFO">${Status} = False</msg>
<status status="PASS" starttime="20220314 16:52:42.056" endtime="20220314 16:52:43.117"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${Status} is ${False}</arg>
<arg>Click</arg>
<arg>selector=${device_view_profile_dropdown}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_view_profile_dropdown}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:43.119" endtime="20220314 16:52:43.679"/>
</kw>
<status status="PASS" starttime="20220314 16:52:43.118" endtime="20220314 16:52:43.679"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_view_profile_dropdown_item}</arg>
<arg>text=${profile_name}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:52:43.680" endtime="20220314 16:52:44.326"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.Select Yes On a Alert</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Select Yes On a Alert" library="common_keywords_kragle">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:52:47.537" level="INFO">Failed to find element with selector: .action-button and attributes:{'innerText': 'YES'}</msg>
<msg timestamp="20220314 16:52:47.539" level="FAIL">Failure: Selector ".action-button" with attribute(s) "{'innerText': 'YES'}" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:52:44.332" endtime="20220314 16:52:47.539"/>
</kw>
<status status="PASS" starttime="20220314 16:52:44.331" endtime="20220314 16:52:47.540"/>
</kw>
<status status="PASS" starttime="20220314 16:52:44.329" endtime="20220314 16:52:47.540"/>
</kw>
<status status="PASS" starttime="20220314 16:52:44.327" endtime="20220314 16:52:47.541"/>
</kw>
<status status="PASS" starttime="20220314 16:52:42.054" endtime="20220314 16:52:47.541"/>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>profile.Saving profile into on board memory</arg>
<arg>${device}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="profile.Saving Profile Into On Board Memory" library="profile">
<arg>${device}</arg>
<doc>Puts device on on board memory mode and enables grey profile (if present).
Also checks for profile 1 and 2 if present then selects those profiles to on board profile</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Saving profile into on-board memory</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:52:47.543" endtime="20220314 16:52:47.543"/>
</kw>
<kw name="device_settings.Enable Onboard Memory Mode" library="device_settings">
<arg>${device['displayName']}</arg>
<kw name="Log To Console" library="BuiltIn">
<arg>Enabling onboard mode: ${device_name}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:52:47.550" endtime="20220314 16:52:47.550"/>
</kw>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:52:52.580" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:52:47.553" endtime="20220314 16:52:52.580"/>
</kw>
<status status="FAIL" starttime="20220314 16:52:47.552" endtime="20220314 16:52:52.582"/>
</kw>
<msg timestamp="20220314 16:52:52.582" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 16:52:47.552" endtime="20220314 16:52:52.582"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 16:52:52.583" endtime="20220314 16:52:52.583"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:52:52.583" endtime="20220314 16:52:52.583"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:52:52.583" endtime="20220314 16:52:52.583"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:52:52.584" endtime="20220314 16:52:52.584"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:52:52.584" endtime="20220314 16:52:52.584"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 16:52:52.584" endtime="20220314 16:52:52.584"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:52:52.582" endtime="20220314 16:52:52.584"/>
</branch>
<status status="PASS" starttime="20220314 16:52:52.582" endtime="20220314 16:52:52.584"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:52:52.585" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:52:52.585" endtime="20220314 16:52:52.585"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:52:52.586" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:52:52.586" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:52:52.586" endtime="20220314 16:52:52.586"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:53:02.649" level="INFO">Failed to find element with selector: #home-view and attributes:{}</msg>
<msg timestamp="20220314 16:53:02.651" level="FAIL">Failure: Selector "#home-view" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:52:52.586" endtime="20220314 16:53:02.651"/>
</kw>
<status status="FAIL" starttime="20220314 16:52:52.586" endtime="20220314 16:53:02.652"/>
</kw>
<status status="FAIL" starttime="20220314 16:52:52.585" endtime="20220314 16:53:02.656"/>
</kw>
<msg timestamp="20220314 16:53:02.656" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220314 16:52:52.584" endtime="20220314 16:53:02.656"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:53:02.657" endtime="20220314 16:53:02.657"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:53:02.659" endtime="20220314 16:53:02.687"/>
</kw>
<msg timestamp="20220314 16:53:02.687" level="INFO">${back_button_present} = True</msg>
<status status="PASS" starttime="20220314 16:53:02.659" endtime="20220314 16:53:02.687"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:53:02.689" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:53:02.688" endtime="20220314 16:53:02.690"/>
</kw>
<status status="PASS" starttime="20220314 16:52:47.552" endtime="20220314 16:53:02.690"/>
</iter>
<status status="PASS" starttime="20220314 16:52:47.552" endtime="20220314 16:53:02.690"/>
</for>
<status status="PASS" starttime="20220314 16:52:47.551" endtime="20220314 16:53:02.690"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:53:02.693" endtime="20220314 16:53:02.706"/>
</kw>
<msg timestamp="20220314 16:53:02.706" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:53:02.693" endtime="20220314 16:53:02.706"/>
</kw>
<msg timestamp="20220314 16:53:02.707" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:53:02.692" endtime="20220314 16:53:02.707"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:53:02.707" endtime="20220314 16:53:02.708"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${clicked}</var>
<arg>common.Click On Back</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:53:02.709" endtime="20220314 16:53:03.286"/>
</kw>
<status status="PASS" starttime="20220314 16:53:02.708" endtime="20220314 16:53:03.287"/>
</kw>
<msg timestamp="20220314 16:53:03.287" level="INFO">${clicked} = True</msg>
<status status="PASS" starttime="20220314 16:53:02.708" endtime="20220314 16:53:03.287"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clicked}==False</arg>
<arg>common.alerts</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:53:03.288" endtime="20220314 16:53:03.289"/>
</kw>
<status status="PASS" starttime="20220314 16:53:02.691" endtime="20220314 16:53:03.289"/>
</iter>
<iter>
<var name="${index}">1</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:53:04.307" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 16:53:04.308" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:53:03.294" endtime="20220314 16:53:04.309"/>
</kw>
<msg timestamp="20220314 16:53:04.309" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:53:03.293" endtime="20220314 16:53:04.309"/>
</kw>
<msg timestamp="20220314 16:53:04.310" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:53:03.291" endtime="20220314 16:53:04.310"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:53:04.312" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:53:04.311" endtime="20220314 16:53:04.313"/>
</kw>
<status status="PASS" starttime="20220314 16:53:03.290" endtime="20220314 16:53:04.313"/>
</iter>
<status status="PASS" starttime="20220314 16:53:02.691" endtime="20220314 16:53:04.313"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:53:04.318" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:53:04.318" endtime="20220314 16:53:04.318"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:53:04.319" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:53:04.319" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:53:04.319" endtime="20220314 16:53:04.320"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:53:04.322" endtime="20220314 16:53:04.341"/>
</kw>
<status status="PASS" starttime="20220314 16:53:04.320" endtime="20220314 16:53:04.341"/>
</kw>
<status status="PASS" starttime="20220314 16:53:04.316" endtime="20220314 16:53:04.341"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:53:06.407" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:53:04.342" endtime="20220314 16:53:06.409"/>
</kw>
<status status="PASS" starttime="20220314 16:53:04.315" endtime="20220314 16:53:06.409"/>
</kw>
<status status="PASS" starttime="20220314 16:52:47.551" endtime="20220314 16:53:06.410"/>
</kw>
<kw name="home.Open Device Configuration" library="home_screen">
<arg>${device_name}</arg>
<doc>Click on the device to open device configuration and if device introduction page opens then skip it.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device Home Screen Loaded</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device Home Screen Loaded" library="home_screen">
<arg>${device_name}</arg>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:53:11.446" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:53:06.420" endtime="20220314 16:53:11.446"/>
</kw>
<status status="FAIL" starttime="20220314 16:53:06.420" endtime="20220314 16:53:11.449"/>
</kw>
<msg timestamp="20220314 16:53:11.450" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 16:53:06.419" endtime="20220314 16:53:11.450"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 16:53:11.451" endtime="20220314 16:53:11.451"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:53:11.452" endtime="20220314 16:53:11.452"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:53:11.452" endtime="20220314 16:53:11.452"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:53:11.453" endtime="20220314 16:53:11.453"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:53:11.454" endtime="20220314 16:53:11.454"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 16:53:11.454" endtime="20220314 16:53:11.454"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:53:11.450" endtime="20220314 16:53:11.454"/>
</branch>
<status status="PASS" starttime="20220314 16:53:11.450" endtime="20220314 16:53:11.455"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:53:11.457" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:53:11.457" endtime="20220314 16:53:11.457"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:53:11.458" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:53:11.458" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:53:11.458" endtime="20220314 16:53:11.458"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:53:11.459" endtime="20220314 16:53:11.480"/>
</kw>
<status status="PASS" starttime="20220314 16:53:11.458" endtime="20220314 16:53:11.480"/>
</kw>
<status status="PASS" starttime="20220314 16:53:11.456" endtime="20220314 16:53:11.480"/>
</kw>
<msg timestamp="20220314 16:53:11.481" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220314 16:53:11.455" endtime="20220314 16:53:11.481"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:53:11.482" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:53:11.481" endtime="20220314 16:53:11.482"/>
</kw>
<status status="PASS" starttime="20220314 16:53:06.418" endtime="20220314 16:53:11.482"/>
</iter>
<status status="PASS" starttime="20220314 16:53:06.418" endtime="20220314 16:53:11.483"/>
</for>
<status status="PASS" starttime="20220314 16:53:06.417" endtime="20220314 16:53:11.483"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:53:12.494" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 16:53:12.496" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:53:11.485" endtime="20220314 16:53:12.496"/>
</kw>
<msg timestamp="20220314 16:53:12.497" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:53:11.485" endtime="20220314 16:53:12.497"/>
</kw>
<msg timestamp="20220314 16:53:12.497" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:53:11.484" endtime="20220314 16:53:12.498"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:53:12.499" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:53:12.499" endtime="20220314 16:53:12.501"/>
</kw>
<status status="PASS" starttime="20220314 16:53:11.483" endtime="20220314 16:53:12.501"/>
</iter>
<status status="PASS" starttime="20220314 16:53:11.483" endtime="20220314 16:53:12.501"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:53:12.504" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:53:12.504" endtime="20220314 16:53:12.504"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:53:12.505" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:53:12.505" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:53:12.505" endtime="20220314 16:53:12.505"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:53:12.508" endtime="20220314 16:53:12.528"/>
</kw>
<status status="PASS" starttime="20220314 16:53:12.506" endtime="20220314 16:53:12.529"/>
</kw>
<status status="PASS" starttime="20220314 16:53:12.503" endtime="20220314 16:53:12.529"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:53:14.543" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:53:12.530" endtime="20220314 16:53:14.544"/>
</kw>
<status status="PASS" starttime="20220314 16:53:12.503" endtime="20220314 16:53:14.545"/>
</kw>
<status status="PASS" starttime="20220314 16:53:06.416" endtime="20220314 16:53:14.545"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:53:16.562" level="INFO">Failed to find element with selector: .left-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:53:14.553" endtime="20220314 16:53:16.564"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:53:16.580" level="FAIL">Failure: Selector ".left-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 16:53:16.565" endtime="20220314 16:53:16.581"/>
</kw>
<status status="FAIL" starttime="20220314 16:53:14.552" endtime="20220314 16:53:16.584"/>
</kw>
<msg timestamp="20220314 16:53:16.584" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 16:53:14.550" endtime="20220314 16:53:16.585"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:53:16.586" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:53:16.586" endtime="20220314 16:53:16.588"/>
</kw>
<status status="PASS" starttime="20220314 16:53:14.549" endtime="20220314 16:53:16.588"/>
</iter>
<status status="PASS" starttime="20220314 16:53:14.549" endtime="20220314 16:53:16.588"/>
</for>
<status status="PASS" starttime="20220314 16:53:14.548" endtime="20220314 16:53:16.588"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:53:18.614" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:53:16.592" endtime="20220314 16:53:18.616"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:53:18.635" level="FAIL">Failure: Selector ".right-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 16:53:18.618" endtime="20220314 16:53:18.636"/>
</kw>
<status status="FAIL" starttime="20220314 16:53:16.591" endtime="20220314 16:53:18.638"/>
</kw>
<msg timestamp="20220314 16:53:18.639" level="INFO">${right_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 16:53:16.590" endtime="20220314 16:53:18.639"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:53:18.641" endtime="20220314 16:53:18.679"/>
</kw>
<msg timestamp="20220314 16:53:18.679" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220314 16:53:18.640" endtime="20220314 16:53:18.680"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:53:18.681" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:53:18.681" endtime="20220314 16:53:18.682"/>
</kw>
<status status="PASS" starttime="20220314 16:53:16.589" endtime="20220314 16:53:18.683"/>
</iter>
<status status="PASS" starttime="20220314 16:53:16.589" endtime="20220314 16:53:18.683"/>
</for>
<status status="PASS" starttime="20220314 16:53:14.546" endtime="20220314 16:53:18.683"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_device_in_active_state}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:53:18.687" endtime="20220314 16:53:18.714"/>
</kw>
<status status="PASS" starttime="20220314 16:53:18.686" endtime="20220314 16:53:18.714"/>
</kw>
<msg timestamp="20220314 16:53:18.714" level="INFO">${is_device_in_active_state} = True</msg>
<status status="PASS" starttime="20220314 16:53:18.684" endtime="20220314 16:53:18.714"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${is_device_in_active_state} is ${True}</arg>
<arg>${True}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 16:53:18.715" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 16:53:18.715" endtime="20220314 16:53:18.716"/>
</kw>
<status status="PASS" starttime="20220314 16:53:06.414" endtime="20220314 16:53:18.716"/>
</kw>
<msg timestamp="20220314 16:53:18.716" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:53:06.413" endtime="20220314 16:53:18.716"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'False'">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>${device_name} not loaded in GHub.</arg>
<status status="NOT RUN" starttime="20220314 16:53:18.717" endtime="20220314 16:53:18.717"/>
</kw>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220314 16:53:18.717" endtime="20220314 16:53:18.717"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:53:18.717" endtime="20220314 16:53:18.717"/>
</branch>
<status status="PASS" starttime="20220314 16:53:18.716" endtime="20220314 16:53:18.718"/>
</if>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:53:18.718" endtime="20220314 16:53:19.375"/>
</kw>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:53:21.428" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220314 16:53:21.430" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:53:19.379" endtime="20220314 16:53:21.430"/>
</kw>
<status status="PASS" starttime="20220314 16:53:19.378" endtime="20220314 16:53:21.431"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:53:23.498" level="FAIL">Failure: Selector "//*[@id="color-variant"]/button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:53:21.433" endtime="20220314 16:53:23.499"/>
</kw>
<status status="PASS" starttime="20220314 16:53:21.432" endtime="20220314 16:53:23.499"/>
</kw>
<status status="PASS" starttime="20220314 16:53:19.377" endtime="20220314 16:53:23.499"/>
</kw>
<kw name="device_view.Handle Got It Popup" library="device_main_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${got_it_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_got_it_button}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_got_it_button}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:53:28.525" level="FAIL">Failure: Selector "//div[@class='coach-mark']/button[text()='GOT IT']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:53:23.503" endtime="20220314 16:53:28.526"/>
</kw>
<msg timestamp="20220314 16:53:28.526" level="INFO">${got_it_button_present} = False</msg>
<status status="PASS" starttime="20220314 16:53:23.503" endtime="20220314 16:53:28.526"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${got_it_button_present} is ${False}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 16:53:28.528" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 16:53:28.527" endtime="20220314 16:53:28.529"/>
</kw>
<status status="PASS" starttime="20220314 16:53:23.501" endtime="20220314 16:53:28.529"/>
</kw>
<status status="PASS" starttime="20220314 16:53:06.411" endtime="20220314 16:53:28.529"/>
</kw>
<kw name="device_view.Click On Settings" library="device_main_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${device_view_settings}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:53:28.533" level="INFO">${words} = ['#setting-sprocket']</msg>
<status status="PASS" starttime="20220314 16:53:28.533" endtime="20220314 16:53:28.533"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:53:28.534" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:53:28.534" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:53:28.534" endtime="20220314 16:53:28.534"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:53:28.536" endtime="20220314 16:53:29.183"/>
</kw>
<status status="PASS" starttime="20220314 16:53:28.535" endtime="20220314 16:53:29.183"/>
</kw>
<status status="PASS" starttime="20220314 16:53:28.531" endtime="20220314 16:53:29.184"/>
</kw>
<status status="PASS" starttime="20220314 16:53:28.530" endtime="20220314 16:53:29.184"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_onboard}</var>
<arg>device_settings.Enable On-Board Memory Mode</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="device_settings.Enable On-Board Memory Mode" library="device_settings_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_settings_enable_on-board_memory_mode}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:53:29.188" endtime="20220314 16:53:29.770"/>
</kw>
<status status="PASS" starttime="20220314 16:53:29.187" endtime="20220314 16:53:29.770"/>
</kw>
<msg timestamp="20220314 16:53:29.771" level="INFO">${is_onboard} = True</msg>
<status status="PASS" starttime="20220314 16:53:29.185" endtime="20220314 16:53:29.771"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${is_onboard}</arg>
<arg>Sleep</arg>
<arg>3</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Sleep" library="BuiltIn">
<arg>3</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:53:32.774" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20220314 16:53:29.773" endtime="20220314 16:53:32.774"/>
</kw>
<status status="PASS" starttime="20220314 16:53:29.772" endtime="20220314 16:53:32.774"/>
</kw>
<status status="PASS" starttime="20220314 16:52:47.544" endtime="20220314 16:53:32.775"/>
</kw>
<kw name="device_settings.Verify Onboard Memory Mode Is Enabled" library="device_settings_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_settings_onboard_memory_mode_btn}</arg>
<arg>text=ON</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:53:32.778" endtime="20220314 16:53:32.831"/>
</kw>
<status status="PASS" starttime="20220314 16:53:32.777" endtime="20220314 16:53:32.831"/>
</kw>
<kw name="device_settings.Click On Restore All Profiles To Default" library="device_settings_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_settings_restore_defaults}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:53:32.832" endtime="20220314 16:53:33.453"/>
</kw>
<status status="PASS" starttime="20220314 16:53:32.832" endtime="20220314 16:53:33.453"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:53:38.457" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220314 16:53:33.456" endtime="20220314 16:53:38.457"/>
</kw>
<kw name="profile.Check and Enable Grey Profile" library="profile">
<doc>Checks for grey profile presence, If present then selects and enables grey profile.</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Checking For Grey Profile</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:53:38.461" endtime="20220314 16:53:38.461"/>
</kw>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>2</value>
<value>4</value>
<iter>
<var name="${INDEX}">2</var>
<kw name="device_settings.Verify Grey Profile Present" library="device_settings_screen">
<var>${status}</var>
<arg>PROFILE ${INDEX}</arg>
<kw name="Run Keyword If" library="BuiltIn">
<var>${is_profile_present}</var>
<arg>'${profile_name}'==''</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Expect Element</arg>
<arg>selector=${device_settings_grey_profile}</arg>
<arg>wait_timeout=30</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Expect Element</arg>
<arg>selector=${device_settings_grey_profile}</arg>
<arg>innerText=${profile_name}</arg>
<arg>wait_timeout=30</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<arg>Expect Element</arg>
<arg>selector=${device_settings_grey_profile}</arg>
<arg>innerText=${profile_name}</arg>
<arg>wait_timeout=30</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_settings_grey_profile}</arg>
<arg>innerText=${profile_name}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:53:38.463" endtime="20220314 16:53:38.496"/>
</kw>
<status status="PASS" starttime="20220314 16:53:38.463" endtime="20220314 16:53:38.496"/>
</kw>
<msg timestamp="20220314 16:53:38.496" level="INFO">${is_profile_present} = True</msg>
<status status="PASS" starttime="20220314 16:53:38.463" endtime="20220314 16:53:38.497"/>
</kw>
<msg timestamp="20220314 16:53:38.497" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:53:38.462" endtime="20220314 16:53:38.497"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${status}==False</arg>
<arg>Log to console</arg>
<arg>Grey Profile Not Present: PROFILE ${INDEX}.</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:53:38.498" endtime="20220314 16:53:38.499"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${status}==True</arg>
<arg>Log to console</arg>
<arg>Grey Profile Present: PROFILE ${INDEX}.</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Grey Profile Present: PROFILE ${INDEX}.</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:53:38.501" endtime="20220314 16:53:38.502"/>
</kw>
<status status="PASS" starttime="20220314 16:53:38.500" endtime="20220314 16:53:38.502"/>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:53:38.503" endtime="20220314 16:53:38.504"/>
</kw>
<kw name="device_settings.Select Grey Profile" library="device_settings_screen">
<arg>PROFILE ${INDEX}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_settings_grey_profile}</arg>
<arg>innerText=${profile_name}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:53:38.506" endtime="20220314 16:53:39.082"/>
</kw>
<status status="PASS" starttime="20220314 16:53:38.505" endtime="20220314 16:53:39.083"/>
</kw>
<kw name="device_settings.Select Label From Dropdown" library="device_settings_screen">
<arg>ENABLE</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_settings_dropdown_item}</arg>
<arg>innerText=${label_name}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:53:39.086" endtime="20220314 16:53:39.736"/>
</kw>
<status status="PASS" starttime="20220314 16:53:39.084" endtime="20220314 16:53:39.736"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:53:44.738" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220314 16:53:39.737" endtime="20220314 16:53:44.738"/>
</kw>
<status status="PASS" starttime="20220314 16:53:38.462" endtime="20220314 16:53:44.738"/>
</iter>
<iter>
<var name="${INDEX}">3</var>
<kw name="device_settings.Verify Grey Profile Present" library="device_settings_screen">
<var>${status}</var>
<arg>PROFILE ${INDEX}</arg>
<kw name="Run Keyword If" library="BuiltIn">
<var>${is_profile_present}</var>
<arg>'${profile_name}'==''</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Expect Element</arg>
<arg>selector=${device_settings_grey_profile}</arg>
<arg>wait_timeout=30</arg>
<arg>ELSE</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Expect Element</arg>
<arg>selector=${device_settings_grey_profile}</arg>
<arg>innerText=${profile_name}</arg>
<arg>wait_timeout=30</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<arg>Expect Element</arg>
<arg>selector=${device_settings_grey_profile}</arg>
<arg>innerText=${profile_name}</arg>
<arg>wait_timeout=30</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_settings_grey_profile}</arg>
<arg>innerText=${profile_name}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:53:44.743" endtime="20220314 16:53:44.781"/>
</kw>
<status status="PASS" starttime="20220314 16:53:44.742" endtime="20220314 16:53:44.781"/>
</kw>
<msg timestamp="20220314 16:53:44.781" level="INFO">${is_profile_present} = True</msg>
<status status="PASS" starttime="20220314 16:53:44.742" endtime="20220314 16:53:44.781"/>
</kw>
<msg timestamp="20220314 16:53:44.782" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:53:44.740" endtime="20220314 16:53:44.782"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${status}==False</arg>
<arg>Log to console</arg>
<arg>Grey Profile Not Present: PROFILE ${INDEX}.</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:53:44.783" endtime="20220314 16:53:44.783"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${status}==True</arg>
<arg>Log to console</arg>
<arg>Grey Profile Present: PROFILE ${INDEX}.</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Grey Profile Present: PROFILE ${INDEX}.</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:53:44.785" endtime="20220314 16:53:44.785"/>
</kw>
<status status="PASS" starttime="20220314 16:53:44.784" endtime="20220314 16:53:44.786"/>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:53:44.786" endtime="20220314 16:53:44.786"/>
</kw>
<kw name="device_settings.Select Grey Profile" library="device_settings_screen">
<arg>PROFILE ${INDEX}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_settings_grey_profile}</arg>
<arg>innerText=${profile_name}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:53:44.788" endtime="20220314 16:53:45.344"/>
</kw>
<status status="PASS" starttime="20220314 16:53:44.787" endtime="20220314 16:53:45.345"/>
</kw>
<kw name="device_settings.Select Label From Dropdown" library="device_settings_screen">
<arg>ENABLE</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_settings_dropdown_item}</arg>
<arg>innerText=${label_name}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:53:45.348" endtime="20220314 16:53:46.069"/>
</kw>
<status status="PASS" starttime="20220314 16:53:45.346" endtime="20220314 16:53:46.069"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:53:51.071" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220314 16:53:46.070" endtime="20220314 16:53:51.071"/>
</kw>
<status status="PASS" starttime="20220314 16:53:44.738" endtime="20220314 16:53:51.072"/>
</iter>
<status status="PASS" starttime="20220314 16:53:38.461" endtime="20220314 16:53:51.072"/>
</for>
<status status="PASS" starttime="20220314 16:53:38.459" endtime="20220314 16:53:51.072"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${device['device_specific_features']['device_settings']['On Board Memory Mode']}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:53:51.081" level="FAIL">Resolving variable '${device['device_specific_features']['device_settings']['On Board Memory Mode']}' failed: TypeError: list indices must be integers or slices, not str</msg>
<status status="FAIL" starttime="20220314 16:53:51.074" endtime="20220314 16:53:51.081"/>
</kw>
<if>
<branch type="IF" condition="'${device['type']}'=='KEYBOARD'">
<kw name="profile.Saving Profile Into On Board Memory For Keyboard" library="profile">
<arg>${count}</arg>
<status status="NOT RUN" starttime="20220314 16:53:51.082" endtime="20220314 16:53:51.082"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:53:51.081" endtime="20220314 16:53:51.082"/>
</branch>
<status status="NOT RUN" starttime="20220314 16:53:51.081" endtime="20220314 16:53:51.082"/>
</if>
<if>
<branch type="IF" condition="'${device['type']}'=='MOUSE'">
<kw name="profile.Saving Profile Into On Board Memory For Mouse" library="profile">
<arg>${count}</arg>
<status status="NOT RUN" starttime="20220314 16:53:51.082" endtime="20220314 16:53:51.082"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:53:51.082" endtime="20220314 16:53:51.082"/>
</branch>
<status status="NOT RUN" starttime="20220314 16:53:51.082" endtime="20220314 16:53:51.082"/>
</if>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:53:51.083" endtime="20220314 16:53:51.083"/>
</kw>
<status status="FAIL" starttime="20220314 16:52:47.542" endtime="20220314 16:53:51.083"/>
</kw>
<status status="FAIL" starttime="20220314 16:52:47.542" endtime="20220314 16:53:51.083"/>
</kw>
<kw name="backend.Get Onboard Profile Number" library="backend">
<var>${profile_number}</var>
<arg>${device['displayName']}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:53:51.092" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:53:51.091" endtime="20220314 16:53:51.092"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:53:52.098" level="INFO">16:48:58.475318: {"msgId": "", "verb": "OPTIONS", "path": "/", "origin": "backend"}
16:49:34.026978: {"msgId": "bf51158d-b99e-4331-b93a-1d5a5b404135", "verb": "SET", "path": "/configuration", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.application.Configuration", "autolaunch": false, "language": "", "onboardingShown": true, "migrationShown": true, "seenCoachMarks": ["coach-mark-panel-persistent-lock", "coach-mark-color-picker", "coach-mark-lighting-effect-selector", "coach-mark-lighting-effect-edit", "coach-mark-microphone-input-gain", "coach-mark-microphone-recording", "coach-mark-microphone-enable-blue-voice", "coach-mark-lighting-effect-editor-timeline", "coach-mark-lighting-effect-editor-frame-selection", "coach-mark-microphone-advanced-settings", "coach-mark-microphone-select-preset"], "blueVoiceAdvancedControlsEnabled": false, "brand": "", "notificationsEnabled": false, "settingsLoadedFromBackup": false, "keyValue": [], "lowBatteryNotificationsEnabled": false, "lockNotificationsEnabled": false, "nonInteractivePrompted": [], "mouseButtonsSwapped": false}}
16:53:51.097039: {"msgId": "123dc735-83ae-491c-acf5-d65c0fc5c739", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": true, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO", "ZONE_PRIMARY": "PRIMARY"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:53:52.099" level="INFO">${res} =  {"msgId": "123dc735-83ae-491c-acf5-d65c0fc5c739", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:53:51.092" endtime="20220314 16:53:52.099"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:53:52.102" level="INFO">${res} = {'msgId': '123dc735-83ae-491c-acf5-d65c0fc5c739', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:53:52.101" endtime="20220314 16:53:52.102"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:53:52.164" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': True, 'individualMode': False, 'resources...</msg>
<status status="PASS" starttime="20220314 16:53:52.104" endtime="20220314 16:53:52.164"/>
</kw>
<msg timestamp="20220314 16:53:52.165" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': True, 'individualMode': False, 'resources...</msg>
<status status="PASS" starttime="20220314 16:53:52.103" endtime="20220314 16:53:52.165"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:53:52.402" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': True, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType':...</msg>
<status status="PASS" starttime="20220314 16:53:52.168" endtime="20220314 16:53:52.402"/>
</kw>
<msg timestamp="20220314 16:53:52.417" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': True, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType':...</msg>
<status status="PASS" starttime="20220314 16:53:52.167" endtime="20220314 16:53:52.417"/>
</kw>
<msg timestamp="20220314 16:53:52.418" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': True, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType':...</msg>
<status status="PASS" starttime="20220314 16:53:52.166" endtime="20220314 16:53:52.418"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': True, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': '...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:53:52.574" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:53:52.420" endtime="20220314 16:53:52.574"/>
</kw>
<msg timestamp="20220314 16:53:52.575" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:53:52.419" endtime="20220314 16:53:52.575"/>
</kw>
<msg timestamp="20220314 16:53:52.575" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:53:52.418" endtime="20220314 16:53:52.575"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:53:52.802" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_mouse_settings', 'g903hero_g12_m1_shifted', 'g903hero_g4_m...</msg>
<status status="PASS" starttime="20220314 16:53:52.577" endtime="20220314 16:53:52.802"/>
</kw>
<msg timestamp="20220314 16:53:52.803" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_mouse_settings', 'g903hero_g12_m1_shifted', 'g903hero_g4_m...</msg>
<status status="PASS" starttime="20220314 16:53:52.576" endtime="20220314 16:53:52.803"/>
</kw>
<msg timestamp="20220314 16:53:52.804" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:53:52.576" endtime="20220314 16:53:52.804"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:53:52.804" endtime="20220314 16:53:52.804"/>
</kw>
<status status="PASS" starttime="20220314 16:53:52.575" endtime="20220314 16:53:52.804"/>
</branch>
<status status="PASS" starttime="20220314 16:53:52.575" endtime="20220314 16:53:52.805"/>
</if>
<status status="PASS" starttime="20220314 16:53:52.418" endtime="20220314 16:53:52.805"/>
</iter>
<status status="PASS" starttime="20220314 16:53:52.418" endtime="20220314 16:53:52.805"/>
</for>
<msg timestamp="20220314 16:53:52.805" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:53:51.091" endtime="20220314 16:53:52.805"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/onboard_profiles/${device_id}/profiles</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:53:52.806" level="INFO">{'verb': 'GET', 'path': '/onboard_profiles/dev00000000/profiles'}</msg>
<status status="PASS" starttime="20220314 16:53:52.805" endtime="20220314 16:53:52.806"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=true</arg>
<arg>verb=GET</arg>
<arg>path=/onboard_profiles/${device_id}/profiles</arg>
<arg>timeout=10</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:53:52.806" endtime="20220314 16:53:52.821"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${res}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:53:53.822" level="INFO">16:53:52.820268: {"msgId": "90edf165-67e8-4696-bcfe-462200fed466", "verb": "GET", "path": "/onboard_profiles/dev00000000/profiles", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.onboard_profiles.ProfileDirectory", "directoryEntries": [{"onboardSlotId": "PROFILE_1", "enabled": true, "name": "", "reportRate": 1000, "dpiTable": {"levels": [400, 800, 1600, 3200, 6400], "defaultDpi": 800, "shiftDpi": 400, "activeDpi": 800}, "angleSnapping": {"enabled": false}, "lighting": {"effects": [{"id": "CYCLE", "zoneType": "ZONE_BRANDING", "persistent": false, "cycleParams": {"periodInMs": 8000, "intensity": 1, "saturation": 0}}, {"id": "CYCLE", "zoneType": "ZONE_PRIMARY", "persistent": false, "cycleParams": {"periodInMs": 8000, "intensity": 1, "saturation": 0}}]}, "buttonMappings": [{"button": 1}, {"button": 2}, {"button": 3}, {"button": 4}, {"button": 5}, {"button": 4}, {"button": 5}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "DPI_DOWN", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "DPI_UP", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "WHEEL_LEFT", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "WHEEL_RIGHT", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "DEVICE", "device": {"action": "PROFILE_CYCLE"}, "onboardable": false, "actionName": "", "icon": ""}}], "gshiftMappings": []}, {"onboardSlotId": "PROFILE_2", "enabled": true, "name": "", "reportRate": 1000, "dpiTable": {"levels": [400, 800, 1600, 3200, 6400], "defaultDpi": 800, "shiftDpi": 400, "activeDpi": 800}, "angleSnapping": {"enabled": false}, "lighting": {"effects": [{"id": "CYCLE", "zoneType": "ZONE_BRANDING", "persistent": false, "cycleParams": {"periodInMs": 8000, "intensity": 1, "saturation": 0}}, {"id": "CYCLE", "zoneType": "ZONE_PRIMARY", "persistent": false, "cycleParams": {"periodInMs": 8000, "intensity": 1, "saturation": 0}}]}, "buttonMappings": [{"button": 1}, {"button": 2}, {"button": 3}, {"button": 4}, {"button": 5}, {"button": 4}, {"button": 5}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "DPI_DOWN", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "DPI_UP", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "WHEEL_LEFT", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "WHEEL_RIGHT", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "DEVICE", "device": {"action": "PROFILE_CYCLE"}, "onboardable": false, "actionName": "", "icon": ""}}], "gshiftMappings": []}, {"onboardSlotId": "PROFILE_3", "enabled": true, "name": "", "reportRate": 1000, "dpiTable": {"levels": [400, 800, 1600, 3200, 6400], "defaultDpi": 800, "shiftDpi": 400, "activeDpi": 800}, "angleSnapping": {"enabled": false}, "lighting": {"effects": [{"id": "CYCLE", "zoneType": "ZONE_BRANDING", "persistent": false, "cycleParams": {"periodInMs": 8000, "intensity": 1, "saturation": 0}}, {"id": "CYCLE", "zoneType": "ZONE_PRIMARY", "persistent": false, "cycleParams": {"periodInMs": 8000, "intensity": 1, "saturation": 0}}]}, "buttonMappings": [{"button": 1}, {"button": 2}, {"button": 3}, {"button": 4}, {"button": 5}, {"button": 4}, {"button": 5}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "DPI_DOWN", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "DPI_UP", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "WHEEL_LEFT", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "WHEEL_RIGHT", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "DEVICE", "device": {"action": "PROFILE_CYCLE"}, "onboardable": false, "actionName": "", "icon": ""}}], "gshiftMappings": []}, {"onboardSlotId": "PROFILE_4", "enabled": false, "name": "", "reportRate": 1000, "dpiTable": {"levels": [400, 800, 1600, 3200, 6400], "defaultDpi": 800, "shiftDpi": 400, "activeDpi": 800}, "angleSnapping": {"enabled": false}, "lighting": {"effects": [{"id": "CYCLE", "zoneType": "ZONE_BRANDING", "persistent": false, "cycleParams": {"periodInMs": 8000, "intensity": 1, "saturation": 0}}, {"id": "CYCLE", "zoneType": "ZONE_PRIMARY", "persistent": false, "cycleParams": {"periodInMs": 8000, "intensity": 1, "saturation": 0}}]}, "buttonMappings": [{"button": 1}, {"button": 2}, {"button": 3}, {"button": 4}, {"button": 5}, {"button": 4}, {"button": 5}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "DPI_DOWN", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "DPI_UP", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "WHEEL_LEFT", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "WHEEL_RIGHT", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "DEVICE", "device": {"action": "PROFILE_CYCLE"}, "onboardable": false, "actionName": "", "icon": ""}}], "gshiftMappings": []}, {"onboardSlotId": "PROFILE_5", "enabled": false, "name": "", "reportRate": 1000, "dpiTable": {"levels": [400, 800, 1600, 3200, 6400], "defaultDpi": 800, "shiftDpi": 400, "activeDpi": 800}, "angleSnapping": {"enabled": false}, "lighting": {"effects": [{"id": "CYCLE", "zoneType": "ZONE_BRANDING", "persistent": false, "cycleParams": {"periodInMs": 8000, "intensity": 1, "saturation": 0}}, {"id": "CYCLE", "zoneType": "ZONE_PRIMARY", "persistent": false, "cycleParams": {"periodInMs": 8000, "intensity": 1, "saturation": 0}}]}, "buttonMappings": [{"button": 1}, {"button": 2}, {"button": 3}, {"button": 4}, {"button": 5}, {"button": 4}, {"button": 5}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "DPI_DOWN", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "DPI_UP", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "WHEEL_LEFT", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "MOUSE", "mouse": {"action": "WHEEL_RIGHT", "hidUsage": 0}, "onboardable": false, "actionName": "", "icon": ""}}, {"button": 0, "macro": {"type": "DEVICE", "device": {"action": "PROFILE_CYCLE"}, "onboardable": false, "actionName": "", "icon": ""}}], "gshiftMappings": []}], "activeProfile": "PROFILE_1"}}</msg>
<msg timestamp="20220314 16:53:53.823" level="INFO">${res} =  {"msgId": "90edf165-67e8-4696-bcfe-462200fed466", "verb": "GET", "path": "/onboard_profiles/dev00000000/profiles", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type":...</msg>
<status status="PASS" starttime="20220314 16:53:52.822" endtime="20220314 16:53:53.823"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:53:53.826" level="INFO">${res} = {'msgId': '90edf165-67e8-4696-bcfe-462200fed466', 'verb': 'GET', 'path': '/onboard_profiles/dev00000000/profiles', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': ...</msg>
<status status="PASS" starttime="20220314 16:53:53.825" endtime="20220314 16:53:53.826"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${res}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:53:53.844" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:53:53.830" endtime="20220314 16:53:53.844"/>
</kw>
<msg timestamp="20220314 16:53:53.844" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:53:53.829" endtime="20220314 16:53:53.844"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:53:53.859" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:53:53.845" endtime="20220314 16:53:53.859"/>
</kw>
<msg timestamp="20220314 16:53:53.859" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:53:53.845" endtime="20220314 16:53:53.859"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:53:53.860" endtime="20220314 16:53:53.860"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:53:53.860" endtime="20220314 16:53:53.860"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:53:53.860" endtime="20220314 16:53:53.861"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:53:53.861" endtime="20220314 16:53:53.861"/>
</kw>
<status status="PASS" starttime="20220314 16:53:53.828" endtime="20220314 16:53:53.861"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${onboard_slot_ids}</var>
<arg>${res}</arg>
<arg>onboardSlotId</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:53:53.876" level="INFO">${result} = ['PROFILE_1', 'PROFILE_2', 'PROFILE_3', 'PROFILE_4', 'PROFILE_5']</msg>
<status status="PASS" starttime="20220314 16:53:53.862" endtime="20220314 16:53:53.876"/>
</kw>
<msg timestamp="20220314 16:53:53.876" level="INFO">${onboard_slot_ids} = ['PROFILE_1', 'PROFILE_2', 'PROFILE_3', 'PROFILE_4', 'PROFILE_5']</msg>
<status status="PASS" starttime="20220314 16:53:53.862" endtime="20220314 16:53:53.876"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${onboard_slot_ids}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:53:53.877" level="INFO">Length is 5</msg>
<msg timestamp="20220314 16:53:53.877" level="INFO">${count} = 5</msg>
<status status="PASS" starttime="20220314 16:53:53.877" endtime="20220314 16:53:53.877"/>
</kw>
<msg timestamp="20220314 16:53:53.877" level="INFO">${profile_number} = 5</msg>
<status status="PASS" starttime="20220314 16:53:51.084" endtime="20220314 16:53:53.877"/>
</kw>
<kw name="dpi.Onboard DPI Profile Loop" library="dpi">
<arg>${device}</arg>
<arg>${profile_number}</arg>
<arg>${GUI_dpi1}</arg>
<arg>${GUI_dpi2}</arg>
<arg>${GUI_dpi3}</arg>
<arg>${GUI_reportRate1}</arg>
<arg>${GUI_reportRate2}</arg>
<arg>${GUI_reportRate3}</arg>
<doc>Verifies onboard profile sensitivity for profile 1, 2 and 3, depending on total onboard profiles of a device.</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>${profile_number}</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${INDEX}==0</arg>
<arg>dpi.Verify Onboard Profile Sensitivity</arg>
<arg>${profile_number}</arg>
<arg>${device}</arg>
<arg>1</arg>
<arg>${GUI_dpi1}</arg>
<arg>${GUI_reportRate1}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="dpi.Verify Onboard Profile Sensitivity" library="dpi">
<arg>${profile_number}</arg>
<arg>${device}</arg>
<arg>1</arg>
<arg>${GUI_dpi1}</arg>
<arg>${GUI_reportRate1}</arg>
<doc>Verifies onboard profile sensitivity for given profile number.</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Verifying Onboard Profile Sensitivity For Profile Number: ${profile_number}, Profile Index: ${profile_index}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:53:53.879" endtime="20220314 16:53:53.879"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${profile_number}&gt;1</arg>
<arg>firmware.Set Profile Index</arg>
<arg>${device['productId']}</arg>
<arg>${profile_index}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="firmware.Set Profile Index" library="firmware">
<arg>${device['productId']}</arg>
<arg>${profile_index}</arg>
<kw name="Set Profile Index" library="libraries.cdevio.device">
<arg>${pid}</arg>
<arg>${profile_index}</arg>
<msg timestamp="20220314 16:54:06.478" level="INFO">0xc091
1
C:\Users\cpgpq\Documents\Automation\gerty\tools\python\mindstorm\bin\windows/cdevio.exe -SetProfileIndex 0xc091 1
C:\Users\cpgpq\Documents\Automation\gerty\tools\python\mindstorm\bin\windows/cdevio.exe -SetProfileIndex 0xc091 1
C:\Users\cpgpq\Documents\Automation\gerty\tools\python\mindstorm\bin\windows/cdevio.exe -SetProfileIndex 0xc091 1
0
C:\Users\cpgpq\Documents\Automation\gerty\tools\python\mindstorm\bin\windows/cdevio.exe -SetProfileIndex 0xc091 1
C:\Users\cpgpq\Documents\Automation\gerty\tools\python\mindstorm\bin\windows/cdevio.exe -SetProfileIndex 0xc091 1
C:\Users\cpgpq\Documents\Automation\gerty\tools\python\mindstorm\bin\windows/cdevio.exe -SetProfileIndex 0xc091 1
1
C:\Users\cpgpq\Documents\Automation\gerty\tools\python\mindstorm\bin\windows/cdevio.exe -SetProfileIndex 0xc091 1
C:\Users\cpgpq\Documents\Automation\gerty\tools\python\mindstorm\bin\windows/cdevio.exe -SetProfileIndex 0xc091 1
C:\Users\cpgpq\Documents\Automation\gerty\tools\python\mindstorm\bin\windows/cdevio.exe -SetProfileIndex 0xc091 1
2</msg>
<status status="PASS" starttime="20220314 16:53:53.887" endtime="20220314 16:54:06.478"/>
</kw>
<status status="PASS" starttime="20220314 16:53:53.880" endtime="20220314 16:54:06.478"/>
</kw>
<status status="PASS" starttime="20220314 16:53:53.880" endtime="20220314 16:54:06.478"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:54:08.480" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20220314 16:54:06.478" endtime="20220314 16:54:08.480"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${onboard}</var>
<arg>Onboard</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220314 16:54:08.482" level="INFO">${onboard} = Onboard</msg>
<status status="PASS" starttime="20220314 16:54:08.482" endtime="20220314 16:54:08.482"/>
</kw>
<kw name="backend.Verify DPI Of Device" library="backend">
<arg>${dpi}</arg>
<arg>${device['displayName']}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:54:08.503" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:54:08.503" endtime="20220314 16:54:08.503"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:54:09.513" level="INFO">16:54:08.511696: {"msgId": "aa5d854c-9da1-43f9-83a5-290716aebd46", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": true, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_PRIMARY": "PRIMARY", "ZONE_BRANDING": "LOGO"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:54:09.514" level="INFO">${res} =  {"msgId": "aa5d854c-9da1-43f9-83a5-290716aebd46", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:54:08.504" endtime="20220314 16:54:09.514"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:54:09.517" level="INFO">${res} = {'msgId': 'aa5d854c-9da1-43f9-83a5-290716aebd46', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:54:09.516" endtime="20220314 16:54:09.517"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:54:09.544" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': True, 'individualMode': False, 'resources...</msg>
<status status="PASS" starttime="20220314 16:54:09.520" endtime="20220314 16:54:09.544"/>
</kw>
<msg timestamp="20220314 16:54:09.544" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': True, 'individualMode': False, 'resources...</msg>
<status status="PASS" starttime="20220314 16:54:09.518" endtime="20220314 16:54:09.544"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:54:09.719" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': True, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType':...</msg>
<status status="PASS" starttime="20220314 16:54:09.546" endtime="20220314 16:54:09.720"/>
</kw>
<msg timestamp="20220314 16:54:09.736" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': True, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType':...</msg>
<status status="PASS" starttime="20220314 16:54:09.545" endtime="20220314 16:54:09.736"/>
</kw>
<msg timestamp="20220314 16:54:09.736" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': True, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType':...</msg>
<status status="PASS" starttime="20220314 16:54:09.545" endtime="20220314 16:54:09.736"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': True, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': '...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:54:09.897" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:54:09.738" endtime="20220314 16:54:09.897"/>
</kw>
<msg timestamp="20220314 16:54:09.897" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:54:09.738" endtime="20220314 16:54:09.897"/>
</kw>
<msg timestamp="20220314 16:54:09.897" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:54:09.737" endtime="20220314 16:54:09.897"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:54:10.123" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g11_m1_shifted', 'g903hero_g4_m1', 'g903hero_g2_m1_shifted...</msg>
<status status="PASS" starttime="20220314 16:54:09.899" endtime="20220314 16:54:10.123"/>
</kw>
<msg timestamp="20220314 16:54:10.125" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g11_m1_shifted', 'g903hero_g4_m1', 'g903hero_g2_m1_shifted...</msg>
<status status="PASS" starttime="20220314 16:54:09.899" endtime="20220314 16:54:10.125"/>
</kw>
<msg timestamp="20220314 16:54:10.125" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:54:09.898" endtime="20220314 16:54:10.125"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:54:10.125" endtime="20220314 16:54:10.125"/>
</kw>
<status status="PASS" starttime="20220314 16:54:09.898" endtime="20220314 16:54:10.125"/>
</branch>
<status status="PASS" starttime="20220314 16:54:09.897" endtime="20220314 16:54:10.126"/>
</if>
<status status="PASS" starttime="20220314 16:54:09.736" endtime="20220314 16:54:10.126"/>
</iter>
<status status="PASS" starttime="20220314 16:54:09.736" endtime="20220314 16:54:10.126"/>
</for>
<msg timestamp="20220314 16:54:10.126" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:54:08.502" endtime="20220314 16:54:10.126"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:54:10.127" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/dpi'}</msg>
<status status="PASS" starttime="20220314 16:54:10.126" endtime="20220314 16:54:10.127"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:54:10.127" endtime="20220314 16:54:10.128"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:54:11.130" level="INFO">16:54:10.127880: {"msgId": "0fcd6d68-3521-4fc7-a100-66150e2bd558", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "NO_SUCH_PATH", "what": "message path '/mouse/dev00000000/dpi' not found."}}</msg>
<msg timestamp="20220314 16:54:11.130" level="INFO">${response} =  {"msgId": "0fcd6d68-3521-4fc7-a100-66150e2bd558", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "NO_SUCH_PATH", "what": "message path '/mouse/dev00000000/dp...</msg>
<status status="PASS" starttime="20220314 16:54:10.129" endtime="20220314 16:54:11.131"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:54:11.133" level="INFO">${response} = {'msgId': '0fcd6d68-3521-4fc7-a100-66150e2bd558', 'verb': 'GET', 'path': '/mouse/dev00000000/dpi', 'origin': 'backend', 'result': {'code': 'NO_SUCH_PATH', 'what': "message path '/mouse/dev00000000/dpi...</msg>
<status status="PASS" starttime="20220314 16:54:11.132" endtime="20220314 16:54:11.133"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:54:11.149" level="INFO">${result} = ['NO_SUCH_PATH']</msg>
<status status="PASS" starttime="20220314 16:54:11.136" endtime="20220314 16:54:11.149"/>
</kw>
<msg timestamp="20220314 16:54:11.149" level="INFO">${status} = ['NO_SUCH_PATH']</msg>
<status status="PASS" starttime="20220314 16:54:11.136" endtime="20220314 16:54:11.149"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:54:11.163" level="INFO">${result} = ["message path '/mouse/dev00000000/dpi' not found."]</msg>
<status status="PASS" starttime="20220314 16:54:11.150" endtime="20220314 16:54:11.163"/>
</kw>
<msg timestamp="20220314 16:54:11.163" level="INFO">${what} = ["message path '/mouse/dev00000000/dpi' not found."]</msg>
<status status="PASS" starttime="20220314 16:54:11.149" endtime="20220314 16:54:11.163"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220314 16:54:11.165" level="INFO">${kw_status} = skipped</msg>
<status status="PASS" starttime="20220314 16:54:11.164" endtime="20220314 16:54:11.165"/>
</kw>
<status status="PASS" starttime="20220314 16:54:11.164" endtime="20220314 16:54:11.165"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<msg timestamp="20220314 16:54:11.165" level="INFO">Set tag 'SKIPPED'.</msg>
<msg timestamp="20220314 16:54:11.165" level="INFO">Execution passed with message:
Test Skipped - Feature Not Supported</msg>
<status status="PASS" starttime="20220314 16:54:11.165" endtime="20220314 16:54:11.166"/>
</kw>
<status status="PASS" starttime="20220314 16:54:11.135" endtime="20220314 16:54:11.166"/>
</kw>
<status status="PASS" starttime="20220314 16:54:08.484" endtime="20220314 16:54:11.167"/>
</kw>
<status status="PASS" starttime="20220314 16:53:53.879" endtime="20220314 16:54:11.167"/>
</kw>
<status status="PASS" starttime="20220314 16:53:53.878" endtime="20220314 16:54:11.167"/>
</kw>
<status status="PASS" starttime="20220314 16:53:53.878" endtime="20220314 16:54:11.167"/>
</iter>
<status status="PASS" starttime="20220314 16:53:53.878" endtime="20220314 16:54:11.168"/>
</for>
<kw name="Run Keyword And Ignore Error" library="BuiltIn" type="TEARDOWN">
<arg>common.Go Back To Home Screen</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:54:16.195" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:54:11.174" endtime="20220314 16:54:16.196"/>
</kw>
<status status="FAIL" starttime="20220314 16:54:11.173" endtime="20220314 16:54:16.196"/>
</kw>
<msg timestamp="20220314 16:54:16.197" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 16:54:11.173" endtime="20220314 16:54:16.197"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 16:54:16.198" endtime="20220314 16:54:16.199"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:54:16.199" endtime="20220314 16:54:16.199"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:54:16.199" endtime="20220314 16:54:16.199"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:54:16.200" endtime="20220314 16:54:16.200"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:54:16.200" endtime="20220314 16:54:16.200"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 16:54:16.200" endtime="20220314 16:54:16.200"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:54:16.198" endtime="20220314 16:54:16.200"/>
</branch>
<status status="PASS" starttime="20220314 16:54:16.197" endtime="20220314 16:54:16.200"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:54:16.202" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:54:16.201" endtime="20220314 16:54:16.202"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:54:16.202" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:54:16.202" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:54:16.202" endtime="20220314 16:54:16.202"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:54:26.236" level="INFO">Failed to find element with selector: #home-view and attributes:{}</msg>
<msg timestamp="20220314 16:54:26.237" level="FAIL">Failure: Selector "#home-view" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:54:16.203" endtime="20220314 16:54:26.237"/>
</kw>
<status status="FAIL" starttime="20220314 16:54:16.202" endtime="20220314 16:54:26.238"/>
</kw>
<status status="FAIL" starttime="20220314 16:54:16.201" endtime="20220314 16:54:26.238"/>
</kw>
<msg timestamp="20220314 16:54:26.239" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220314 16:54:16.201" endtime="20220314 16:54:26.239"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:54:26.240" endtime="20220314 16:54:26.241"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:54:26.243" endtime="20220314 16:54:26.268"/>
</kw>
<msg timestamp="20220314 16:54:26.268" level="INFO">${back_button_present} = True</msg>
<status status="PASS" starttime="20220314 16:54:26.242" endtime="20220314 16:54:26.268"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:54:26.269" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:54:26.268" endtime="20220314 16:54:26.269"/>
</kw>
<status status="PASS" starttime="20220314 16:54:11.172" endtime="20220314 16:54:26.269"/>
</iter>
<status status="PASS" starttime="20220314 16:54:11.172" endtime="20220314 16:54:26.269"/>
</for>
<status status="PASS" starttime="20220314 16:54:11.172" endtime="20220314 16:54:26.270"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:54:26.274" endtime="20220314 16:54:26.289"/>
</kw>
<msg timestamp="20220314 16:54:26.290" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:54:26.273" endtime="20220314 16:54:26.290"/>
</kw>
<msg timestamp="20220314 16:54:26.290" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:54:26.271" endtime="20220314 16:54:26.290"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:54:26.291" endtime="20220314 16:54:26.291"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${clicked}</var>
<arg>common.Click On Back</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:54:26.293" endtime="20220314 16:54:26.890"/>
</kw>
<status status="PASS" starttime="20220314 16:54:26.292" endtime="20220314 16:54:26.890"/>
</kw>
<msg timestamp="20220314 16:54:26.891" level="INFO">${clicked} = True</msg>
<status status="PASS" starttime="20220314 16:54:26.292" endtime="20220314 16:54:26.891"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clicked}==False</arg>
<arg>common.alerts</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:54:26.892" endtime="20220314 16:54:26.893"/>
</kw>
<status status="PASS" starttime="20220314 16:54:26.270" endtime="20220314 16:54:26.894"/>
</iter>
<iter>
<var name="${index}">1</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:54:27.966" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 16:54:27.967" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:54:26.899" endtime="20220314 16:54:27.967"/>
</kw>
<msg timestamp="20220314 16:54:27.968" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:54:26.897" endtime="20220314 16:54:27.968"/>
</kw>
<msg timestamp="20220314 16:54:27.968" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:54:26.896" endtime="20220314 16:54:27.968"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:54:27.970" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:54:27.970" endtime="20220314 16:54:27.971"/>
</kw>
<status status="PASS" starttime="20220314 16:54:26.894" endtime="20220314 16:54:27.971"/>
</iter>
<status status="PASS" starttime="20220314 16:54:26.270" endtime="20220314 16:54:27.971"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:54:27.976" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:54:27.975" endtime="20220314 16:54:27.976"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:54:27.977" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:54:27.977" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:54:27.977" endtime="20220314 16:54:27.977"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:54:27.979" endtime="20220314 16:54:27.997"/>
</kw>
<status status="PASS" starttime="20220314 16:54:27.978" endtime="20220314 16:54:27.997"/>
</kw>
<status status="PASS" starttime="20220314 16:54:27.974" endtime="20220314 16:54:27.997"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:54:30.012" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:54:27.998" endtime="20220314 16:54:30.014"/>
</kw>
<status status="PASS" starttime="20220314 16:54:27.972" endtime="20220314 16:54:30.015"/>
</kw>
<status status="PASS" starttime="20220314 16:54:11.171" endtime="20220314 16:54:30.015"/>
</kw>
<status status="PASS" starttime="20220314 16:54:11.170" endtime="20220314 16:54:30.016"/>
</kw>
<status status="PASS" starttime="20220314 16:53:53.877" endtime="20220314 16:54:30.017"/>
</kw>
<status status="FAIL" starttime="20220314 16:51:34.298" endtime="20220314 16:54:30.018"/>
</kw>
<if>
<branch type="IF" condition="'${device['displayName']}'=='G203 LIGHTSYNC' or '${device['displayName']}'=='G502 HERO'">
<kw name="device_settings.Disable Onboard Memory Mode" library="device_settings">
<arg>${device['displayName']}</arg>
<status status="NOT RUN" starttime="20220314 16:54:30.020" endtime="20220314 16:54:30.020"/>
</kw>
<kw name="dpi.Verify Onboard DPI Shouldn't Change When Default Profile DPI Is Changed" library="dpi">
<arg>${device}</arg>
<doc>Test Case to cover KRGL-7319</doc>
<status status="NOT RUN" starttime="20220314 16:54:30.022" endtime="20220314 16:54:30.022"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:54:30.019" endtime="20220314 16:54:30.022"/>
</branch>
<status status="NOT RUN" starttime="20220314 16:54:30.019" endtime="20220314 16:54:30.022"/>
</if>
<kw name="Run Keywords" library="BuiltIn" type="TEARDOWN">
<arg>End Test</arg>
<arg>${KEYWORD STATUS}</arg>
<arg>AND</arg>
<arg>device_settings.Disable Onboard Memory Mode</arg>
<arg>${device['displayName']}</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="End Test" library="logging">
<arg>${KEYWORD STATUS}</arg>
<doc>Ensure to Call this keyword at Teardown of all High Level Test Keywords
If Test Fails - This will capture logs and screenshots and append links to report</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}Test Status: ${test_status}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:54:30.024" endtime="20220314 16:54:30.025"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${test_status}'=='FAIL'</arg>
<arg>Get Log Files And Upload To FTPDrive</arg>
<arg>end_test</arg>
<arg>ELSE</arg>
<arg>Return From Keyword</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Get Log Files And Upload To FTPDrive" library="logging">
<arg>end_test</arg>
<doc>This Keyword will collect logs from the system.
Default Logs are enabled , logs can be disabled by setting flag debug_logs:False
Logs will be upload to FTP server this can be disabled by setting flg to Ftp_logs:False
Make sure you connect to logitech VPN while FTP server is enabled.</doc>
<kw name="__Get Report Folder__" library="logging">
<kw name="Get Latest Folder From Directory" library="libraries.utilities.backend_api_utils.cpu_and_app_log_util">
<var>${file_path}</var>
<arg>${EXEC_DIR}/report</arg>
<msg timestamp="20220314 16:54:30.029" level="INFO">C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\</msg>
<msg timestamp="20220314 16:54:30.029" level="INFO">${file_path} = C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\</msg>
<status status="PASS" starttime="20220314 16:54:30.028" endtime="20220314 16:54:30.029"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${report_path}</arg>
<arg>${file_path}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220314 16:54:30.030" level="INFO">${report_path} = C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\</msg>
<status status="PASS" starttime="20220314 16:54:30.030" endtime="20220314 16:54:30.030"/>
</kw>
<status status="PASS" starttime="20220314 16:54:30.026" endtime="20220314 16:54:30.030"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${debug_logs} is ${True}</arg>
<arg>__Get Log Files And Upload To FTP__</arg>
<arg>${screenshot_prefix}</arg>
<arg>ELSE</arg>
<arg>__Capture Screenshot And Get Path__</arg>
<arg>${screenshot_prefix}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="__Get Log Files And Upload To FTP__" library="logging">
<arg>${screenshot_prefix}</arg>
<doc>This keyword pulls all the required log files and uploads to a shared drive</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}There Seems to be a test failure!! Preparing To Retrieve Logs...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:54:30.031" endtime="20220314 16:54:30.031"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${device_logs} is ${True}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>__Get device List log and device interfacelogs__</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>__Get device List log and device interfacelogs__</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="__Get device List log and device interfacelogs__" library="logging">
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}************************ Retreiving Device List And Interface Logs..Please Wait *****************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:54:30.033" endtime="20220314 16:54:30.033"/>
</kw>
<kw name="Initialize Backend Connection">
<msg timestamp="20220314 16:54:30.064" level="FAIL">No keyword with name 'Initialize Backend Connection' found. Did you mean:
    common_keywords_kragle.Common.Initialize Backend Connection</msg>
<status status="FAIL" starttime="20220314 16:54:30.064" endtime="20220314 16:54:30.064"/>
</kw>
<kw name="__Get device List log__" library="logging">
<var>@{ids}</var>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:54:30.066" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:54:30.066" endtime="20220314 16:54:30.067"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:54:31.071" level="INFO">16:54:30.070519: {"msgId": "54138d31-52b7-41d7-8f9a-e0fe214a5529", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": true, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO", "ZONE_PRIMARY": "PRIMARY"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:54:31.072" level="INFO">${res} =  {"msgId": "54138d31-52b7-41d7-8f9a-e0fe214a5529", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:54:30.067" endtime="20220314 16:54:31.072"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${res}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220314 16:54:31.074" level="INFO"> {"msgId": "54138d31-52b7-41d7-8f9a-e0fe214a5529", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": true, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO", "ZONE_PRIMARY": "PRIMARY"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<status status="PASS" starttime="20220314 16:54:31.073" endtime="20220314 16:54:31.074"/>
</kw>
<kw name="Create File" library="OperatingSystem">
<arg>devicelist_log.json</arg>
<arg>content=${res}</arg>
<arg>encoding=UTF-8</arg>
<doc>Creates a file with the given content and encoding.</doc>
<msg timestamp="20220314 16:54:31.078" level="INFO" html="true">Created file '&lt;a href="file://C:\Users\cpgpq\Documents\Automation\gerty\devicelist_log.json"&gt;C:\Users\cpgpq\Documents\Automation\gerty\devicelist_log.json&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20220314 16:54:31.075" endtime="20220314 16:54:31.078"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:54:31.079" level="INFO">${res} = {'msgId': '54138d31-52b7-41d7-8f9a-e0fe214a5529', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:54:31.079" endtime="20220314 16:54:31.080"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${res}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220314 16:54:31.081" level="INFO">{'msgId': '54138d31-52b7-41d7-8f9a-e0fe214a5529', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': True, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': 'MOUSE', 'deviceFamily': '', 'deviceModel': 'g903_hero', 'displayName': 'G903 LIGHTSPEED', 'extendedDisplayName': 'G903 LIGHTSPEED Wireless Gaming Mouse', 'slotPrefix': 'g903hero', 'thumbnail': 'pipeline://core/thumbnails/g900.png', 'deviceExt': 0, 'deviceUnitId': '1068377182', 'deviceSignature': 'MOUSE.g903_hero.0.1068377182', 'givenName': '', 'capabilities': {'lightingSupport': {'deviceCategory': 'MOUSE_RGB_ZONAL', 'typeMap': {'ZONE_BRANDING': 'LOGO', 'ZONE_PRIMARY': 'PRIMARY'}, 'zones': [{'zoneType': 'ZONE_PRIMARY', 'supportedEffects': [{'id': 'OFF', 'syncable': True, 'fixedIntensity': False, 'signature': False, 'inactivityOnly': False}, {'id': 'FIXED', 'syncable': True, 'fixedIntensity': False, 'signature': False, 'inactivityOnly': False}, {'id': 'CYCLE', 'syncable': True, 'fixedIntensity': False, 'signature': False, 'inactivityOnly': False}, {'id': 'BREATHING', 'syncable': True, 'fixedIntensity': False, 'signature': False, 'inactivityOnly': False}], 'onboardCluster': 'CLUSTER_DEFAULT'}, {'zoneType': 'ZONE_BRANDING', 'supportedEffects': [{'id': 'OFF', 'syncable': True, 'fixedIntensity': False, 'signature': False, 'inactivityOnly': False}, {'id': 'FIXED', 'syncable': True, 'fixedIntensity': False, 'signature': False, 'inactivityOnly': False}, {'id': 'CYCLE', 'syncable': True, 'fixedIntensity': False, 'signature': False, 'inactivityOnly': False}, {'id': 'BREATHING', 'syncable': True, 'fixedIntensity': False, 'signature': False, 'inactivityOnly': False}], 'onboardCluster': 'CLUSTER_DEFAULT'}], 'isMonochrome': False, 'isPerKey': False, 'hideStartupEffect': False, 'shutdownEffect': False, 'brightnessLevels': [], 'powerSavingEffect': True, 'lowBatteryEffect': True, 'brightnessPercentage': False, 'gamma': False, 'firmwareOnly': False, 'offRamp': False, 'activeDimming': False, 'hasPositionalEffect': False}, 'sleepTimer': False, 'mstateSupport': {'count': 1, 'timeOut': 0}, 'maskableZones': {'zones': [{'id': 'left_side', 'slotIds': ['g903hero_g4_m1', 'g903hero_g4_m1_shifted', 'g903hero_g5_m1', 'g903hero_g5_m1_shifted'], 'displayIconKey': 'mouse_2_buttons_left_icon', 'renderIconKey': 'cover_image_left', 'enabled': False}, {'id': 'right_side', 'slotIds': ['g903hero_g6_m1', 'g903hero_g6_m1_shifted', 'g903hero_g7_m1', 'g903hero_g7_m1_shifted'], 'displayIconKey': 'mouse_2_buttons_right_icon', 'renderIconKey': 'cover_image_right', 'enabled': False}]}, 'fnInversion': False, 'presentSplashScreen': False, 'customizableColor': False, 'wirelessReportRate': False, 'hybridEngine': False, 'advancedSleepTimer': False, 'angleSnapping': False, 'excludeGShift': False, 'onboardCycleId': {'value': 11}, 'hostRemovalSupport': False, 'headphoneJack': False, 'hostInfos': False, 'gkeyLayout': 'INVALID_GKEY_LAYOUT', 'hasBatteryStatus': True, 'powerOffTimer': False, 'requiresBackupForDfu': False, 'unifiedBattery': False, 'dpiLighting': True, 'nonInteractive': False, 'receiverPairing': {'receiverType': 'LS1', 'receiverPid': 0, 'pairingAction': 'ACTION_POWER_CYCLE', 'hasForcePairing': False}, 'chargepadCompatible': True, 'individuality': False}, 'activeInterfaces': [{'type': 'DEVIO', 'id': '046d_c091', 'pid': 49297, 'modelId': 0, 'extendedModel': 0, 'serialNumber': '1068377182', 'path': 'usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002', 'containerId': 'a946cb90-f3fa-5c04-a9a6-99e0af7acf3e', 'deviceType': 'MOUSE', 'deviceName': 'G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO', 'keyboardLayout': 'INVALID_LAYOUT', 'firmwareVersion': '23.1.13', 'unitId': '1068377182', 'firmwareName': 'MPM2301', 'connectionType': 'USB', 'hasOnboardMode': True}], 'slots': {'g903hero_g4_m1': {'id': 'g903hero_g4_m1', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g12_m1': {'id': 'g903hero_g12_m1', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g2_m1_shifted': {'id': 'g903hero_g2_m1_shifted', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g1_m1_shifted': {'id': 'g903hero_g1_m1_shifted', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g11_m1': {'id': 'g903hero_g11_m1', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g10_m1': {'id': 'g903hero_g10_m1', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g9_m1': {'id': 'g903hero_g9_m1', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g4_m1_shifted': {'id': 'g903hero_g4_m1_shifted', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g11_m1_shifted': {'id': 'g903hero_g11_m1_shifted', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g7_m1': {'id': 'g903hero_g7_m1', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g2_m1': {'id': 'g903hero_g2_m1', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g3_m1_shifted': {'id': 'g903hero_g3_m1_shifted', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g10_m1_shifted': {'id': 'g903hero_g10_m1_shifted', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g8_m1': {'id': 'g903hero_g8_m1', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g5_m1_shifted': {'id': 'g903hero_g5_m1_shifted', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g9_m1_shifted': {'id': 'g903hero_g9_m1_shifted', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g3_m1': {'id': 'g903hero_g3_m1', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g6_m1_shifted': {'id': 'g903hero_g6_m1_shifted', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g6_m1': {'id': 'g903hero_g6_m1', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g8_m1_shifted': {'id': 'g903hero_g8_m1_shifted', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g7_m1_shifted': {'id': 'g903hero_g7_m1_shifted', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_lighting_setting_firmware': {'id': 'g903hero_lighting_setting_firmware', 'attribute': 'FIRMWARE_LIGHTING_SETTINGS', 'disabled': False}, 'g903hero_mouse_settings': {'id': 'g903hero_mouse_settings', 'attribute': 'MOUSE_SETTINGS', 'disabled': False}, 'g903hero_g1_m1': {'id': 'g903hero_g1_m1', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g5_m1': {'id': 'g903hero_g5_m1', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}, 'g903hero_g12_m1_shifted': {'id': 'g903hero_g12_m1_shifted', 'attribute': 'MACRO_PLAYBACK', 'disabled': False}}}]}}</msg>
<status status="PASS" starttime="20220314 16:54:31.080" endtime="20220314 16:54:31.081"/>
</kw>
<kw name="delete json object">
<arg>${res}</arg>
<arg>capabilities</arg>
<msg timestamp="20220314 16:54:31.158" level="FAIL">No keyword with name 'delete json object' found.</msg>
<status status="FAIL" starttime="20220314 16:54:31.158" endtime="20220314 16:54:31.158"/>
</kw>
<kw name="delete json object">
<arg>${res}</arg>
<arg>virtualDevice</arg>
<msg timestamp="20220314 16:54:31.187" level="FAIL">No keyword with name 'delete json object' found.</msg>
<status status="FAIL" starttime="20220314 16:54:31.187" endtime="20220314 16:54:31.187"/>
</kw>
<kw name="delete json object">
<arg>${res}</arg>
<arg>activeInterfaces</arg>
<msg timestamp="20220314 16:54:31.208" level="FAIL">No keyword with name 'delete json object' found.</msg>
<status status="FAIL" starttime="20220314 16:54:31.208" endtime="20220314 16:54:31.208"/>
</kw>
<kw name="delete json object">
<arg>${res}</arg>
<arg>slots</arg>
<msg timestamp="20220314 16:54:31.229" level="FAIL">No keyword with name 'delete json object' found.</msg>
<status status="FAIL" starttime="20220314 16:54:31.229" endtime="20220314 16:54:31.229"/>
</kw>
<kw name="delete json object">
<arg>${res}</arg>
<arg>zones</arg>
<msg timestamp="20220314 16:54:31.259" level="FAIL">No keyword with name 'delete json object' found.</msg>
<status status="FAIL" starttime="20220314 16:54:31.259" endtime="20220314 16:54:31.259"/>
</kw>
<kw name="Get Values From Json Response">
<var>${deviceids}=</var>
<arg>${res}</arg>
<arg>id</arg>
<msg timestamp="20220314 16:54:31.282" level="FAIL">No keyword with name 'Get Values From Json Response' found. Did you mean:
    common_keywords_kragle.Common.Get Values From Json Response
    common_keywords_kragle.Common.Get Value From Json Response</msg>
<status status="FAIL" starttime="20220314 16:54:31.282" endtime="20220314 16:54:31.282"/>
</kw>
<msg timestamp="20220314 16:54:31.295" level="INFO">@{ids} = [ ]</msg>
<msg timestamp="20220314 16:54:31.295" level="FAIL">Replacing variables from keyword return value failed: Variable '${deviceids}' not found.</msg>
<status status="FAIL" starttime="20220314 16:54:30.065" endtime="20220314 16:54:31.295"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${ids}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:54:31.296" endtime="20220314 16:54:31.296"/>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<arg>${ids}</arg>
<arg>msg= Devices Not Found.Please Check If Devices Are Connected !!</arg>
<doc>Verifies that the given item is not empty.</doc>
<msg timestamp="20220314 16:54:31.297" level="INFO">Length is 0</msg>
<msg timestamp="20220314 16:54:31.298" level="FAIL"> Devices Not Found.Please Check If Devices Are Connected !!</msg>
<status status="FAIL" starttime="20220314 16:54:31.297" endtime="20220314 16:54:31.298"/>
</kw>
<kw name="__Get device list interface log__" library="logging">
<arg>@{ids}</arg>
<for flavor="IN">
<var>${id}</var>
<value>@{deviceids}</value>
<status status="PASS" starttime="20220314 16:54:31.299" endtime="20220314 16:54:31.299"/>
</for>
<status status="PASS" starttime="20220314 16:54:31.298" endtime="20220314 16:54:31.299"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}*********************** Retreiving Device List And Interface Logs..COMPLETE !! ******************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:54:31.300" endtime="20220314 16:54:31.300"/>
</kw>
<kw name="Close Backend Connection">
<msg timestamp="20220314 16:54:31.333" level="FAIL">No keyword with name 'Close Backend Connection' found. Did you mean:
    common_keywords_kragle.Common.Close Backend Connection</msg>
<status status="FAIL" starttime="20220314 16:54:31.333" endtime="20220314 16:54:31.334"/>
</kw>
<status status="FAIL" starttime="20220314 16:54:30.032" endtime="20220314 16:54:31.334"/>
</kw>
<status status="PASS" starttime="20220314 16:54:30.032" endtime="20220314 16:54:31.334"/>
</kw>
<status status="PASS" starttime="20220314 16:54:30.032" endtime="20220314 16:54:31.334"/>
</kw>
<kw name="__Get Report Folder__" library="logging">
<kw name="Get Latest Folder From Directory" library="libraries.utilities.backend_api_utils.cpu_and_app_log_util">
<var>${file_path}</var>
<arg>${EXEC_DIR}/report</arg>
<msg timestamp="20220314 16:54:31.336" level="INFO">C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\</msg>
<msg timestamp="20220314 16:54:31.336" level="INFO">${file_path} = C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\</msg>
<status status="PASS" starttime="20220314 16:54:31.335" endtime="20220314 16:54:31.336"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${report_path}</arg>
<arg>${file_path}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220314 16:54:31.337" level="INFO">${report_path} = C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\</msg>
<status status="PASS" starttime="20220314 16:54:31.337" endtime="20220314 16:54:31.337"/>
</kw>
<status status="PASS" starttime="20220314 16:54:31.334" endtime="20220314 16:54:31.337"/>
</kw>
<kw name="__Capture Screenshot And Get Path__" library="logging">
<var>${screenshot}</var>
<arg>${screenshot_prefix}</arg>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${debug_logs} is ${False}</arg>
<arg>Set Debug Log Path</arg>
<arg>Logs_Not_Enabled</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:54:31.338" endtime="20220314 16:54:31.338"/>
</kw>
<kw name="__Get Report Folder__" library="logging">
<kw name="Get Latest Folder From Directory" library="libraries.utilities.backend_api_utils.cpu_and_app_log_util">
<var>${file_path}</var>
<arg>${EXEC_DIR}/report</arg>
<msg timestamp="20220314 16:54:31.340" level="INFO">C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\</msg>
<msg timestamp="20220314 16:54:31.340" level="INFO">${file_path} = C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\</msg>
<status status="PASS" starttime="20220314 16:54:31.339" endtime="20220314 16:54:31.340"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${report_path}</arg>
<arg>${file_path}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220314 16:54:31.341" level="INFO">${report_path} = C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\</msg>
<status status="PASS" starttime="20220314 16:54:31.341" endtime="20220314 16:54:31.341"/>
</kw>
<status status="PASS" starttime="20220314 16:54:31.338" endtime="20220314 16:54:31.341"/>
</kw>
<kw name="Capture Snapshot" library="libraries.components.React">
<var>${screenshot}</var>
<arg>filename=${screenshot_prefix}</arg>
<msg timestamp="20220314 16:54:31.342" level="INFO" html="true">&lt;a href=end_test-screenshot-20220314-165431.png&gt;IMAGE_LINK&lt;/a&gt;
                &lt;img src=end_test-screenshot-20220314-165431.png style="padding-top: 5px; width: 100%;"/&gt;</msg>
<msg timestamp="20220314 16:54:31.486" level="INFO">Failed to find element with selector: .back-button</msg>
<msg timestamp="20220314 16:54:31.486" level="INFO">${screenshot} = end_test-screenshot-20220314-165431.png</msg>
<status status="PASS" starttime="20220314 16:54:31.342" endtime="20220314 16:54:31.486"/>
</kw>
<kw name="Set Snapshot Path" library="libraries.Listener">
<arg>${screenshot}</arg>
<status status="PASS" starttime="20220314 16:54:31.487" endtime="20220314 16:54:31.487"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_path}</arg>
<arg>${report_path}/${screenshot}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220314 16:54:31.489" level="INFO">${screenshot_path} = C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\/end_test-screenshot-20220314-165431.png</msg>
<status status="PASS" starttime="20220314 16:54:31.488" endtime="20220314 16:54:31.489"/>
</kw>
<msg timestamp="20220314 16:54:31.489" level="INFO">${screenshot} = end_test-screenshot-20220314-165431.png</msg>
<status status="PASS" starttime="20220314 16:54:31.337" endtime="20220314 16:54:31.489"/>
</kw>
<kw name="__Capture Frontend Logs And Get Path__" library="logging">
<kw name="__Get Report Folder__" library="logging">
<kw name="Get Latest Folder From Directory" library="libraries.utilities.backend_api_utils.cpu_and_app_log_util">
<var>${file_path}</var>
<arg>${EXEC_DIR}/report</arg>
<msg timestamp="20220314 16:54:31.494" level="INFO">C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\</msg>
<msg timestamp="20220314 16:54:31.494" level="INFO">${file_path} = C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\</msg>
<status status="PASS" starttime="20220314 16:54:31.492" endtime="20220314 16:54:31.494"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${report_path}</arg>
<arg>${file_path}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220314 16:54:31.495" level="INFO">${report_path} = C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\</msg>
<status status="PASS" starttime="20220314 16:54:31.494" endtime="20220314 16:54:31.495"/>
</kw>
<status status="PASS" starttime="20220314 16:54:31.490" endtime="20220314 16:54:31.495"/>
</kw>
<kw name="Get Frontend Logs" library="libraries.components.React">
<var>${frontend_logs_path}</var>
<arg>${report_path}</arg>
<msg timestamp="20220314 16:54:31.516" level="INFO">${frontend_logs_path} = C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\frontend_14-03-2022_16-54-31.log</msg>
<status status="PASS" starttime="20220314 16:54:31.495" endtime="20220314 16:54:31.516"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${fe_log_path}</arg>
<arg>${frontend_logs_path}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220314 16:54:31.518" level="INFO">${fe_log_path} = C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\frontend_14-03-2022_16-54-31.log</msg>
<status status="PASS" starttime="20220314 16:54:31.517" endtime="20220314 16:54:31.518"/>
</kw>
<status status="PASS" starttime="20220314 16:54:31.489" endtime="20220314 16:54:31.519"/>
</kw>
<kw name="__Capture Debug Logs And Get Path__" library="logging">
<var>${file_name}</var>
<kw name="__Get Report Folder__" library="logging">
<kw name="Get Latest Folder From Directory" library="libraries.utilities.backend_api_utils.cpu_and_app_log_util">
<var>${file_path}</var>
<arg>${EXEC_DIR}/report</arg>
<msg timestamp="20220314 16:54:31.528" level="INFO">C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\</msg>
<msg timestamp="20220314 16:54:31.528" level="INFO">${file_path} = C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\</msg>
<status status="PASS" starttime="20220314 16:54:31.525" endtime="20220314 16:54:31.528"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${report_path}</arg>
<arg>${file_path}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220314 16:54:31.530" level="INFO">${report_path} = C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\</msg>
<status status="PASS" starttime="20220314 16:54:31.529" endtime="20220314 16:54:31.530"/>
</kw>
<status status="PASS" starttime="20220314 16:54:31.522" endtime="20220314 16:54:31.530"/>
</kw>
<kw name="__Pull Supporting Logs__" library="logging">
<var>${file_name}</var>
<arg>${screenshot_path}</arg>
<arg>${fe_log_path}</arg>
<doc>This is an internal keyword used to pull the required debug logs</doc>
<kw name="Generate Dmp" library="libraries.utilities.backend_api_utils.cpu_and_app_log_util">
<var>${dir_name}</var>
<arg>${screenshot}</arg>
<arg>${fe_logs}</arg>
<doc>Collects all the required debug log files and creates a zipfile</doc>
<msg timestamp="20220314 16:54:43.776" level="INFO">Current date and time : 
2022_03_14_16_54_31
dmp_logs_2022_03_14_16_54_31
Path : C:\Users\cpgpq\Documents\Automation\gerty\dmp_logs_2022_03_14_16_54_31
Directory 'dmp_logs_2022_03_14_16_54_31' created.zip

[Errno 2] No such file or directory: 'C:\\Users\\cpgpq\\Documents\\Automation\\gerty\\'
Backend is Not Running. It might have crashed..Trying to get crash logs..
max() arg is an empty sequence
C:\Users\cpgpq\AppData\Local\Temp/com.logi.ghub.agent.logs\20220314T111845-agent-31524.log
(You do not have access to this process)
copied pid file
C:\Users\cpgpq\Documents\Automation\gerty\report\Report_14Mar2022_164646\
Delete :  C:\Users\cpgpq\Documents\Automation\gerty\dmp_logs_2022_03_14_16_54_31
return name directory : dmp_logs_2022_03_14_16_54_31</msg>
<msg timestamp="20220314 16:54:43.777" level="INFO">${dir_name} = dmp_logs_2022_03_14_16_54_31</msg>
<status status="PASS" starttime="20220314 16:54:31.531" endtime="20220314 16:54:43.777"/>
</kw>
<msg timestamp="20220314 16:54:43.777" level="INFO">${file_name} = dmp_logs_2022_03_14_16_54_31.zip</msg>
<status status="PASS" starttime="20220314 16:54:31.530" endtime="20220314 16:54:43.778"/>
</kw>
<kw name="Set Debug Log Path" library="libraries.Listener">
<arg>${file_name}</arg>
<status status="PASS" starttime="20220314 16:54:43.779" endtime="20220314 16:54:43.779"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${drive_path}</arg>
<arg>${report_path}/${file_name}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220314 16:54:43.781" level="INFO">${drive_path} = C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\/dmp_logs_2022_03_14_16_54_31.zip</msg>
<status status="PASS" starttime="20220314 16:54:43.780" endtime="20220314 16:54:43.781"/>
</kw>
<msg timestamp="20220314 16:54:43.782" level="INFO">${file_name} = dmp_logs_2022_03_14_16_54_31.zip</msg>
<status status="PASS" starttime="20220314 16:54:31.520" endtime="20220314 16:54:43.782"/>
</kw>
<if>
<branch type="IF" condition="&quot;${ftp_logs}&quot; == &quot;${True}&quot;">
<kw name="__Upload File To Ftpserver__" library="logging">
<arg>${file_name}</arg>
<arg>${report_path}/</arg>
<doc>Uploads the given file in the shared FTP path</doc>
<status status="NOT RUN" starttime="20220314 16:54:43.783" endtime="20220314 16:54:43.783"/>
</kw>
<kw name="__Upload File To Ftpserver__" library="logging">
<arg>${screenshot}</arg>
<arg>${report_path}/</arg>
<doc>Uploads the given file in the shared FTP path</doc>
<status status="NOT RUN" starttime="20220314 16:54:43.784" endtime="20220314 16:54:43.784"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${ftpdrive_path}</var>
<arg>https://ftp.np.logitech.io/${file_name}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20220314 16:54:43.784" endtime="20220314 16:54:43.784"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${ftpsnapshot_path}</var>
<arg>https://ftp.np.logitech.io/${screenshot}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="NOT RUN" starttime="20220314 16:54:43.785" endtime="20220314 16:54:43.785"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}Supporting Log Files are Uploaded to : ${ftpdrive_path}</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20220314 16:54:43.786" endtime="20220314 16:54:43.786"/>
</kw>
<kw name="Remove File" library="OperatingSystem">
<arg>${EXEC_DIR}/report/${file_name}</arg>
<doc>Removes a file with the given path.</doc>
<status status="NOT RUN" starttime="20220314 16:54:43.786" endtime="20220314 16:54:43.786"/>
</kw>
<kw name="Set Debug Log Path" library="libraries.Listener">
<arg>${ftpdrive_path}</arg>
<status status="NOT RUN" starttime="20220314 16:54:43.787" endtime="20220314 16:54:43.787"/>
</kw>
<kw name="Set Snapshot Path" library="libraries.Listener">
<arg>${ftpsnapshot_path}</arg>
<status status="NOT RUN" starttime="20220314 16:54:43.787" endtime="20220314 16:54:43.787"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:54:43.782" endtime="20220314 16:54:43.787"/>
</branch>
<branch type="ELSE">
<kw name="Set Debug Log Path" library="libraries.Listener">
<arg>${file_name}</arg>
<status status="PASS" starttime="20220314 16:54:43.787" endtime="20220314 16:54:43.788"/>
</kw>
<kw name="Set Snapshot Path" library="libraries.Listener">
<arg>${screenshot}</arg>
<status status="PASS" starttime="20220314 16:54:43.788" endtime="20220314 16:54:43.788"/>
</kw>
<status status="PASS" starttime="20220314 16:54:43.787" endtime="20220314 16:54:43.788"/>
</branch>
<status status="PASS" starttime="20220314 16:54:43.782" endtime="20220314 16:54:43.788"/>
</if>
<status status="PASS" starttime="20220314 16:54:30.031" endtime="20220314 16:54:43.789"/>
</kw>
<status status="PASS" starttime="20220314 16:54:30.030" endtime="20220314 16:54:43.789"/>
</kw>
<status status="PASS" starttime="20220314 16:54:30.026" endtime="20220314 16:54:43.789"/>
</kw>
<status status="PASS" starttime="20220314 16:54:30.025" endtime="20220314 16:54:43.789"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${test_status}'=='FAIL'</arg>
<arg>Get Page Source And Set Path</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Get Page Source And Set Path" library="logging">
<doc>Get the page source of the application and stores it inside a file</doc>
<kw name="Get Page Source" library="libraries.components.React">
<var>${page_source_path}</var>
<arg>${report_path}</arg>
<doc>Method used to to get the application page source(DOM) and save in .html file.</doc>
<msg timestamp="20220314 16:54:43.799" level="INFO">${page_source_path} = C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\14032022_16_54_43_page_source.html</msg>
<status status="PASS" starttime="20220314 16:54:43.790" endtime="20220314 16:54:43.799"/>
</kw>
<kw name="Set Page Source Path" library="libraries.Listener">
<arg>${page_source_path}</arg>
<status status="PASS" starttime="20220314 16:54:43.799" endtime="20220314 16:54:43.800"/>
</kw>
<status status="PASS" starttime="20220314 16:54:43.790" endtime="20220314 16:54:43.800"/>
</kw>
<status status="PASS" starttime="20220314 16:54:43.789" endtime="20220314 16:54:43.800"/>
</kw>
<status status="PASS" starttime="20220314 16:54:30.023" endtime="20220314 16:54:43.801"/>
</kw>
<kw name="device_settings.Disable Onboard Memory Mode" library="device_settings">
<arg>${device['displayName']}</arg>
<kw name="Log To Console" library="BuiltIn">
<arg>Disabling onboard mode: ${device_name}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:54:43.813" endtime="20220314 16:54:43.813"/>
</kw>
<kw name="home.Is Device Home Screen Loaded" library="home_screen">
<arg>${device_name}</arg>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:54:48.822" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:54:43.816" endtime="20220314 16:54:48.822"/>
</kw>
<status status="FAIL" starttime="20220314 16:54:43.816" endtime="20220314 16:54:48.823"/>
</kw>
<msg timestamp="20220314 16:54:48.823" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 16:54:43.815" endtime="20220314 16:54:48.823"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 16:54:48.825" endtime="20220314 16:54:48.825"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:54:48.826" endtime="20220314 16:54:48.826"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:54:48.827" endtime="20220314 16:54:48.827"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:54:48.827" endtime="20220314 16:54:48.827"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:54:48.828" endtime="20220314 16:54:48.828"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 16:54:48.829" endtime="20220314 16:54:48.829"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:54:48.824" endtime="20220314 16:54:48.829"/>
</branch>
<status status="PASS" starttime="20220314 16:54:48.824" endtime="20220314 16:54:48.830"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:54:48.833" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:54:48.833" endtime="20220314 16:54:48.834"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:54:48.835" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:54:48.835" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:54:48.834" endtime="20220314 16:54:48.835"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:54:48.837" endtime="20220314 16:54:48.853"/>
</kw>
<status status="PASS" starttime="20220314 16:54:48.836" endtime="20220314 16:54:48.853"/>
</kw>
<status status="PASS" starttime="20220314 16:54:48.831" endtime="20220314 16:54:48.853"/>
</kw>
<msg timestamp="20220314 16:54:48.854" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220314 16:54:48.831" endtime="20220314 16:54:48.854"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:54:48.854" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:54:48.854" endtime="20220314 16:54:48.854"/>
</kw>
<status status="PASS" starttime="20220314 16:54:43.815" endtime="20220314 16:54:48.854"/>
</iter>
<status status="PASS" starttime="20220314 16:54:43.815" endtime="20220314 16:54:48.855"/>
</for>
<status status="PASS" starttime="20220314 16:54:43.815" endtime="20220314 16:54:48.855"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:54:49.873" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 16:54:49.874" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:54:48.858" endtime="20220314 16:54:49.874"/>
</kw>
<msg timestamp="20220314 16:54:49.874" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:54:48.857" endtime="20220314 16:54:49.874"/>
</kw>
<msg timestamp="20220314 16:54:49.875" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:54:48.856" endtime="20220314 16:54:49.875"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:54:49.877" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:54:49.876" endtime="20220314 16:54:49.877"/>
</kw>
<status status="PASS" starttime="20220314 16:54:48.855" endtime="20220314 16:54:49.877"/>
</iter>
<status status="PASS" starttime="20220314 16:54:48.855" endtime="20220314 16:54:49.877"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:54:49.882" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:54:49.882" endtime="20220314 16:54:49.882"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:54:49.883" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:54:49.883" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:54:49.883" endtime="20220314 16:54:49.883"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:54:49.885" endtime="20220314 16:54:49.902"/>
</kw>
<status status="PASS" starttime="20220314 16:54:49.884" endtime="20220314 16:54:49.902"/>
</kw>
<status status="PASS" starttime="20220314 16:54:49.880" endtime="20220314 16:54:49.902"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:54:51.907" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:54:49.903" endtime="20220314 16:54:51.909"/>
</kw>
<status status="PASS" starttime="20220314 16:54:49.879" endtime="20220314 16:54:51.910"/>
</kw>
<status status="PASS" starttime="20220314 16:54:43.814" endtime="20220314 16:54:51.910"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:54:53.939" level="INFO">Failed to find element with selector: .left-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:54:51.918" endtime="20220314 16:54:53.941"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:54:53.952" level="FAIL">Failure: Selector ".left-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 16:54:53.942" endtime="20220314 16:54:53.952"/>
</kw>
<status status="FAIL" starttime="20220314 16:54:51.917" endtime="20220314 16:54:53.953"/>
</kw>
<msg timestamp="20220314 16:54:53.953" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 16:54:51.916" endtime="20220314 16:54:53.953"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:54:53.954" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:54:53.954" endtime="20220314 16:54:53.954"/>
</kw>
<status status="PASS" starttime="20220314 16:54:51.914" endtime="20220314 16:54:53.954"/>
</iter>
<status status="PASS" starttime="20220314 16:54:51.914" endtime="20220314 16:54:53.955"/>
</for>
<status status="PASS" starttime="20220314 16:54:51.914" endtime="20220314 16:54:53.955"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:54:55.973" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:54:53.958" endtime="20220314 16:54:55.976"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:54:55.990" level="FAIL">Failure: Selector ".right-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 16:54:55.977" endtime="20220314 16:54:55.990"/>
</kw>
<status status="FAIL" starttime="20220314 16:54:53.957" endtime="20220314 16:54:55.990"/>
</kw>
<msg timestamp="20220314 16:54:55.991" level="INFO">${right_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 16:54:53.956" endtime="20220314 16:54:55.991"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:54:55.993" endtime="20220314 16:54:56.027"/>
</kw>
<msg timestamp="20220314 16:54:56.027" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220314 16:54:55.992" endtime="20220314 16:54:56.027"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:54:56.028" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:54:56.028" endtime="20220314 16:54:56.028"/>
</kw>
<status status="PASS" starttime="20220314 16:54:53.955" endtime="20220314 16:54:56.029"/>
</iter>
<status status="PASS" starttime="20220314 16:54:53.955" endtime="20220314 16:54:56.029"/>
</for>
<status status="PASS" starttime="20220314 16:54:51.912" endtime="20220314 16:54:56.029"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_device_in_active_state}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:54:56.031" endtime="20220314 16:54:56.056"/>
</kw>
<status status="PASS" starttime="20220314 16:54:56.030" endtime="20220314 16:54:56.056"/>
</kw>
<msg timestamp="20220314 16:54:56.056" level="INFO">${is_device_in_active_state} = True</msg>
<status status="PASS" starttime="20220314 16:54:56.029" endtime="20220314 16:54:56.056"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${is_device_in_active_state} is ${True}</arg>
<arg>${True}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 16:54:56.057" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 16:54:56.057" endtime="20220314 16:54:56.057"/>
</kw>
<status status="PASS" starttime="20220314 16:54:43.814" endtime="20220314 16:54:56.057"/>
</kw>
<kw name="home.Is Device In Onboard Mode" library="home_screen">
<var>${onboard_mode}</var>
<arg>${device_name}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${home_onboard_mode_start}${device_name}${home_onboard_mode_end}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_onboard_mode_start}${device_name}${home_onboard_mode_end}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:54:56.059" endtime="20220314 16:54:56.069"/>
</kw>
<msg timestamp="20220314 16:54:56.069" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:54:56.059" endtime="20220314 16:54:56.069"/>
</kw>
<msg timestamp="20220314 16:54:56.070" level="INFO">${onboard_mode} = True</msg>
<status status="PASS" starttime="20220314 16:54:56.058" endtime="20220314 16:54:56.070"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${onboard_mode} is ${False}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:54:56.070" endtime="20220314 16:54:56.070"/>
</kw>
<kw name="home.Open Device Configuration" library="home_screen">
<arg>${device_name}</arg>
<doc>Click on the device to open device configuration and if device introduction page opens then skip it.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device Home Screen Loaded</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device Home Screen Loaded" library="home_screen">
<arg>${device_name}</arg>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:55:01.093" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:54:56.077" endtime="20220314 16:55:01.093"/>
</kw>
<status status="FAIL" starttime="20220314 16:54:56.077" endtime="20220314 16:55:01.093"/>
</kw>
<msg timestamp="20220314 16:55:01.094" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 16:54:56.076" endtime="20220314 16:55:01.094"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 16:55:01.095" endtime="20220314 16:55:01.095"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:55:01.096" endtime="20220314 16:55:01.096"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:55:01.097" endtime="20220314 16:55:01.097"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:55:01.098" endtime="20220314 16:55:01.098"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:55:01.099" endtime="20220314 16:55:01.099"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 16:55:01.100" endtime="20220314 16:55:01.100"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:55:01.095" endtime="20220314 16:55:01.100"/>
</branch>
<status status="PASS" starttime="20220314 16:55:01.094" endtime="20220314 16:55:01.100"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:55:01.104" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:55:01.104" endtime="20220314 16:55:01.104"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:55:01.105" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:55:01.105" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:55:01.105" endtime="20220314 16:55:01.105"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:55:01.106" endtime="20220314 16:55:01.121"/>
</kw>
<status status="PASS" starttime="20220314 16:55:01.106" endtime="20220314 16:55:01.121"/>
</kw>
<status status="PASS" starttime="20220314 16:55:01.102" endtime="20220314 16:55:01.121"/>
</kw>
<msg timestamp="20220314 16:55:01.121" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220314 16:55:01.101" endtime="20220314 16:55:01.121"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:55:01.122" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:55:01.122" endtime="20220314 16:55:01.122"/>
</kw>
<status status="PASS" starttime="20220314 16:54:56.076" endtime="20220314 16:55:01.122"/>
</iter>
<status status="PASS" starttime="20220314 16:54:56.075" endtime="20220314 16:55:01.123"/>
</for>
<status status="PASS" starttime="20220314 16:54:56.075" endtime="20220314 16:55:01.123"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:55:02.143" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 16:55:02.144" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:55:01.126" endtime="20220314 16:55:02.144"/>
</kw>
<msg timestamp="20220314 16:55:02.144" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:55:01.125" endtime="20220314 16:55:02.144"/>
</kw>
<msg timestamp="20220314 16:55:02.145" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:55:01.124" endtime="20220314 16:55:02.145"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:55:02.147" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:55:02.146" endtime="20220314 16:55:02.147"/>
</kw>
<status status="PASS" starttime="20220314 16:55:01.123" endtime="20220314 16:55:02.147"/>
</iter>
<status status="PASS" starttime="20220314 16:55:01.123" endtime="20220314 16:55:02.147"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:55:02.150" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:55:02.150" endtime="20220314 16:55:02.150"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:55:02.151" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:55:02.151" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:55:02.151" endtime="20220314 16:55:02.151"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:55:02.152" endtime="20220314 16:55:02.172"/>
</kw>
<status status="PASS" starttime="20220314 16:55:02.151" endtime="20220314 16:55:02.172"/>
</kw>
<status status="PASS" starttime="20220314 16:55:02.149" endtime="20220314 16:55:02.172"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:55:04.189" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:55:02.173" endtime="20220314 16:55:04.191"/>
</kw>
<status status="PASS" starttime="20220314 16:55:02.148" endtime="20220314 16:55:04.192"/>
</kw>
<status status="PASS" starttime="20220314 16:54:56.074" endtime="20220314 16:55:04.192"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:55:06.204" level="INFO">Failed to find element with selector: .left-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:55:04.200" endtime="20220314 16:55:06.207"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:55:06.216" level="FAIL">Failure: Selector ".left-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 16:55:06.208" endtime="20220314 16:55:06.216"/>
</kw>
<status status="FAIL" starttime="20220314 16:55:04.199" endtime="20220314 16:55:06.217"/>
</kw>
<msg timestamp="20220314 16:55:06.217" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 16:55:04.198" endtime="20220314 16:55:06.217"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:55:06.217" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:55:06.217" endtime="20220314 16:55:06.217"/>
</kw>
<status status="PASS" starttime="20220314 16:55:04.197" endtime="20220314 16:55:06.217"/>
</iter>
<status status="PASS" starttime="20220314 16:55:04.196" endtime="20220314 16:55:06.218"/>
</for>
<status status="PASS" starttime="20220314 16:55:04.196" endtime="20220314 16:55:06.218"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:55:08.228" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:55:06.223" endtime="20220314 16:55:08.230"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:55:08.243" level="FAIL">Failure: Selector ".right-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 16:55:08.232" endtime="20220314 16:55:08.244"/>
</kw>
<status status="FAIL" starttime="20220314 16:55:06.221" endtime="20220314 16:55:08.244"/>
</kw>
<msg timestamp="20220314 16:55:08.244" level="INFO">${right_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 16:55:06.220" endtime="20220314 16:55:08.245"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:55:08.246" endtime="20220314 16:55:08.273"/>
</kw>
<msg timestamp="20220314 16:55:08.273" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220314 16:55:08.245" endtime="20220314 16:55:08.273"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:55:08.274" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:55:08.273" endtime="20220314 16:55:08.274"/>
</kw>
<status status="PASS" starttime="20220314 16:55:06.219" endtime="20220314 16:55:08.274"/>
</iter>
<status status="PASS" starttime="20220314 16:55:06.219" endtime="20220314 16:55:08.274"/>
</for>
<status status="PASS" starttime="20220314 16:55:04.194" endtime="20220314 16:55:08.274"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_device_in_active_state}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:55:08.275" endtime="20220314 16:55:08.301"/>
</kw>
<status status="PASS" starttime="20220314 16:55:08.275" endtime="20220314 16:55:08.301"/>
</kw>
<msg timestamp="20220314 16:55:08.301" level="INFO">${is_device_in_active_state} = True</msg>
<status status="PASS" starttime="20220314 16:55:08.274" endtime="20220314 16:55:08.301"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${is_device_in_active_state} is ${True}</arg>
<arg>${True}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 16:55:08.302" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 16:55:08.301" endtime="20220314 16:55:08.302"/>
</kw>
<status status="PASS" starttime="20220314 16:54:56.073" endtime="20220314 16:55:08.302"/>
</kw>
<msg timestamp="20220314 16:55:08.302" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:54:56.072" endtime="20220314 16:55:08.302"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'False'">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>${device_name} not loaded in GHub.</arg>
<status status="NOT RUN" starttime="20220314 16:55:08.302" endtime="20220314 16:55:08.302"/>
</kw>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220314 16:55:08.303" endtime="20220314 16:55:08.303"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:55:08.302" endtime="20220314 16:55:08.303"/>
</branch>
<status status="PASS" starttime="20220314 16:55:08.302" endtime="20220314 16:55:08.303"/>
</if>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:55:08.303" endtime="20220314 16:55:08.957"/>
</kw>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:55:11.013" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220314 16:55:11.014" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:55:08.962" endtime="20220314 16:55:11.015"/>
</kw>
<status status="PASS" starttime="20220314 16:55:08.960" endtime="20220314 16:55:11.015"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:55:13.083" level="FAIL">Failure: Selector "//*[@id="color-variant"]/button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:55:11.017" endtime="20220314 16:55:13.083"/>
</kw>
<status status="PASS" starttime="20220314 16:55:11.016" endtime="20220314 16:55:13.084"/>
</kw>
<status status="PASS" starttime="20220314 16:55:08.959" endtime="20220314 16:55:13.084"/>
</kw>
<kw name="device_view.Handle Got It Popup" library="device_main_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${got_it_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_got_it_button}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_got_it_button}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:55:18.112" level="FAIL">Failure: Selector "//div[@class='coach-mark']/button[text()='GOT IT']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:55:13.088" endtime="20220314 16:55:18.112"/>
</kw>
<msg timestamp="20220314 16:55:18.113" level="INFO">${got_it_button_present} = False</msg>
<status status="PASS" starttime="20220314 16:55:13.087" endtime="20220314 16:55:18.113"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${got_it_button_present} is ${False}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 16:55:18.115" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 16:55:18.114" endtime="20220314 16:55:18.115"/>
</kw>
<status status="PASS" starttime="20220314 16:55:13.086" endtime="20220314 16:55:18.115"/>
</kw>
<status status="PASS" starttime="20220314 16:54:56.071" endtime="20220314 16:55:18.115"/>
</kw>
<kw name="device_settings.Disable On-Board Memory Mode" library="device_settings_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_settings_disable_on-board_memory_mode}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:55:18.116" endtime="20220314 16:55:18.723"/>
</kw>
<status status="PASS" starttime="20220314 16:55:18.116" endtime="20220314 16:55:18.723"/>
</kw>
<status status="PASS" starttime="20220314 16:54:43.802" endtime="20220314 16:55:18.724"/>
</kw>
<status status="PASS" starttime="20220314 16:54:30.023" endtime="20220314 16:55:18.724"/>
</kw>
<status status="FAIL" starttime="20220314 16:51:34.297" endtime="20220314 16:55:18.725"/>
</kw>
<status status="FAIL" starttime="20220314 16:51:34.297" endtime="20220314 16:55:18.726"/>
</kw>
<tag>Device: G903 LIGHTSPEED (Windows, Wired)</tag>
<tag>Device Type: MOUSE</tag>
<tag>Feature: dpi</tag>
<tag>OS: Windows-10-10.0.22000-SP0</tag>
<tag>SKIPPED</tag>
<status status="FAIL" starttime="20220314 16:51:34.275" endtime="20220314 16:55:18.726">*HTML*Resolving variable '${device['device_specific_features']['device_settings']['On Board Memory Mode']}' failed: TypeError: list indices must be integers or slices, not str 

 &lt;a href=dmp_logs_2022_03_14_16_54_31.zip&gt;DEBUG_LOGS&lt;/a&gt; 

 &lt;a href=end_test-screenshot-20220314-165431.png&gt;SCREENSHOT&lt;/a&gt; 

 &lt;a href=C:\Users\cpgpq\Documents\Automation\gerty/report\Report_14Mar2022_164646\14032022_16_54_43_page_source.html&gt;PAGE_SOURCE&lt;/a&gt;</status>
</test>
<test id="s1-t5" name="Test: DPI Sensitivity For Mouse: G903 LIGHTSPEED (Windows, Wired)">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Test: DPI Sensitivity For Mouse</arg>
<arg>{'displayName': 'G903 LIGHTSPEED', 'connection_type': 'wired', 'hub': 3856831629, 'portNumber': 6, 'features': {'dpi': ['sys']}, 'pid': 'c091', 'productId': '0xc091', 'firmware': '23.1.13', 'modelId': 'c4087', 'type': 'MOUSE', 'device_specific_features': {'lightsync': {'primary': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer'], 'logo': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}, 'device_settings': ['DPI Lighting', 'Startup Effect', 'Low Battery Mode', 'Firmware Version', 'On-Board Memory Mode', 'Battery Level']}, 'connection_interfaces': {'wired': {'pid': 'c091', 'productId': '0xc091'}, 'wireless': {'pid': '0x4087', 'productId': '0x4087'}}}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Test: DPI Sensitivity For Mouse" library="mouse_regression_system">
<arg>{'displayName': 'G903 LIGHTSPEED', 'connection_type': 'wired', 'hub': 3856831629, 'portNumber': 6, 'features': {'dpi': ['sys']}, 'pid': 'c091', 'productId': '0xc091', 'firmware': '23.1.13', 'modelId': 'c4087', 'type': 'MOUSE', 'device_specific_features': {'lightsync': {'primary': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer'], 'logo': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}, 'device_settings': ['DPI Lighting', 'Startup Effect', 'Low Battery Mode', 'Firmware Version', 'On-Board Memory Mode', 'Battery Level']}, 'connection_interfaces': {'wired': {'pid': 'c091', 'productId': '0xc091'}, 'wireless': {'pid': '0x4087', 'productId': '0x4087'}}}</arg>
<tag>dpi</tag>
<doc>Check DPI sensitivity for desktop and application(chrome) profiles
Check that the DPI speeds have the expected preset value and expected report rate</doc>
<kw name="home.Open Device Configuration" library="home_screen">
<arg>${device['displayName']}</arg>
<doc>Click on the device to open device configuration and if device introduction page opens then skip it.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device Home Screen Loaded</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device Home Screen Loaded" library="home_screen">
<arg>${device_name}</arg>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:56:08.273" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:56:03.226" endtime="20220314 16:56:08.273"/>
</kw>
<status status="FAIL" starttime="20220314 16:56:03.225" endtime="20220314 16:56:08.276"/>
</kw>
<msg timestamp="20220314 16:56:08.277" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 16:56:03.225" endtime="20220314 16:56:08.277"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 16:56:08.278" endtime="20220314 16:56:08.278"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:56:08.279" endtime="20220314 16:56:08.279"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:56:08.280" endtime="20220314 16:56:08.280"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:56:08.281" endtime="20220314 16:56:08.281"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:56:08.281" endtime="20220314 16:56:08.282"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 16:56:08.282" endtime="20220314 16:56:08.282"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:56:08.278" endtime="20220314 16:56:08.282"/>
</branch>
<status status="PASS" starttime="20220314 16:56:08.277" endtime="20220314 16:56:08.283"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:56:08.285" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:56:08.285" endtime="20220314 16:56:08.285"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:56:08.286" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:56:08.286" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:56:08.286" endtime="20220314 16:56:08.286"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:56:08.287" endtime="20220314 16:56:08.309"/>
</kw>
<status status="PASS" starttime="20220314 16:56:08.286" endtime="20220314 16:56:08.310"/>
</kw>
<status status="PASS" starttime="20220314 16:56:08.284" endtime="20220314 16:56:08.310"/>
</kw>
<msg timestamp="20220314 16:56:08.310" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220314 16:56:08.283" endtime="20220314 16:56:08.310"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:56:08.311" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:56:08.310" endtime="20220314 16:56:08.311"/>
</kw>
<status status="PASS" starttime="20220314 16:56:03.224" endtime="20220314 16:56:08.311"/>
</iter>
<status status="PASS" starttime="20220314 16:56:03.224" endtime="20220314 16:56:08.311"/>
</for>
<status status="PASS" starttime="20220314 16:56:03.224" endtime="20220314 16:56:08.311"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:56:09.338" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 16:56:09.339" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:56:08.315" endtime="20220314 16:56:09.339"/>
</kw>
<msg timestamp="20220314 16:56:09.340" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:56:08.314" endtime="20220314 16:56:09.340"/>
</kw>
<msg timestamp="20220314 16:56:09.341" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:56:08.313" endtime="20220314 16:56:09.341"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:56:09.342" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:56:09.342" endtime="20220314 16:56:09.343"/>
</kw>
<status status="PASS" starttime="20220314 16:56:08.312" endtime="20220314 16:56:09.343"/>
</iter>
<status status="PASS" starttime="20220314 16:56:08.311" endtime="20220314 16:56:09.343"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:56:09.346" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:56:09.346" endtime="20220314 16:56:09.346"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:56:09.347" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:56:09.347" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:56:09.347" endtime="20220314 16:56:09.347"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:56:09.348" endtime="20220314 16:56:09.362"/>
</kw>
<status status="PASS" starttime="20220314 16:56:09.348" endtime="20220314 16:56:09.362"/>
</kw>
<status status="PASS" starttime="20220314 16:56:09.345" endtime="20220314 16:56:09.362"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:56:11.373" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:56:09.364" endtime="20220314 16:56:11.375"/>
</kw>
<status status="PASS" starttime="20220314 16:56:09.344" endtime="20220314 16:56:11.376"/>
</kw>
<status status="PASS" starttime="20220314 16:56:03.224" endtime="20220314 16:56:11.376"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:56:13.429" level="INFO">Failed to find element with selector: .left-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:56:11.384" endtime="20220314 16:56:13.431"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:56:13.447" level="FAIL">Failure: Selector ".left-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 16:56:13.433" endtime="20220314 16:56:13.447"/>
</kw>
<status status="FAIL" starttime="20220314 16:56:11.383" endtime="20220314 16:56:13.450"/>
</kw>
<msg timestamp="20220314 16:56:13.450" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 16:56:11.382" endtime="20220314 16:56:13.450"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:56:13.452" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:56:13.452" endtime="20220314 16:56:13.453"/>
</kw>
<status status="PASS" starttime="20220314 16:56:11.381" endtime="20220314 16:56:13.453"/>
</iter>
<status status="PASS" starttime="20220314 16:56:11.380" endtime="20220314 16:56:13.453"/>
</for>
<status status="PASS" starttime="20220314 16:56:11.380" endtime="20220314 16:56:13.453"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:56:15.472" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:56:13.456" endtime="20220314 16:56:15.474"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:56:15.488" level="FAIL">Failure: Selector ".right-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 16:56:15.475" endtime="20220314 16:56:15.488"/>
</kw>
<status status="FAIL" starttime="20220314 16:56:13.455" endtime="20220314 16:56:15.490"/>
</kw>
<msg timestamp="20220314 16:56:15.490" level="INFO">${right_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 16:56:13.454" endtime="20220314 16:56:15.490"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:56:15.492" endtime="20220314 16:56:15.534"/>
</kw>
<msg timestamp="20220314 16:56:15.534" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220314 16:56:15.491" endtime="20220314 16:56:15.534"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:56:15.536" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:56:15.535" endtime="20220314 16:56:15.536"/>
</kw>
<status status="PASS" starttime="20220314 16:56:13.453" endtime="20220314 16:56:15.537"/>
</iter>
<status status="PASS" starttime="20220314 16:56:13.453" endtime="20220314 16:56:15.537"/>
</for>
<status status="PASS" starttime="20220314 16:56:11.378" endtime="20220314 16:56:15.537"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_device_in_active_state}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:56:15.539" endtime="20220314 16:56:15.566"/>
</kw>
<status status="PASS" starttime="20220314 16:56:15.538" endtime="20220314 16:56:15.566"/>
</kw>
<msg timestamp="20220314 16:56:15.566" level="INFO">${is_device_in_active_state} = True</msg>
<status status="PASS" starttime="20220314 16:56:15.538" endtime="20220314 16:56:15.566"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${is_device_in_active_state} is ${True}</arg>
<arg>${True}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 16:56:15.567" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 16:56:15.567" endtime="20220314 16:56:15.567"/>
</kw>
<status status="PASS" starttime="20220314 16:56:03.223" endtime="20220314 16:56:15.568"/>
</kw>
<msg timestamp="20220314 16:56:15.568" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:56:03.222" endtime="20220314 16:56:15.568"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'False'">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>${device_name} not loaded in GHub.</arg>
<status status="NOT RUN" starttime="20220314 16:56:15.568" endtime="20220314 16:56:15.568"/>
</kw>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220314 16:56:15.569" endtime="20220314 16:56:15.569"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:56:15.568" endtime="20220314 16:56:15.569"/>
</branch>
<status status="PASS" starttime="20220314 16:56:15.568" endtime="20220314 16:56:15.569"/>
</if>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:56:15.569" endtime="20220314 16:56:16.230"/>
</kw>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:56:18.281" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220314 16:56:18.283" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:56:16.232" endtime="20220314 16:56:18.283"/>
</kw>
<status status="PASS" starttime="20220314 16:56:16.231" endtime="20220314 16:56:18.283"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:56:20.351" level="FAIL">Failure: Selector "//*[@id="color-variant"]/button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:56:18.285" endtime="20220314 16:56:20.351"/>
</kw>
<status status="PASS" starttime="20220314 16:56:18.284" endtime="20220314 16:56:20.352"/>
</kw>
<status status="PASS" starttime="20220314 16:56:16.230" endtime="20220314 16:56:20.352"/>
</kw>
<kw name="device_view.Handle Got It Popup" library="device_main_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${got_it_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_got_it_button}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_got_it_button}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:56:25.384" level="FAIL">Failure: Selector "//div[@class='coach-mark']/button[text()='GOT IT']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:56:20.354" endtime="20220314 16:56:25.384"/>
</kw>
<msg timestamp="20220314 16:56:25.384" level="INFO">${got_it_button_present} = False</msg>
<status status="PASS" starttime="20220314 16:56:20.354" endtime="20220314 16:56:25.384"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${got_it_button_present} is ${False}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 16:56:25.387" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 16:56:25.386" endtime="20220314 16:56:25.387"/>
</kw>
<status status="PASS" starttime="20220314 16:56:20.353" endtime="20220314 16:56:25.388"/>
</kw>
<status status="PASS" starttime="20220314 16:56:03.214" endtime="20220314 16:56:25.388"/>
</kw>
<kw name="sensitivity_dpi.Select Sensitvity Dpi Button" library="sensitivity_dpi_screen">
<kw name="Click" library="libraries.components.React">
<arg>${sensitivity_dpi_senstivity_dpi}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:56:25.391" endtime="20220314 16:56:26.056"/>
</kw>
<status status="PASS" starttime="20220314 16:56:25.390" endtime="20220314 16:56:26.057"/>
</kw>
<kw name="dpi.Preset DPI Test" library="dpi">
<arg>${device}</arg>
<doc>Verify if Preset DPI value on GUI is same to Firmware
Click the preset DPI value on GUI and then
Query the Fimware DPI and verify if it is same to GUI</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Checking Preset DPI Test</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:26.060" endtime="20220314 16:56:26.061"/>
</kw>
<kw name="sensitivity_dpi.Click On Restore Default Settings" library="sensitivity_dpi_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${sensitivity_dpi_restore_default}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:56:26.066" level="INFO">${words} = ['.panel-button', 'text=RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:56:26.065" endtime="20220314 16:56:26.066"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:56:26.068" level="INFO">Length is 2</msg>
<msg timestamp="20220314 16:56:26.068" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20220314 16:56:26.067" endtime="20220314 16:56:26.068"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="__Click UI Based On Attribute__" library="common_keywords_kragle">
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<doc>Internal fuction to do additional check on 'Click UI'. Not to be used anywhere else.</doc>
<kw name="Split String" library="String">
<var>${sub_words}</var>
<arg>${word}</arg>
<arg>=</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:56:26.072" level="INFO">${sub_words} = ['text', 'RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:56:26.071" endtime="20220314 16:56:26.072"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='text'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:56:26.074" endtime="20220314 16:56:26.663"/>
</kw>
<status status="PASS" starttime="20220314 16:56:26.073" endtime="20220314 16:56:26.663"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='innerText'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>innerText=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:56:26.665" endtime="20220314 16:56:26.666"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='value'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>value=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:56:26.667" endtime="20220314 16:56:26.668"/>
</kw>
<status status="PASS" starttime="20220314 16:56:26.070" endtime="20220314 16:56:26.668"/>
</kw>
<status status="PASS" starttime="20220314 16:56:26.069" endtime="20220314 16:56:26.668"/>
</kw>
<status status="PASS" starttime="20220314 16:56:26.064" endtime="20220314 16:56:26.669"/>
</kw>
<status status="PASS" starttime="20220314 16:56:26.062" endtime="20220314 16:56:26.669"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>1</value>
<value>5</value>
<iter>
<var name="${index}">1</var>
<kw name="sensitivity_dpi.Select DPI By Level" library="sensitivity_dpi_screen">
<arg>${index}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:56:26.671" endtime="20220314 16:56:27.237"/>
</kw>
<status status="PASS" starttime="20220314 16:56:26.670" endtime="20220314 16:56:27.237"/>
</kw>
<kw name="sensitivity_dpi.Get Current DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${dpi_current}</var>
<arg>selector=${sensitivity_dpi_speed_selected}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:56:27.272" level="INFO">${dpi_current} = 400</msg>
<status status="PASS" starttime="20220314 16:56:27.240" endtime="20220314 16:56:27.272"/>
</kw>
<msg timestamp="20220314 16:56:27.272" level="INFO">${GUI_dpi} = 400</msg>
<status status="PASS" starttime="20220314 16:56:27.239" endtime="20220314 16:56:27.272"/>
</kw>
<kw name="backend.Verify DPI Of Device" library="backend">
<arg>${GUI_dpi}</arg>
<arg>${device['displayName']}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:56:27.286" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:56:27.286" endtime="20220314 16:56:27.286"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:56:28.297" level="INFO">16:55:47.881388: {"msgId": "", "verb": "OPTIONS", "path": "/", "origin": "backend"}
16:56:27.292141: {"msgId": "752e9a06-511a-43fa-af49-1fae957d44fc", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO", "ZONE_PRIMARY": "PRIMARY"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:56:28.298" level="INFO">${res} =  {"msgId": "752e9a06-511a-43fa-af49-1fae957d44fc", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:56:27.286" endtime="20220314 16:56:28.298"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:56:28.300" level="INFO">${res} = {'msgId': '752e9a06-511a-43fa-af49-1fae957d44fc', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:56:28.299" endtime="20220314 16:56:28.301"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:28.317" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:56:28.303" endtime="20220314 16:56:28.317"/>
</kw>
<msg timestamp="20220314 16:56:28.317" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:56:28.302" endtime="20220314 16:56:28.317"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:28.502" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:28.319" endtime="20220314 16:56:28.502"/>
</kw>
<msg timestamp="20220314 16:56:28.522" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:28.318" endtime="20220314 16:56:28.522"/>
</kw>
<msg timestamp="20220314 16:56:28.523" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:28.317" endtime="20220314 16:56:28.523"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:28.680" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:56:28.525" endtime="20220314 16:56:28.680"/>
</kw>
<msg timestamp="20220314 16:56:28.680" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:56:28.524" endtime="20220314 16:56:28.680"/>
</kw>
<msg timestamp="20220314 16:56:28.680" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:56:28.524" endtime="20220314 16:56:28.680"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:28.915" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g12_m1', 'g903hero_g8_m1_shifted', 'g903hero_g7_m1_shifted...</msg>
<status status="PASS" starttime="20220314 16:56:28.682" endtime="20220314 16:56:28.915"/>
</kw>
<msg timestamp="20220314 16:56:28.916" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g12_m1', 'g903hero_g8_m1_shifted', 'g903hero_g7_m1_shifted...</msg>
<status status="PASS" starttime="20220314 16:56:28.682" endtime="20220314 16:56:28.916"/>
</kw>
<msg timestamp="20220314 16:56:28.917" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:56:28.681" endtime="20220314 16:56:28.917"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:28.917" endtime="20220314 16:56:28.917"/>
</kw>
<status status="PASS" starttime="20220314 16:56:28.681" endtime="20220314 16:56:28.917"/>
</branch>
<status status="PASS" starttime="20220314 16:56:28.680" endtime="20220314 16:56:28.917"/>
</if>
<status status="PASS" starttime="20220314 16:56:28.523" endtime="20220314 16:56:28.917"/>
</iter>
<status status="PASS" starttime="20220314 16:56:28.523" endtime="20220314 16:56:28.918"/>
</for>
<msg timestamp="20220314 16:56:28.918" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:56:27.285" endtime="20220314 16:56:28.918"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:56:28.918" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/dpi'}</msg>
<status status="PASS" starttime="20220314 16:56:28.918" endtime="20220314 16:56:28.919"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:56:28.919" endtime="20220314 16:56:28.920"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:56:29.921" level="INFO">16:56:28.919672: {"msgId": "4298867a-7e69-4462-8128-4fed9671a560", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.Dpi.State", "deviceId": "dev00000000", "dpi": 400, "dpiIndex": 1, "shifted": false}}</msg>
<msg timestamp="20220314 16:56:29.921" level="INFO">${response} =  {"msgId": "4298867a-7e69-4462-8128-4fed9671a560", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapi...</msg>
<status status="PASS" starttime="20220314 16:56:28.920" endtime="20220314 16:56:29.921"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:56:29.924" level="INFO">${response} = {'msgId': '4298867a-7e69-4462-8128-4fed9671a560', 'verb': 'GET', 'path': '/mouse/dev00000000/dpi', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis...</msg>
<status status="PASS" starttime="20220314 16:56:29.923" endtime="20220314 16:56:29.924"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:29.939" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:56:29.926" endtime="20220314 16:56:29.939"/>
</kw>
<msg timestamp="20220314 16:56:29.939" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:56:29.926" endtime="20220314 16:56:29.939"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:29.953" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:56:29.940" endtime="20220314 16:56:29.953"/>
</kw>
<msg timestamp="20220314 16:56:29.954" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:56:29.940" endtime="20220314 16:56:29.954"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:56:29.954" endtime="20220314 16:56:29.954"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:56:29.954" endtime="20220314 16:56:29.955"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:56:29.955" endtime="20220314 16:56:29.955"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:29.955" endtime="20220314 16:56:29.956"/>
</kw>
<status status="PASS" starttime="20220314 16:56:29.925" endtime="20220314 16:56:29.956"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_dpi}</var>
<arg>${response}</arg>
<arg>dpi</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:29.970" level="INFO">${result} = [400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400]</msg>
<status status="PASS" starttime="20220314 16:56:29.957" endtime="20220314 16:56:29.970"/>
</kw>
<msg timestamp="20220314 16:56:29.970" level="INFO">${result} = [400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400]</msg>
<status status="PASS" starttime="20220314 16:56:29.957" endtime="20220314 16:56:29.971"/>
</kw>
<msg timestamp="20220314 16:56:29.971" level="INFO">${backend_dpi} = 400</msg>
<status status="PASS" starttime="20220314 16:56:29.956" endtime="20220314 16:56:29.971"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_dpi}</arg>
<arg>${backend_dpi}</arg>
<arg>The expected dpi value (${expected_dpi}) and actual value from backend (${backend_dpi}) is different</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:56:29.971" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:56:29.971" endtime="20220314 16:56:29.971"/>
</kw>
<status status="PASS" starttime="20220314 16:56:27.274" endtime="20220314 16:56:29.971"/>
</kw>
<status status="PASS" starttime="20220314 16:56:26.669" endtime="20220314 16:56:29.972"/>
</iter>
<iter>
<var name="${index}">2</var>
<kw name="sensitivity_dpi.Select DPI By Level" library="sensitivity_dpi_screen">
<arg>${index}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:56:29.972" endtime="20220314 16:56:30.561"/>
</kw>
<status status="PASS" starttime="20220314 16:56:29.972" endtime="20220314 16:56:30.562"/>
</kw>
<kw name="sensitivity_dpi.Get Current DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${dpi_current}</var>
<arg>selector=${sensitivity_dpi_speed_selected}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:56:30.591" level="INFO">${dpi_current} = 800</msg>
<status status="PASS" starttime="20220314 16:56:30.566" endtime="20220314 16:56:30.591"/>
</kw>
<msg timestamp="20220314 16:56:30.592" level="INFO">${GUI_dpi} = 800</msg>
<status status="PASS" starttime="20220314 16:56:30.564" endtime="20220314 16:56:30.592"/>
</kw>
<kw name="backend.Verify DPI Of Device" library="backend">
<arg>${GUI_dpi}</arg>
<arg>${device['displayName']}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:56:30.602" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:56:30.602" endtime="20220314 16:56:30.602"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:56:31.610" level="INFO">16:56:30.608918: {"msgId": "9d06f7a2-bd18-4802-933c-6f083fd87149", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_PRIMARY": "PRIMARY", "ZONE_BRANDING": "LOGO"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:56:31.611" level="INFO">${res} =  {"msgId": "9d06f7a2-bd18-4802-933c-6f083fd87149", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:56:30.603" endtime="20220314 16:56:31.611"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:56:31.614" level="INFO">${res} = {'msgId': '9d06f7a2-bd18-4802-933c-6f083fd87149', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:56:31.613" endtime="20220314 16:56:31.614"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:31.629" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:56:31.616" endtime="20220314 16:56:31.629"/>
</kw>
<msg timestamp="20220314 16:56:31.630" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:56:31.615" endtime="20220314 16:56:31.630"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:31.810" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:31.631" endtime="20220314 16:56:31.810"/>
</kw>
<msg timestamp="20220314 16:56:31.826" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:31.631" endtime="20220314 16:56:31.826"/>
</kw>
<msg timestamp="20220314 16:56:31.827" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:31.630" endtime="20220314 16:56:31.827"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:31.983" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:56:31.829" endtime="20220314 16:56:31.983"/>
</kw>
<msg timestamp="20220314 16:56:31.984" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:56:31.828" endtime="20220314 16:56:31.984"/>
</kw>
<msg timestamp="20220314 16:56:31.984" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:56:31.827" endtime="20220314 16:56:31.984"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:32.282" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_mouse_settings', 'g903hero_g1_m1_shifted', 'g903hero_g6_m1...</msg>
<status status="PASS" starttime="20220314 16:56:31.986" endtime="20220314 16:56:32.282"/>
</kw>
<msg timestamp="20220314 16:56:32.284" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_mouse_settings', 'g903hero_g1_m1_shifted', 'g903hero_g6_m1...</msg>
<status status="PASS" starttime="20220314 16:56:31.985" endtime="20220314 16:56:32.284"/>
</kw>
<msg timestamp="20220314 16:56:32.284" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:56:31.985" endtime="20220314 16:56:32.284"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:32.284" endtime="20220314 16:56:32.285"/>
</kw>
<status status="PASS" starttime="20220314 16:56:31.984" endtime="20220314 16:56:32.285"/>
</branch>
<status status="PASS" starttime="20220314 16:56:31.984" endtime="20220314 16:56:32.285"/>
</if>
<status status="PASS" starttime="20220314 16:56:31.827" endtime="20220314 16:56:32.285"/>
</iter>
<status status="PASS" starttime="20220314 16:56:31.827" endtime="20220314 16:56:32.285"/>
</for>
<msg timestamp="20220314 16:56:32.285" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:56:30.601" endtime="20220314 16:56:32.285"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:56:32.286" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/dpi'}</msg>
<status status="PASS" starttime="20220314 16:56:32.285" endtime="20220314 16:56:32.286"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:56:32.286" endtime="20220314 16:56:32.288"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:56:33.289" level="INFO">16:56:32.287334: {"msgId": "82a7f0eb-2e34-4f61-ae2a-bf8ac1e697c2", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.Dpi.State", "deviceId": "dev00000000", "dpi": 800, "dpiIndex": 2, "shifted": false}}</msg>
<msg timestamp="20220314 16:56:33.289" level="INFO">${response} =  {"msgId": "82a7f0eb-2e34-4f61-ae2a-bf8ac1e697c2", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapi...</msg>
<status status="PASS" starttime="20220314 16:56:32.288" endtime="20220314 16:56:33.289"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:56:33.291" level="INFO">${response} = {'msgId': '82a7f0eb-2e34-4f61-ae2a-bf8ac1e697c2', 'verb': 'GET', 'path': '/mouse/dev00000000/dpi', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis...</msg>
<status status="PASS" starttime="20220314 16:56:33.291" endtime="20220314 16:56:33.291"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:33.311" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:56:33.295" endtime="20220314 16:56:33.311"/>
</kw>
<msg timestamp="20220314 16:56:33.311" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:56:33.294" endtime="20220314 16:56:33.311"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:33.325" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:56:33.312" endtime="20220314 16:56:33.325"/>
</kw>
<msg timestamp="20220314 16:56:33.325" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:56:33.311" endtime="20220314 16:56:33.325"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:56:33.325" endtime="20220314 16:56:33.325"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:56:33.326" endtime="20220314 16:56:33.326"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:56:33.326" endtime="20220314 16:56:33.326"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:33.327" endtime="20220314 16:56:33.327"/>
</kw>
<status status="PASS" starttime="20220314 16:56:33.293" endtime="20220314 16:56:33.327"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_dpi}</var>
<arg>${response}</arg>
<arg>dpi</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:33.341" level="INFO">${result} = [800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800]</msg>
<status status="PASS" starttime="20220314 16:56:33.328" endtime="20220314 16:56:33.341"/>
</kw>
<msg timestamp="20220314 16:56:33.341" level="INFO">${result} = [800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800]</msg>
<status status="PASS" starttime="20220314 16:56:33.328" endtime="20220314 16:56:33.341"/>
</kw>
<msg timestamp="20220314 16:56:33.342" level="INFO">${backend_dpi} = 800</msg>
<status status="PASS" starttime="20220314 16:56:33.327" endtime="20220314 16:56:33.342"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_dpi}</arg>
<arg>${backend_dpi}</arg>
<arg>The expected dpi value (${expected_dpi}) and actual value from backend (${backend_dpi}) is different</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:56:33.342" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:56:33.342" endtime="20220314 16:56:33.342"/>
</kw>
<status status="PASS" starttime="20220314 16:56:30.593" endtime="20220314 16:56:33.342"/>
</kw>
<status status="PASS" starttime="20220314 16:56:29.972" endtime="20220314 16:56:33.342"/>
</iter>
<iter>
<var name="${index}">3</var>
<kw name="sensitivity_dpi.Select DPI By Level" library="sensitivity_dpi_screen">
<arg>${index}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:56:33.343" endtime="20220314 16:56:33.912"/>
</kw>
<status status="PASS" starttime="20220314 16:56:33.343" endtime="20220314 16:56:33.912"/>
</kw>
<kw name="sensitivity_dpi.Get Current DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${dpi_current}</var>
<arg>selector=${sensitivity_dpi_speed_selected}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:56:33.946" level="INFO">${dpi_current} = 1600</msg>
<status status="PASS" starttime="20220314 16:56:33.916" endtime="20220314 16:56:33.946"/>
</kw>
<msg timestamp="20220314 16:56:33.947" level="INFO">${GUI_dpi} = 1600</msg>
<status status="PASS" starttime="20220314 16:56:33.915" endtime="20220314 16:56:33.947"/>
</kw>
<kw name="backend.Verify DPI Of Device" library="backend">
<arg>${GUI_dpi}</arg>
<arg>${device['displayName']}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:56:33.962" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:56:33.962" endtime="20220314 16:56:33.963"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:56:34.970" level="INFO">16:56:33.969801: {"msgId": "595da390-700b-4640-a3ef-e70553f99046", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO", "ZONE_PRIMARY": "PRIMARY"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:56:34.971" level="INFO">${res} =  {"msgId": "595da390-700b-4640-a3ef-e70553f99046", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:56:33.963" endtime="20220314 16:56:34.971"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:56:34.974" level="INFO">${res} = {'msgId': '595da390-700b-4640-a3ef-e70553f99046', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:56:34.973" endtime="20220314 16:56:34.974"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:35.000" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:56:34.977" endtime="20220314 16:56:35.000"/>
</kw>
<msg timestamp="20220314 16:56:35.000" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:56:34.975" endtime="20220314 16:56:35.001"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:35.178" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:35.002" endtime="20220314 16:56:35.178"/>
</kw>
<msg timestamp="20220314 16:56:35.194" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:35.002" endtime="20220314 16:56:35.194"/>
</kw>
<msg timestamp="20220314 16:56:35.194" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:35.001" endtime="20220314 16:56:35.194"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:35.365" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:56:35.197" endtime="20220314 16:56:35.365"/>
</kw>
<msg timestamp="20220314 16:56:35.366" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:56:35.196" endtime="20220314 16:56:35.366"/>
</kw>
<msg timestamp="20220314 16:56:35.366" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:56:35.195" endtime="20220314 16:56:35.366"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:35.596" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g9_m1', 'g903hero_g6_m1_shifted', 'g903hero_g7_m1', 'g903h...</msg>
<status status="PASS" starttime="20220314 16:56:35.368" endtime="20220314 16:56:35.596"/>
</kw>
<msg timestamp="20220314 16:56:35.597" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g9_m1', 'g903hero_g6_m1_shifted', 'g903hero_g7_m1', 'g903h...</msg>
<status status="PASS" starttime="20220314 16:56:35.367" endtime="20220314 16:56:35.597"/>
</kw>
<msg timestamp="20220314 16:56:35.598" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:56:35.366" endtime="20220314 16:56:35.598"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:35.598" endtime="20220314 16:56:35.598"/>
</kw>
<status status="PASS" starttime="20220314 16:56:35.366" endtime="20220314 16:56:35.598"/>
</branch>
<status status="PASS" starttime="20220314 16:56:35.366" endtime="20220314 16:56:35.598"/>
</if>
<status status="PASS" starttime="20220314 16:56:35.194" endtime="20220314 16:56:35.598"/>
</iter>
<status status="PASS" starttime="20220314 16:56:35.194" endtime="20220314 16:56:35.598"/>
</for>
<msg timestamp="20220314 16:56:35.599" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:56:33.962" endtime="20220314 16:56:35.599"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:56:35.599" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/dpi'}</msg>
<status status="PASS" starttime="20220314 16:56:35.599" endtime="20220314 16:56:35.599"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:56:35.600" endtime="20220314 16:56:35.601"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:56:36.601" level="INFO">16:56:35.600747: {"msgId": "9b375ecc-2f40-4d85-a2b0-dbc1a9feea5c", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.Dpi.State", "deviceId": "dev00000000", "dpi": 1600, "dpiIndex": 3, "shifted": false}}</msg>
<msg timestamp="20220314 16:56:36.601" level="INFO">${response} =  {"msgId": "9b375ecc-2f40-4d85-a2b0-dbc1a9feea5c", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapi...</msg>
<status status="PASS" starttime="20220314 16:56:35.601" endtime="20220314 16:56:36.601"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:56:36.605" level="INFO">${response} = {'msgId': '9b375ecc-2f40-4d85-a2b0-dbc1a9feea5c', 'verb': 'GET', 'path': '/mouse/dev00000000/dpi', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis...</msg>
<status status="PASS" starttime="20220314 16:56:36.604" endtime="20220314 16:56:36.605"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:36.621" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:56:36.608" endtime="20220314 16:56:36.621"/>
</kw>
<msg timestamp="20220314 16:56:36.621" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:56:36.608" endtime="20220314 16:56:36.621"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:36.635" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:56:36.622" endtime="20220314 16:56:36.635"/>
</kw>
<msg timestamp="20220314 16:56:36.636" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:56:36.622" endtime="20220314 16:56:36.636"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:56:36.636" endtime="20220314 16:56:36.636"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:56:36.636" endtime="20220314 16:56:36.637"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:56:36.637" endtime="20220314 16:56:36.637"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:36.637" endtime="20220314 16:56:36.637"/>
</kw>
<status status="PASS" starttime="20220314 16:56:36.606" endtime="20220314 16:56:36.638"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_dpi}</var>
<arg>${response}</arg>
<arg>dpi</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:36.652" level="INFO">${result} = [1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600]</msg>
<status status="PASS" starttime="20220314 16:56:36.639" endtime="20220314 16:56:36.652"/>
</kw>
<msg timestamp="20220314 16:56:36.652" level="INFO">${result} = [1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600, 1600]</msg>
<status status="PASS" starttime="20220314 16:56:36.639" endtime="20220314 16:56:36.652"/>
</kw>
<msg timestamp="20220314 16:56:36.653" level="INFO">${backend_dpi} = 1600</msg>
<status status="PASS" starttime="20220314 16:56:36.638" endtime="20220314 16:56:36.653"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_dpi}</arg>
<arg>${backend_dpi}</arg>
<arg>The expected dpi value (${expected_dpi}) and actual value from backend (${backend_dpi}) is different</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:56:36.653" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:56:36.653" endtime="20220314 16:56:36.653"/>
</kw>
<status status="PASS" starttime="20220314 16:56:33.948" endtime="20220314 16:56:36.653"/>
</kw>
<status status="PASS" starttime="20220314 16:56:33.343" endtime="20220314 16:56:36.653"/>
</iter>
<iter>
<var name="${index}">4</var>
<kw name="sensitivity_dpi.Select DPI By Level" library="sensitivity_dpi_screen">
<arg>${index}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:56:36.654" endtime="20220314 16:56:37.230"/>
</kw>
<status status="PASS" starttime="20220314 16:56:36.654" endtime="20220314 16:56:37.231"/>
</kw>
<kw name="sensitivity_dpi.Get Current DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${dpi_current}</var>
<arg>selector=${sensitivity_dpi_speed_selected}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:56:37.265" level="INFO">${dpi_current} = 3200</msg>
<status status="PASS" starttime="20220314 16:56:37.234" endtime="20220314 16:56:37.266"/>
</kw>
<msg timestamp="20220314 16:56:37.266" level="INFO">${GUI_dpi} = 3200</msg>
<status status="PASS" starttime="20220314 16:56:37.233" endtime="20220314 16:56:37.266"/>
</kw>
<kw name="backend.Verify DPI Of Device" library="backend">
<arg>${GUI_dpi}</arg>
<arg>${device['displayName']}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:56:37.282" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:56:37.281" endtime="20220314 16:56:37.282"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:56:38.287" level="INFO">16:56:37.286367: {"msgId": "309463d0-f714-4337-b7de-33dd9ded63df", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_PRIMARY": "PRIMARY", "ZONE_BRANDING": "LOGO"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:56:38.288" level="INFO">${res} =  {"msgId": "309463d0-f714-4337-b7de-33dd9ded63df", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:56:37.282" endtime="20220314 16:56:38.288"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:56:38.291" level="INFO">${res} = {'msgId': '309463d0-f714-4337-b7de-33dd9ded63df', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:56:38.290" endtime="20220314 16:56:38.291"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:38.306" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:56:38.293" endtime="20220314 16:56:38.306"/>
</kw>
<msg timestamp="20220314 16:56:38.306" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:56:38.292" endtime="20220314 16:56:38.306"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:38.497" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:38.308" endtime="20220314 16:56:38.497"/>
</kw>
<msg timestamp="20220314 16:56:38.513" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:38.307" endtime="20220314 16:56:38.513"/>
</kw>
<msg timestamp="20220314 16:56:38.513" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:38.307" endtime="20220314 16:56:38.513"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:38.682" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:56:38.515" endtime="20220314 16:56:38.682"/>
</kw>
<msg timestamp="20220314 16:56:38.683" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:56:38.515" endtime="20220314 16:56:38.683"/>
</kw>
<msg timestamp="20220314 16:56:38.683" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:56:38.514" endtime="20220314 16:56:38.683"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:38.922" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g8_m1', 'g903hero_g3_m1', 'g903hero_lighting_setting_firmw...</msg>
<status status="PASS" starttime="20220314 16:56:38.685" endtime="20220314 16:56:38.922"/>
</kw>
<msg timestamp="20220314 16:56:38.923" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g8_m1', 'g903hero_g3_m1', 'g903hero_lighting_setting_firmw...</msg>
<status status="PASS" starttime="20220314 16:56:38.684" endtime="20220314 16:56:38.923"/>
</kw>
<msg timestamp="20220314 16:56:38.924" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:56:38.683" endtime="20220314 16:56:38.924"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:38.924" endtime="20220314 16:56:38.924"/>
</kw>
<status status="PASS" starttime="20220314 16:56:38.683" endtime="20220314 16:56:38.924"/>
</branch>
<status status="PASS" starttime="20220314 16:56:38.683" endtime="20220314 16:56:38.924"/>
</if>
<status status="PASS" starttime="20220314 16:56:38.514" endtime="20220314 16:56:38.924"/>
</iter>
<status status="PASS" starttime="20220314 16:56:38.514" endtime="20220314 16:56:38.924"/>
</for>
<msg timestamp="20220314 16:56:38.925" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:56:37.281" endtime="20220314 16:56:38.925"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:56:38.925" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/dpi'}</msg>
<status status="PASS" starttime="20220314 16:56:38.925" endtime="20220314 16:56:38.926"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:56:38.926" endtime="20220314 16:56:38.928"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:56:39.928" level="INFO">16:56:38.927178: {"msgId": "83c30d78-7da0-42d9-ae6b-abff0da57fb9", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.Dpi.State", "deviceId": "dev00000000", "dpi": 3200, "dpiIndex": 4, "shifted": false}}</msg>
<msg timestamp="20220314 16:56:39.928" level="INFO">${response} =  {"msgId": "83c30d78-7da0-42d9-ae6b-abff0da57fb9", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapi...</msg>
<status status="PASS" starttime="20220314 16:56:38.928" endtime="20220314 16:56:39.928"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:56:39.931" level="INFO">${response} = {'msgId': '83c30d78-7da0-42d9-ae6b-abff0da57fb9', 'verb': 'GET', 'path': '/mouse/dev00000000/dpi', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis...</msg>
<status status="PASS" starttime="20220314 16:56:39.930" endtime="20220314 16:56:39.931"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:39.947" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:56:39.934" endtime="20220314 16:56:39.947"/>
</kw>
<msg timestamp="20220314 16:56:39.947" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:56:39.933" endtime="20220314 16:56:39.947"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:39.961" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:56:39.948" endtime="20220314 16:56:39.961"/>
</kw>
<msg timestamp="20220314 16:56:39.961" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:56:39.948" endtime="20220314 16:56:39.961"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:56:39.961" endtime="20220314 16:56:39.962"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:56:39.962" endtime="20220314 16:56:39.962"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:56:39.962" endtime="20220314 16:56:39.963"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:39.963" endtime="20220314 16:56:39.963"/>
</kw>
<status status="PASS" starttime="20220314 16:56:39.932" endtime="20220314 16:56:39.963"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_dpi}</var>
<arg>${response}</arg>
<arg>dpi</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:39.978" level="INFO">${result} = [3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200]</msg>
<status status="PASS" starttime="20220314 16:56:39.964" endtime="20220314 16:56:39.978"/>
</kw>
<msg timestamp="20220314 16:56:39.978" level="INFO">${result} = [3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200]</msg>
<status status="PASS" starttime="20220314 16:56:39.964" endtime="20220314 16:56:39.978"/>
</kw>
<msg timestamp="20220314 16:56:39.978" level="INFO">${backend_dpi} = 3200</msg>
<status status="PASS" starttime="20220314 16:56:39.963" endtime="20220314 16:56:39.978"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_dpi}</arg>
<arg>${backend_dpi}</arg>
<arg>The expected dpi value (${expected_dpi}) and actual value from backend (${backend_dpi}) is different</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:56:39.979" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:56:39.979" endtime="20220314 16:56:39.979"/>
</kw>
<status status="PASS" starttime="20220314 16:56:37.268" endtime="20220314 16:56:39.979"/>
</kw>
<status status="PASS" starttime="20220314 16:56:36.654" endtime="20220314 16:56:39.979"/>
</iter>
<status status="PASS" starttime="20220314 16:56:26.669" endtime="20220314 16:56:39.979"/>
</for>
<status status="PASS" starttime="20220314 16:56:26.058" endtime="20220314 16:56:39.979"/>
</kw>
<kw name="dpi.Change DPI Value" library="dpi">
<arg>${device}</arg>
<doc>Change DPI value with max, min, text, negative and very_long value</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Checking Change DPI Value</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:39.980" endtime="20220314 16:56:39.980"/>
</kw>
<kw name="sensitivity_dpi.Get Max DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi}</var>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_max_dpi_speed}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:56:39.981" endtime="20220314 16:56:40.002"/>
</kw>
<kw name="Get Attribute" library="libraries.components.React">
<var>${max_dpi}</var>
<arg>selector=${sensitivity_dpi_max_dpi_speed}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:56:40.015" level="INFO">${max_dpi} = 25600</msg>
<status status="PASS" starttime="20220314 16:56:40.003" endtime="20220314 16:56:40.015"/>
</kw>
<msg timestamp="20220314 16:56:40.015" level="INFO">${GUI_dpi} = 25600</msg>
<status status="PASS" starttime="20220314 16:56:39.981" endtime="20220314 16:56:40.015"/>
</kw>
<kw name="sensitivity_dpi.Update DPI Speed Of Selected DPI" library="sensitivity_dpi_screen">
<arg>${GUI_dpi}</arg>
<kw name="Log To Console" library="BuiltIn">
<arg>Updating DPI Speed (as: ${dpi}) Of Selected DPI</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:40.016" endtime="20220314 16:56:40.017"/>
</kw>
<kw name="sensitivity_dpi.Click On Selected DPI Speed" library="sensitivity_dpi_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_selected_dpi_speed}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:56:40.017" endtime="20220314 16:56:40.589"/>
</kw>
<status status="PASS" starttime="20220314 16:56:40.017" endtime="20220314 16:56:40.590"/>
</kw>
<kw name="Input" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_selected_dpi_speed}</arg>
<arg>keys=${dpi}</arg>
<doc>Asserts that an element successfully receives input events for the given keys.</doc>
<status status="PASS" starttime="20220314 16:56:40.591" endtime="20220314 16:56:43.713"/>
</kw>
<status status="PASS" starttime="20220314 16:56:40.016" endtime="20220314 16:56:43.713"/>
</kw>
<kw name="dpi.Get Current DPI Value And Verify With Expected Firmware DPI" library="dpi">
<arg>${device['productId']}</arg>
<arg>${device['displayName']}</arg>
<doc>Get current DPI value and compare it with expected firmware DPI and return their status after restoring default setting</doc>
<kw name="sensitivity_dpi.Get Current DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${dpi_current}</var>
<arg>selector=${sensitivity_dpi_speed_selected}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:56:43.756" level="INFO">${dpi_current} = 25600</msg>
<status status="PASS" starttime="20220314 16:56:43.738" endtime="20220314 16:56:43.756"/>
</kw>
<msg timestamp="20220314 16:56:43.757" level="INFO">${GUI_dpi} = 25600</msg>
<status status="PASS" starttime="20220314 16:56:43.737" endtime="20220314 16:56:43.757"/>
</kw>
<kw name="backend.Verify DPI Of Device" library="backend">
<arg>${GUI_dpi}</arg>
<arg>${devicename}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:56:43.761" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:56:43.761" endtime="20220314 16:56:43.762"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:56:44.766" level="INFO">16:56:43.765522: {"msgId": "605dbae3-1399-4780-a426-71493a6b74ba", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_PRIMARY": "PRIMARY", "ZONE_BRANDING": "LOGO"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:56:44.767" level="INFO">${res} =  {"msgId": "605dbae3-1399-4780-a426-71493a6b74ba", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:56:43.762" endtime="20220314 16:56:44.767"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:56:44.769" level="INFO">${res} = {'msgId': '605dbae3-1399-4780-a426-71493a6b74ba', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:56:44.768" endtime="20220314 16:56:44.769"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:44.799" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:56:44.771" endtime="20220314 16:56:44.799"/>
</kw>
<msg timestamp="20220314 16:56:44.800" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:56:44.770" endtime="20220314 16:56:44.800"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:45.082" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:44.802" endtime="20220314 16:56:45.082"/>
</kw>
<msg timestamp="20220314 16:56:45.108" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:44.801" endtime="20220314 16:56:45.109"/>
</kw>
<msg timestamp="20220314 16:56:45.109" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:44.800" endtime="20220314 16:56:45.109"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:45.322" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:56:45.113" endtime="20220314 16:56:45.322"/>
</kw>
<msg timestamp="20220314 16:56:45.322" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:56:45.112" endtime="20220314 16:56:45.322"/>
</kw>
<msg timestamp="20220314 16:56:45.322" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:56:45.111" endtime="20220314 16:56:45.322"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:45.624" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_mouse_settings', 'g903hero_g5_m1_shifted', 'g903hero_g10_m...</msg>
<status status="PASS" starttime="20220314 16:56:45.324" endtime="20220314 16:56:45.624"/>
</kw>
<msg timestamp="20220314 16:56:45.626" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_mouse_settings', 'g903hero_g5_m1_shifted', 'g903hero_g10_m...</msg>
<status status="PASS" starttime="20220314 16:56:45.324" endtime="20220314 16:56:45.626"/>
</kw>
<msg timestamp="20220314 16:56:45.626" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:56:45.323" endtime="20220314 16:56:45.626"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:45.627" endtime="20220314 16:56:45.627"/>
</kw>
<status status="PASS" starttime="20220314 16:56:45.323" endtime="20220314 16:56:45.628"/>
</branch>
<status status="PASS" starttime="20220314 16:56:45.322" endtime="20220314 16:56:45.628"/>
</if>
<status status="PASS" starttime="20220314 16:56:45.110" endtime="20220314 16:56:45.628"/>
</iter>
<status status="PASS" starttime="20220314 16:56:45.110" endtime="20220314 16:56:45.628"/>
</for>
<msg timestamp="20220314 16:56:45.629" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:56:43.760" endtime="20220314 16:56:45.629"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:56:45.631" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/dpi'}</msg>
<status status="PASS" starttime="20220314 16:56:45.630" endtime="20220314 16:56:45.631"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:56:45.632" endtime="20220314 16:56:45.633"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:56:46.634" level="INFO">16:56:45.632722: {"msgId": "116a709f-865c-4a6b-bd26-ca7d291c23aa", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.Dpi.State", "deviceId": "dev00000000", "dpi": 25600, "dpiIndex": 5, "shifted": false}}</msg>
<msg timestamp="20220314 16:56:46.635" level="INFO">${response} =  {"msgId": "116a709f-865c-4a6b-bd26-ca7d291c23aa", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapi...</msg>
<status status="PASS" starttime="20220314 16:56:45.633" endtime="20220314 16:56:46.635"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:56:46.637" level="INFO">${response} = {'msgId': '116a709f-865c-4a6b-bd26-ca7d291c23aa', 'verb': 'GET', 'path': '/mouse/dev00000000/dpi', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis...</msg>
<status status="PASS" starttime="20220314 16:56:46.636" endtime="20220314 16:56:46.637"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:46.663" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:56:46.642" endtime="20220314 16:56:46.663"/>
</kw>
<msg timestamp="20220314 16:56:46.663" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:56:46.641" endtime="20220314 16:56:46.663"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:46.676" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:56:46.664" endtime="20220314 16:56:46.677"/>
</kw>
<msg timestamp="20220314 16:56:46.677" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:56:46.663" endtime="20220314 16:56:46.677"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:56:46.677" endtime="20220314 16:56:46.677"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:56:46.678" endtime="20220314 16:56:46.678"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:56:46.678" endtime="20220314 16:56:46.678"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:46.679" endtime="20220314 16:56:46.679"/>
</kw>
<status status="PASS" starttime="20220314 16:56:46.639" endtime="20220314 16:56:46.679"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_dpi}</var>
<arg>${response}</arg>
<arg>dpi</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:46.693" level="INFO">${result} = [25600, 25600, 25600, 25600, 25600, 25600, 25600, 25600, 25600, 25600, 25600, 25600, 25600, 25600]</msg>
<status status="PASS" starttime="20220314 16:56:46.680" endtime="20220314 16:56:46.694"/>
</kw>
<msg timestamp="20220314 16:56:46.694" level="INFO">${result} = [25600, 25600, 25600, 25600, 25600, 25600, 25600, 25600, 25600, 25600, 25600, 25600, 25600, 25600]</msg>
<status status="PASS" starttime="20220314 16:56:46.680" endtime="20220314 16:56:46.694"/>
</kw>
<msg timestamp="20220314 16:56:46.694" level="INFO">${backend_dpi} = 25600</msg>
<status status="PASS" starttime="20220314 16:56:46.679" endtime="20220314 16:56:46.694"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_dpi}</arg>
<arg>${backend_dpi}</arg>
<arg>The expected dpi value (${expected_dpi}) and actual value from backend (${backend_dpi}) is different</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:56:46.695" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:56:46.694" endtime="20220314 16:56:46.695"/>
</kw>
<status status="PASS" starttime="20220314 16:56:43.758" endtime="20220314 16:56:46.695"/>
</kw>
<kw name="sensitivity_dpi.Click On Restore Default Settings" library="sensitivity_dpi_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${sensitivity_dpi_restore_default}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:56:46.696" level="INFO">${words} = ['.panel-button', 'text=RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:56:46.696" endtime="20220314 16:56:46.696"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:56:46.696" level="INFO">Length is 2</msg>
<msg timestamp="20220314 16:56:46.697" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20220314 16:56:46.696" endtime="20220314 16:56:46.697"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="__Click UI Based On Attribute__" library="common_keywords_kragle">
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<doc>Internal fuction to do additional check on 'Click UI'. Not to be used anywhere else.</doc>
<kw name="Split String" library="String">
<var>${sub_words}</var>
<arg>${word}</arg>
<arg>=</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:56:46.698" level="INFO">${sub_words} = ['text', 'RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:56:46.698" endtime="20220314 16:56:46.698"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='text'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:56:46.699" endtime="20220314 16:56:47.267"/>
</kw>
<status status="PASS" starttime="20220314 16:56:46.698" endtime="20220314 16:56:47.268"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='innerText'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>innerText=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:56:47.269" endtime="20220314 16:56:47.270"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='value'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>value=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:56:47.271" endtime="20220314 16:56:47.272"/>
</kw>
<status status="PASS" starttime="20220314 16:56:46.697" endtime="20220314 16:56:47.272"/>
</kw>
<status status="PASS" starttime="20220314 16:56:46.697" endtime="20220314 16:56:47.272"/>
</kw>
<status status="PASS" starttime="20220314 16:56:46.695" endtime="20220314 16:56:47.273"/>
</kw>
<status status="PASS" starttime="20220314 16:56:46.695" endtime="20220314 16:56:47.273"/>
</kw>
<status status="PASS" starttime="20220314 16:56:43.715" endtime="20220314 16:56:47.274"/>
</kw>
<kw name="sensitivity_dpi.Get Min DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${min_dpi}</var>
<arg>selector=${sensitivity_dpi_min_dpi_speed}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:56:47.312" level="INFO">${min_dpi} = 100</msg>
<status status="PASS" starttime="20220314 16:56:47.277" endtime="20220314 16:56:47.312"/>
</kw>
<msg timestamp="20220314 16:56:47.312" level="INFO">${GUI_dpi} = 100</msg>
<status status="PASS" starttime="20220314 16:56:47.275" endtime="20220314 16:56:47.312"/>
</kw>
<kw name="sensitivity_dpi.Update DPI Speed Of Selected DPI" library="sensitivity_dpi_screen">
<arg>${GUI_dpi}</arg>
<kw name="Log To Console" library="BuiltIn">
<arg>Updating DPI Speed (as: ${dpi}) Of Selected DPI</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:47.315" endtime="20220314 16:56:47.316"/>
</kw>
<kw name="sensitivity_dpi.Click On Selected DPI Speed" library="sensitivity_dpi_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_selected_dpi_speed}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:56:47.318" endtime="20220314 16:56:47.882"/>
</kw>
<status status="PASS" starttime="20220314 16:56:47.317" endtime="20220314 16:56:47.882"/>
</kw>
<kw name="Input" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_selected_dpi_speed}</arg>
<arg>keys=${dpi}</arg>
<doc>Asserts that an element successfully receives input events for the given keys.</doc>
<status status="PASS" starttime="20220314 16:56:47.884" endtime="20220314 16:56:50.999"/>
</kw>
<status status="PASS" starttime="20220314 16:56:47.314" endtime="20220314 16:56:51.000"/>
</kw>
<kw name="dpi.Get Current DPI Value And Verify With Expected Firmware DPI" library="dpi">
<arg>${device['productId']}</arg>
<arg>${device['displayName']}</arg>
<doc>Get current DPI value and compare it with expected firmware DPI and return their status after restoring default setting</doc>
<kw name="sensitivity_dpi.Get Current DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${dpi_current}</var>
<arg>selector=${sensitivity_dpi_speed_selected}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:56:51.045" level="INFO">${dpi_current} = 100</msg>
<status status="PASS" starttime="20220314 16:56:51.027" endtime="20220314 16:56:51.045"/>
</kw>
<msg timestamp="20220314 16:56:51.045" level="INFO">${GUI_dpi} = 100</msg>
<status status="PASS" starttime="20220314 16:56:51.027" endtime="20220314 16:56:51.045"/>
</kw>
<kw name="backend.Verify DPI Of Device" library="backend">
<arg>${GUI_dpi}</arg>
<arg>${devicename}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:56:51.049" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:56:51.049" endtime="20220314 16:56:51.049"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:56:52.057" level="INFO">16:56:51.055925: {"msgId": "169c13fb-f354-4006-a739-a59e645cc5d0", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_PRIMARY": "PRIMARY", "ZONE_BRANDING": "LOGO"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:56:52.058" level="INFO">${res} =  {"msgId": "169c13fb-f354-4006-a739-a59e645cc5d0", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:56:51.050" endtime="20220314 16:56:52.058"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:56:52.060" level="INFO">${res} = {'msgId': '169c13fb-f354-4006-a739-a59e645cc5d0', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:56:52.059" endtime="20220314 16:56:52.060"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:52.077" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:56:52.063" endtime="20220314 16:56:52.077"/>
</kw>
<msg timestamp="20220314 16:56:52.077" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:56:52.062" endtime="20220314 16:56:52.077"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:52.276" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:52.079" endtime="20220314 16:56:52.276"/>
</kw>
<msg timestamp="20220314 16:56:52.291" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:52.078" endtime="20220314 16:56:52.291"/>
</kw>
<msg timestamp="20220314 16:56:52.292" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:52.078" endtime="20220314 16:56:52.292"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:52.449" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:56:52.293" endtime="20220314 16:56:52.449"/>
</kw>
<msg timestamp="20220314 16:56:52.449" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:56:52.293" endtime="20220314 16:56:52.449"/>
</kw>
<msg timestamp="20220314 16:56:52.449" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:56:52.292" endtime="20220314 16:56:52.449"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:52.675" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g11_m1', 'g903hero_g3_m1_shifted', 'g903hero_g2_m1_shifted...</msg>
<status status="PASS" starttime="20220314 16:56:52.451" endtime="20220314 16:56:52.675"/>
</kw>
<msg timestamp="20220314 16:56:52.678" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g11_m1', 'g903hero_g3_m1_shifted', 'g903hero_g2_m1_shifted...</msg>
<status status="PASS" starttime="20220314 16:56:52.451" endtime="20220314 16:56:52.678"/>
</kw>
<msg timestamp="20220314 16:56:52.679" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:56:52.450" endtime="20220314 16:56:52.679"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:52.680" endtime="20220314 16:56:52.680"/>
</kw>
<status status="PASS" starttime="20220314 16:56:52.449" endtime="20220314 16:56:52.681"/>
</branch>
<status status="PASS" starttime="20220314 16:56:52.449" endtime="20220314 16:56:52.681"/>
</if>
<status status="PASS" starttime="20220314 16:56:52.292" endtime="20220314 16:56:52.681"/>
</iter>
<status status="PASS" starttime="20220314 16:56:52.292" endtime="20220314 16:56:52.681"/>
</for>
<msg timestamp="20220314 16:56:52.681" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:56:51.048" endtime="20220314 16:56:52.681"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:56:52.683" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/dpi'}</msg>
<status status="PASS" starttime="20220314 16:56:52.682" endtime="20220314 16:56:52.683"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:56:52.685" endtime="20220314 16:56:52.685"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:56:53.685" level="INFO">16:56:52.685211: {"msgId": "8b3cc2fe-520c-48a1-ae7e-63c406d9021f", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.Dpi.State", "deviceId": "dev00000000", "dpi": 100, "dpiIndex": 1, "shifted": false}}</msg>
<msg timestamp="20220314 16:56:53.685" level="INFO">${response} =  {"msgId": "8b3cc2fe-520c-48a1-ae7e-63c406d9021f", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapi...</msg>
<status status="PASS" starttime="20220314 16:56:52.685" endtime="20220314 16:56:53.685"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:56:53.688" level="INFO">${response} = {'msgId': '8b3cc2fe-520c-48a1-ae7e-63c406d9021f', 'verb': 'GET', 'path': '/mouse/dev00000000/dpi', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis...</msg>
<status status="PASS" starttime="20220314 16:56:53.687" endtime="20220314 16:56:53.688"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:53.704" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:56:53.691" endtime="20220314 16:56:53.704"/>
</kw>
<msg timestamp="20220314 16:56:53.704" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:56:53.690" endtime="20220314 16:56:53.704"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:53.720" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:56:53.705" endtime="20220314 16:56:53.720"/>
</kw>
<msg timestamp="20220314 16:56:53.720" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:56:53.704" endtime="20220314 16:56:53.720"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:56:53.720" endtime="20220314 16:56:53.721"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:56:53.721" endtime="20220314 16:56:53.721"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:56:53.721" endtime="20220314 16:56:53.722"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:53.722" endtime="20220314 16:56:53.722"/>
</kw>
<status status="PASS" starttime="20220314 16:56:53.689" endtime="20220314 16:56:53.722"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_dpi}</var>
<arg>${response}</arg>
<arg>dpi</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:53.739" level="INFO">${result} = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]</msg>
<status status="PASS" starttime="20220314 16:56:53.724" endtime="20220314 16:56:53.739"/>
</kw>
<msg timestamp="20220314 16:56:53.740" level="INFO">${result} = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100]</msg>
<status status="PASS" starttime="20220314 16:56:53.723" endtime="20220314 16:56:53.740"/>
</kw>
<msg timestamp="20220314 16:56:53.740" level="INFO">${backend_dpi} = 100</msg>
<status status="PASS" starttime="20220314 16:56:53.722" endtime="20220314 16:56:53.740"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_dpi}</arg>
<arg>${backend_dpi}</arg>
<arg>The expected dpi value (${expected_dpi}) and actual value from backend (${backend_dpi}) is different</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:56:53.741" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:56:53.741" endtime="20220314 16:56:53.741"/>
</kw>
<status status="PASS" starttime="20220314 16:56:51.046" endtime="20220314 16:56:53.741"/>
</kw>
<kw name="sensitivity_dpi.Click On Restore Default Settings" library="sensitivity_dpi_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${sensitivity_dpi_restore_default}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:56:53.743" level="INFO">${words} = ['.panel-button', 'text=RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:56:53.743" endtime="20220314 16:56:53.743"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:56:53.743" level="INFO">Length is 2</msg>
<msg timestamp="20220314 16:56:53.743" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20220314 16:56:53.743" endtime="20220314 16:56:53.743"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="__Click UI Based On Attribute__" library="common_keywords_kragle">
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<doc>Internal fuction to do additional check on 'Click UI'. Not to be used anywhere else.</doc>
<kw name="Split String" library="String">
<var>${sub_words}</var>
<arg>${word}</arg>
<arg>=</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:56:53.745" level="INFO">${sub_words} = ['text', 'RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:56:53.744" endtime="20220314 16:56:53.745"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='text'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:56:53.745" endtime="20220314 16:56:54.328"/>
</kw>
<status status="PASS" starttime="20220314 16:56:53.745" endtime="20220314 16:56:54.328"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='innerText'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>innerText=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:56:54.330" endtime="20220314 16:56:54.331"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='value'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>value=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:56:54.332" endtime="20220314 16:56:54.332"/>
</kw>
<status status="PASS" starttime="20220314 16:56:53.744" endtime="20220314 16:56:54.333"/>
</kw>
<status status="PASS" starttime="20220314 16:56:53.744" endtime="20220314 16:56:54.333"/>
</kw>
<status status="PASS" starttime="20220314 16:56:53.742" endtime="20220314 16:56:54.333"/>
</kw>
<status status="PASS" starttime="20220314 16:56:53.742" endtime="20220314 16:56:54.334"/>
</kw>
<status status="PASS" starttime="20220314 16:56:51.001" endtime="20220314 16:56:54.334"/>
</kw>
<kw name="sensitivity_dpi.Update DPI Speed Of Selected DPI" library="sensitivity_dpi_screen">
<arg>-1</arg>
<kw name="Log To Console" library="BuiltIn">
<arg>Updating DPI Speed (as: ${dpi}) Of Selected DPI</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:54.337" endtime="20220314 16:56:54.338"/>
</kw>
<kw name="sensitivity_dpi.Click On Selected DPI Speed" library="sensitivity_dpi_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_selected_dpi_speed}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:56:54.340" endtime="20220314 16:56:54.903"/>
</kw>
<status status="PASS" starttime="20220314 16:56:54.339" endtime="20220314 16:56:54.903"/>
</kw>
<kw name="Input" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_selected_dpi_speed}</arg>
<arg>keys=${dpi}</arg>
<doc>Asserts that an element successfully receives input events for the given keys.</doc>
<status status="PASS" starttime="20220314 16:56:54.905" endtime="20220314 16:56:58.009"/>
</kw>
<status status="PASS" starttime="20220314 16:56:54.336" endtime="20220314 16:56:58.009"/>
</kw>
<kw name="dpi.Get Current DPI Value And Verify With Expected Firmware DPI" library="dpi">
<arg>${device['productId']}</arg>
<arg>${device['displayName']}</arg>
<doc>Get current DPI value and compare it with expected firmware DPI and return their status after restoring default setting</doc>
<kw name="sensitivity_dpi.Get Current DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${dpi_current}</var>
<arg>selector=${sensitivity_dpi_speed_selected}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:56:58.046" level="INFO">${dpi_current} = 800</msg>
<status status="PASS" starttime="20220314 16:56:58.028" endtime="20220314 16:56:58.046"/>
</kw>
<msg timestamp="20220314 16:56:58.047" level="INFO">${GUI_dpi} = 800</msg>
<status status="PASS" starttime="20220314 16:56:58.028" endtime="20220314 16:56:58.047"/>
</kw>
<kw name="backend.Verify DPI Of Device" library="backend">
<arg>${GUI_dpi}</arg>
<arg>${devicename}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:56:58.050" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:56:58.049" endtime="20220314 16:56:58.050"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:56:59.056" level="INFO">16:56:58.055462: {"msgId": "f12e22e7-4ca2-4c73-8de1-8885b9376234", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_PRIMARY": "PRIMARY", "ZONE_BRANDING": "LOGO"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:56:59.057" level="INFO">${res} =  {"msgId": "f12e22e7-4ca2-4c73-8de1-8885b9376234", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:56:58.050" endtime="20220314 16:56:59.057"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:56:59.059" level="INFO">${res} = {'msgId': 'f12e22e7-4ca2-4c73-8de1-8885b9376234', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:56:59.058" endtime="20220314 16:56:59.059"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:59.086" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:56:59.062" endtime="20220314 16:56:59.086"/>
</kw>
<msg timestamp="20220314 16:56:59.086" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:56:59.061" endtime="20220314 16:56:59.086"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:59.267" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:59.088" endtime="20220314 16:56:59.267"/>
</kw>
<msg timestamp="20220314 16:56:59.283" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:59.087" endtime="20220314 16:56:59.283"/>
</kw>
<msg timestamp="20220314 16:56:59.284" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:56:59.087" endtime="20220314 16:56:59.284"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:59.440" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:56:59.286" endtime="20220314 16:56:59.440"/>
</kw>
<msg timestamp="20220314 16:56:59.440" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:56:59.285" endtime="20220314 16:56:59.440"/>
</kw>
<msg timestamp="20220314 16:56:59.440" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:56:59.284" endtime="20220314 16:56:59.440"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:56:59.661" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g8_m1', 'g903hero_g12_m1', 'g903hero_g3_m1_shifted', 'g903...</msg>
<status status="PASS" starttime="20220314 16:56:59.442" endtime="20220314 16:56:59.661"/>
</kw>
<msg timestamp="20220314 16:56:59.662" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g8_m1', 'g903hero_g12_m1', 'g903hero_g3_m1_shifted', 'g903...</msg>
<status status="PASS" starttime="20220314 16:56:59.442" endtime="20220314 16:56:59.662"/>
</kw>
<msg timestamp="20220314 16:56:59.662" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:56:59.441" endtime="20220314 16:56:59.662"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:56:59.663" endtime="20220314 16:56:59.663"/>
</kw>
<status status="PASS" starttime="20220314 16:56:59.441" endtime="20220314 16:56:59.663"/>
</branch>
<status status="PASS" starttime="20220314 16:56:59.440" endtime="20220314 16:56:59.663"/>
</if>
<status status="PASS" starttime="20220314 16:56:59.284" endtime="20220314 16:56:59.663"/>
</iter>
<status status="PASS" starttime="20220314 16:56:59.284" endtime="20220314 16:56:59.663"/>
</for>
<msg timestamp="20220314 16:56:59.663" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:56:58.049" endtime="20220314 16:56:59.663"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:56:59.664" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/dpi'}</msg>
<status status="PASS" starttime="20220314 16:56:59.664" endtime="20220314 16:56:59.664"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:56:59.664" endtime="20220314 16:56:59.666"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:57:00.666" level="INFO">16:56:59.665225: {"msgId": "16d0f8a9-26e3-4062-96c5-f8921ced86ad", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.Dpi.State", "deviceId": "dev00000000", "dpi": 800, "dpiIndex": 2, "shifted": false}}</msg>
<msg timestamp="20220314 16:57:00.666" level="INFO">${response} =  {"msgId": "16d0f8a9-26e3-4062-96c5-f8921ced86ad", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapi...</msg>
<status status="PASS" starttime="20220314 16:56:59.666" endtime="20220314 16:57:00.667"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:57:00.669" level="INFO">${response} = {'msgId': '16d0f8a9-26e3-4062-96c5-f8921ced86ad', 'verb': 'GET', 'path': '/mouse/dev00000000/dpi', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis...</msg>
<status status="PASS" starttime="20220314 16:57:00.668" endtime="20220314 16:57:00.669"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:00.692" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:57:00.674" endtime="20220314 16:57:00.692"/>
</kw>
<msg timestamp="20220314 16:57:00.693" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:57:00.672" endtime="20220314 16:57:00.693"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:00.706" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:57:00.694" endtime="20220314 16:57:00.706"/>
</kw>
<msg timestamp="20220314 16:57:00.707" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:57:00.693" endtime="20220314 16:57:00.707"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:57:00.707" endtime="20220314 16:57:00.707"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:57:00.708" endtime="20220314 16:57:00.708"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:57:00.708" endtime="20220314 16:57:00.708"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:00.709" endtime="20220314 16:57:00.709"/>
</kw>
<status status="PASS" starttime="20220314 16:57:00.670" endtime="20220314 16:57:00.709"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_dpi}</var>
<arg>${response}</arg>
<arg>dpi</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:00.770" level="INFO">${result} = [800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800]</msg>
<status status="PASS" starttime="20220314 16:57:00.713" endtime="20220314 16:57:00.770"/>
</kw>
<msg timestamp="20220314 16:57:00.770" level="INFO">${result} = [800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800]</msg>
<status status="PASS" starttime="20220314 16:57:00.712" endtime="20220314 16:57:00.771"/>
</kw>
<msg timestamp="20220314 16:57:00.771" level="INFO">${backend_dpi} = 800</msg>
<status status="PASS" starttime="20220314 16:57:00.710" endtime="20220314 16:57:00.771"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_dpi}</arg>
<arg>${backend_dpi}</arg>
<arg>The expected dpi value (${expected_dpi}) and actual value from backend (${backend_dpi}) is different</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:57:00.771" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:57:00.771" endtime="20220314 16:57:00.771"/>
</kw>
<status status="PASS" starttime="20220314 16:56:58.048" endtime="20220314 16:57:00.772"/>
</kw>
<kw name="sensitivity_dpi.Click On Restore Default Settings" library="sensitivity_dpi_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${sensitivity_dpi_restore_default}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:57:00.773" level="INFO">${words} = ['.panel-button', 'text=RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:57:00.773" endtime="20220314 16:57:00.773"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:57:00.774" level="INFO">Length is 2</msg>
<msg timestamp="20220314 16:57:00.774" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20220314 16:57:00.774" endtime="20220314 16:57:00.774"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="__Click UI Based On Attribute__" library="common_keywords_kragle">
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<doc>Internal fuction to do additional check on 'Click UI'. Not to be used anywhere else.</doc>
<kw name="Split String" library="String">
<var>${sub_words}</var>
<arg>${word}</arg>
<arg>=</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:57:00.775" level="INFO">${sub_words} = ['text', 'RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:57:00.775" endtime="20220314 16:57:00.775"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='text'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:57:00.776" endtime="20220314 16:57:01.345"/>
</kw>
<status status="PASS" starttime="20220314 16:57:00.775" endtime="20220314 16:57:01.346"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='innerText'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>innerText=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:57:01.347" endtime="20220314 16:57:01.348"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='value'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>value=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:57:01.349" endtime="20220314 16:57:01.350"/>
</kw>
<status status="PASS" starttime="20220314 16:57:00.774" endtime="20220314 16:57:01.350"/>
</kw>
<status status="PASS" starttime="20220314 16:57:00.774" endtime="20220314 16:57:01.351"/>
</kw>
<status status="PASS" starttime="20220314 16:57:00.773" endtime="20220314 16:57:01.351"/>
</kw>
<status status="PASS" starttime="20220314 16:57:00.772" endtime="20220314 16:57:01.351"/>
</kw>
<status status="PASS" starttime="20220314 16:56:58.011" endtime="20220314 16:57:01.352"/>
</kw>
<kw name="sensitivity_dpi.Update DPI Speed Of Selected DPI" library="sensitivity_dpi_screen">
<arg>999999999</arg>
<kw name="Log To Console" library="BuiltIn">
<arg>Updating DPI Speed (as: ${dpi}) Of Selected DPI</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:01.355" endtime="20220314 16:57:01.356"/>
</kw>
<kw name="sensitivity_dpi.Click On Selected DPI Speed" library="sensitivity_dpi_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_selected_dpi_speed}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:57:01.358" endtime="20220314 16:57:01.913"/>
</kw>
<status status="PASS" starttime="20220314 16:57:01.357" endtime="20220314 16:57:01.914"/>
</kw>
<kw name="Input" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_selected_dpi_speed}</arg>
<arg>keys=${dpi}</arg>
<doc>Asserts that an element successfully receives input events for the given keys.</doc>
<status status="PASS" starttime="20220314 16:57:01.915" endtime="20220314 16:57:05.058"/>
</kw>
<status status="PASS" starttime="20220314 16:57:01.353" endtime="20220314 16:57:05.059"/>
</kw>
<kw name="dpi.Get Current DPI Value And Verify With Expected Firmware DPI" library="dpi">
<arg>${device['productId']}</arg>
<arg>${device['displayName']}</arg>
<doc>Get current DPI value and compare it with expected firmware DPI and return their status after restoring default setting</doc>
<kw name="sensitivity_dpi.Get Current DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${dpi_current}</var>
<arg>selector=${sensitivity_dpi_speed_selected}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:57:05.106" level="INFO">${dpi_current} = 800</msg>
<status status="PASS" starttime="20220314 16:57:05.083" endtime="20220314 16:57:05.106"/>
</kw>
<msg timestamp="20220314 16:57:05.106" level="INFO">${GUI_dpi} = 800</msg>
<status status="PASS" starttime="20220314 16:57:05.083" endtime="20220314 16:57:05.106"/>
</kw>
<kw name="backend.Verify DPI Of Device" library="backend">
<arg>${GUI_dpi}</arg>
<arg>${devicename}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:57:05.112" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:57:05.111" endtime="20220314 16:57:05.112"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:57:06.118" level="INFO">16:57:05.116775: {"msgId": "71d3d5d4-a8a7-47e5-b444-005cd4d24b1c", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_PRIMARY": "PRIMARY", "ZONE_BRANDING": "LOGO"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:57:06.119" level="INFO">${res} =  {"msgId": "71d3d5d4-a8a7-47e5-b444-005cd4d24b1c", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:57:05.113" endtime="20220314 16:57:06.119"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:57:06.122" level="INFO">${res} = {'msgId': '71d3d5d4-a8a7-47e5-b444-005cd4d24b1c', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:57:06.120" endtime="20220314 16:57:06.122"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:06.138" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:57:06.124" endtime="20220314 16:57:06.138"/>
</kw>
<msg timestamp="20220314 16:57:06.138" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:57:06.123" endtime="20220314 16:57:06.138"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:06.345" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:06.139" endtime="20220314 16:57:06.345"/>
</kw>
<msg timestamp="20220314 16:57:06.362" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:06.139" endtime="20220314 16:57:06.362"/>
</kw>
<msg timestamp="20220314 16:57:06.362" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:06.138" endtime="20220314 16:57:06.362"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:06.518" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:57:06.364" endtime="20220314 16:57:06.518"/>
</kw>
<msg timestamp="20220314 16:57:06.518" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:57:06.364" endtime="20220314 16:57:06.518"/>
</kw>
<msg timestamp="20220314 16:57:06.518" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:57:06.363" endtime="20220314 16:57:06.518"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:06.743" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g7_m1', 'g903hero_g4_m1_shifted', 'g903hero_g11_m1', 'g903...</msg>
<status status="PASS" starttime="20220314 16:57:06.520" endtime="20220314 16:57:06.743"/>
</kw>
<msg timestamp="20220314 16:57:06.745" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g7_m1', 'g903hero_g4_m1_shifted', 'g903hero_g11_m1', 'g903...</msg>
<status status="PASS" starttime="20220314 16:57:06.519" endtime="20220314 16:57:06.745"/>
</kw>
<msg timestamp="20220314 16:57:06.745" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:57:06.519" endtime="20220314 16:57:06.745"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:06.747" endtime="20220314 16:57:06.748"/>
</kw>
<status status="PASS" starttime="20220314 16:57:06.518" endtime="20220314 16:57:06.748"/>
</branch>
<status status="PASS" starttime="20220314 16:57:06.518" endtime="20220314 16:57:06.748"/>
</if>
<status status="PASS" starttime="20220314 16:57:06.363" endtime="20220314 16:57:06.748"/>
</iter>
<status status="PASS" starttime="20220314 16:57:06.362" endtime="20220314 16:57:06.748"/>
</for>
<msg timestamp="20220314 16:57:06.749" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:57:05.109" endtime="20220314 16:57:06.749"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:57:06.750" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/dpi'}</msg>
<status status="PASS" starttime="20220314 16:57:06.750" endtime="20220314 16:57:06.751"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:57:06.751" endtime="20220314 16:57:06.752"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:57:07.752" level="INFO">16:57:06.751700: {"msgId": "50ae69dd-1fe3-428a-b9eb-3192f739df3e", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.Dpi.State", "deviceId": "dev00000000", "dpi": 800, "dpiIndex": 2, "shifted": false}}</msg>
<msg timestamp="20220314 16:57:07.752" level="INFO">${response} =  {"msgId": "50ae69dd-1fe3-428a-b9eb-3192f739df3e", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapi...</msg>
<status status="PASS" starttime="20220314 16:57:06.752" endtime="20220314 16:57:07.753"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:57:07.755" level="INFO">${response} = {'msgId': '50ae69dd-1fe3-428a-b9eb-3192f739df3e', 'verb': 'GET', 'path': '/mouse/dev00000000/dpi', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis...</msg>
<status status="PASS" starttime="20220314 16:57:07.754" endtime="20220314 16:57:07.755"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:07.771" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:57:07.758" endtime="20220314 16:57:07.771"/>
</kw>
<msg timestamp="20220314 16:57:07.772" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:57:07.758" endtime="20220314 16:57:07.772"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:07.785" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:57:07.772" endtime="20220314 16:57:07.785"/>
</kw>
<msg timestamp="20220314 16:57:07.785" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:57:07.772" endtime="20220314 16:57:07.785"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:57:07.786" endtime="20220314 16:57:07.786"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:57:07.786" endtime="20220314 16:57:07.786"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:57:07.787" endtime="20220314 16:57:07.787"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:07.787" endtime="20220314 16:57:07.787"/>
</kw>
<status status="PASS" starttime="20220314 16:57:07.756" endtime="20220314 16:57:07.787"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_dpi}</var>
<arg>${response}</arg>
<arg>dpi</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:07.802" level="INFO">${result} = [800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800]</msg>
<status status="PASS" starttime="20220314 16:57:07.789" endtime="20220314 16:57:07.802"/>
</kw>
<msg timestamp="20220314 16:57:07.802" level="INFO">${result} = [800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800]</msg>
<status status="PASS" starttime="20220314 16:57:07.788" endtime="20220314 16:57:07.802"/>
</kw>
<msg timestamp="20220314 16:57:07.802" level="INFO">${backend_dpi} = 800</msg>
<status status="PASS" starttime="20220314 16:57:07.788" endtime="20220314 16:57:07.802"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_dpi}</arg>
<arg>${backend_dpi}</arg>
<arg>The expected dpi value (${expected_dpi}) and actual value from backend (${backend_dpi}) is different</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:57:07.803" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:57:07.803" endtime="20220314 16:57:07.803"/>
</kw>
<status status="PASS" starttime="20220314 16:57:05.108" endtime="20220314 16:57:07.803"/>
</kw>
<kw name="sensitivity_dpi.Click On Restore Default Settings" library="sensitivity_dpi_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${sensitivity_dpi_restore_default}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:57:07.805" level="INFO">${words} = ['.panel-button', 'text=RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:57:07.804" endtime="20220314 16:57:07.805"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:57:07.805" level="INFO">Length is 2</msg>
<msg timestamp="20220314 16:57:07.805" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20220314 16:57:07.805" endtime="20220314 16:57:07.805"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="__Click UI Based On Attribute__" library="common_keywords_kragle">
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<doc>Internal fuction to do additional check on 'Click UI'. Not to be used anywhere else.</doc>
<kw name="Split String" library="String">
<var>${sub_words}</var>
<arg>${word}</arg>
<arg>=</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:57:07.806" level="INFO">${sub_words} = ['text', 'RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:57:07.806" endtime="20220314 16:57:07.806"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='text'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:57:07.807" endtime="20220314 16:57:08.380"/>
</kw>
<status status="PASS" starttime="20220314 16:57:07.807" endtime="20220314 16:57:08.380"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='innerText'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>innerText=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:57:08.383" endtime="20220314 16:57:08.384"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='value'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>value=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:57:08.385" endtime="20220314 16:57:08.385"/>
</kw>
<status status="PASS" starttime="20220314 16:57:07.806" endtime="20220314 16:57:08.386"/>
</kw>
<status status="PASS" starttime="20220314 16:57:07.805" endtime="20220314 16:57:08.386"/>
</kw>
<status status="PASS" starttime="20220314 16:57:07.804" endtime="20220314 16:57:08.386"/>
</kw>
<status status="PASS" starttime="20220314 16:57:07.804" endtime="20220314 16:57:08.386"/>
</kw>
<status status="PASS" starttime="20220314 16:57:05.060" endtime="20220314 16:57:08.386"/>
</kw>
<kw name="sensitivity_dpi.Update DPI Speed Of Selected DPI" library="sensitivity_dpi_screen">
<arg>TestTest</arg>
<kw name="Log To Console" library="BuiltIn">
<arg>Updating DPI Speed (as: ${dpi}) Of Selected DPI</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:08.386" endtime="20220314 16:57:08.386"/>
</kw>
<kw name="sensitivity_dpi.Click On Selected DPI Speed" library="sensitivity_dpi_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_selected_dpi_speed}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:57:08.387" endtime="20220314 16:57:08.945"/>
</kw>
<status status="PASS" starttime="20220314 16:57:08.387" endtime="20220314 16:57:08.946"/>
</kw>
<kw name="Input" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_selected_dpi_speed}</arg>
<arg>keys=${dpi}</arg>
<doc>Asserts that an element successfully receives input events for the given keys.</doc>
<status status="PASS" starttime="20220314 16:57:08.947" endtime="20220314 16:57:12.059"/>
</kw>
<status status="PASS" starttime="20220314 16:57:08.386" endtime="20220314 16:57:12.060"/>
</kw>
<kw name="dpi.Get Current DPI Value And Verify With Expected Firmware DPI" library="dpi">
<arg>${device['productId']}</arg>
<arg>${device['displayName']}</arg>
<doc>Get current DPI value and compare it with expected firmware DPI and return their status after restoring default setting</doc>
<kw name="sensitivity_dpi.Get Current DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${dpi_current}</var>
<arg>selector=${sensitivity_dpi_speed_selected}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:57:12.096" level="INFO">${dpi_current} = 800</msg>
<status status="PASS" starttime="20220314 16:57:12.078" endtime="20220314 16:57:12.096"/>
</kw>
<msg timestamp="20220314 16:57:12.096" level="INFO">${GUI_dpi} = 800</msg>
<status status="PASS" starttime="20220314 16:57:12.077" endtime="20220314 16:57:12.096"/>
</kw>
<kw name="backend.Verify DPI Of Device" library="backend">
<arg>${GUI_dpi}</arg>
<arg>${devicename}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:57:12.101" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:57:12.100" endtime="20220314 16:57:12.101"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:57:13.106" level="INFO">16:57:12.105139: {"msgId": "504c03f0-1446-4aa8-9bc0-00de9d0f9cab", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_PRIMARY": "PRIMARY", "ZONE_BRANDING": "LOGO"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:57:13.107" level="INFO">${res} =  {"msgId": "504c03f0-1446-4aa8-9bc0-00de9d0f9cab", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:57:12.101" endtime="20220314 16:57:13.107"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:57:13.110" level="INFO">${res} = {'msgId': '504c03f0-1446-4aa8-9bc0-00de9d0f9cab', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:57:13.109" endtime="20220314 16:57:13.110"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:13.125" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:57:13.112" endtime="20220314 16:57:13.125"/>
</kw>
<msg timestamp="20220314 16:57:13.126" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:57:13.111" endtime="20220314 16:57:13.126"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:13.309" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:13.127" endtime="20220314 16:57:13.309"/>
</kw>
<msg timestamp="20220314 16:57:13.323" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:13.127" endtime="20220314 16:57:13.323"/>
</kw>
<msg timestamp="20220314 16:57:13.324" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:13.126" endtime="20220314 16:57:13.324"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:13.481" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:57:13.326" endtime="20220314 16:57:13.481"/>
</kw>
<msg timestamp="20220314 16:57:13.481" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:57:13.325" endtime="20220314 16:57:13.481"/>
</kw>
<msg timestamp="20220314 16:57:13.482" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:57:13.324" endtime="20220314 16:57:13.482"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:13.717" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g8_m1', 'g903hero_g3_m1', 'g903hero_lighting_setting_firmw...</msg>
<status status="PASS" starttime="20220314 16:57:13.483" endtime="20220314 16:57:13.717"/>
</kw>
<msg timestamp="20220314 16:57:13.718" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g8_m1', 'g903hero_g3_m1', 'g903hero_lighting_setting_firmw...</msg>
<status status="PASS" starttime="20220314 16:57:13.483" endtime="20220314 16:57:13.718"/>
</kw>
<msg timestamp="20220314 16:57:13.718" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:57:13.482" endtime="20220314 16:57:13.718"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:13.719" endtime="20220314 16:57:13.719"/>
</kw>
<status status="PASS" starttime="20220314 16:57:13.482" endtime="20220314 16:57:13.719"/>
</branch>
<status status="PASS" starttime="20220314 16:57:13.482" endtime="20220314 16:57:13.719"/>
</if>
<status status="PASS" starttime="20220314 16:57:13.324" endtime="20220314 16:57:13.719"/>
</iter>
<status status="PASS" starttime="20220314 16:57:13.324" endtime="20220314 16:57:13.719"/>
</for>
<msg timestamp="20220314 16:57:13.719" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:57:12.099" endtime="20220314 16:57:13.719"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:57:13.720" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/dpi'}</msg>
<status status="PASS" starttime="20220314 16:57:13.720" endtime="20220314 16:57:13.720"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:57:13.720" endtime="20220314 16:57:13.722"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:57:14.722" level="INFO">16:57:13.721569: {"msgId": "bd6c9bee-78a9-4b4f-9411-e68b5cb22fe0", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.Dpi.State", "deviceId": "dev00000000", "dpi": 800, "dpiIndex": 2, "shifted": false}}</msg>
<msg timestamp="20220314 16:57:14.723" level="INFO">${response} =  {"msgId": "bd6c9bee-78a9-4b4f-9411-e68b5cb22fe0", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapi...</msg>
<status status="PASS" starttime="20220314 16:57:13.722" endtime="20220314 16:57:14.723"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:57:14.725" level="INFO">${response} = {'msgId': 'bd6c9bee-78a9-4b4f-9411-e68b5cb22fe0', 'verb': 'GET', 'path': '/mouse/dev00000000/dpi', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis...</msg>
<status status="PASS" starttime="20220314 16:57:14.724" endtime="20220314 16:57:14.725"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:14.741" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:57:14.728" endtime="20220314 16:57:14.741"/>
</kw>
<msg timestamp="20220314 16:57:14.742" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:57:14.728" endtime="20220314 16:57:14.742"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:14.755" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:57:14.743" endtime="20220314 16:57:14.755"/>
</kw>
<msg timestamp="20220314 16:57:14.756" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:57:14.742" endtime="20220314 16:57:14.756"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:57:14.756" endtime="20220314 16:57:14.756"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:57:14.757" endtime="20220314 16:57:14.757"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:57:14.757" endtime="20220314 16:57:14.757"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:14.758" endtime="20220314 16:57:14.758"/>
</kw>
<status status="PASS" starttime="20220314 16:57:14.726" endtime="20220314 16:57:14.758"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_dpi}</var>
<arg>${response}</arg>
<arg>dpi</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:14.772" level="INFO">${result} = [800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800]</msg>
<status status="PASS" starttime="20220314 16:57:14.759" endtime="20220314 16:57:14.772"/>
</kw>
<msg timestamp="20220314 16:57:14.773" level="INFO">${result} = [800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800]</msg>
<status status="PASS" starttime="20220314 16:57:14.759" endtime="20220314 16:57:14.773"/>
</kw>
<msg timestamp="20220314 16:57:14.773" level="INFO">${backend_dpi} = 800</msg>
<status status="PASS" starttime="20220314 16:57:14.758" endtime="20220314 16:57:14.773"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_dpi}</arg>
<arg>${backend_dpi}</arg>
<arg>The expected dpi value (${expected_dpi}) and actual value from backend (${backend_dpi}) is different</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:57:14.773" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:57:14.773" endtime="20220314 16:57:14.773"/>
</kw>
<status status="PASS" starttime="20220314 16:57:12.098" endtime="20220314 16:57:14.774"/>
</kw>
<kw name="sensitivity_dpi.Click On Restore Default Settings" library="sensitivity_dpi_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${sensitivity_dpi_restore_default}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:57:14.775" level="INFO">${words} = ['.panel-button', 'text=RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:57:14.775" endtime="20220314 16:57:14.775"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:57:14.775" level="INFO">Length is 2</msg>
<msg timestamp="20220314 16:57:14.775" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20220314 16:57:14.775" endtime="20220314 16:57:14.775"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="__Click UI Based On Attribute__" library="common_keywords_kragle">
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<doc>Internal fuction to do additional check on 'Click UI'. Not to be used anywhere else.</doc>
<kw name="Split String" library="String">
<var>${sub_words}</var>
<arg>${word}</arg>
<arg>=</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:57:14.777" level="INFO">${sub_words} = ['text', 'RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:57:14.777" endtime="20220314 16:57:14.777"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='text'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:57:14.777" endtime="20220314 16:57:15.341"/>
</kw>
<status status="PASS" starttime="20220314 16:57:14.777" endtime="20220314 16:57:15.341"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='innerText'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>innerText=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:57:15.343" endtime="20220314 16:57:15.344"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='value'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>value=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:57:15.345" endtime="20220314 16:57:15.346"/>
</kw>
<status status="PASS" starttime="20220314 16:57:14.776" endtime="20220314 16:57:15.346"/>
</kw>
<status status="PASS" starttime="20220314 16:57:14.776" endtime="20220314 16:57:15.346"/>
</kw>
<status status="PASS" starttime="20220314 16:57:14.774" endtime="20220314 16:57:15.347"/>
</kw>
<status status="PASS" starttime="20220314 16:57:14.774" endtime="20220314 16:57:15.347"/>
</kw>
<status status="PASS" starttime="20220314 16:57:12.062" endtime="20220314 16:57:15.348"/>
</kw>
<status status="PASS" starttime="20220314 16:56:39.980" endtime="20220314 16:57:15.348"/>
</kw>
<kw name="dpi.Firmware Report Rate Test" library="dpi">
<arg>${device}</arg>
<doc>Check that G HUB can assign Report Rate to the device. And the script will verify if device can be set the Report Rate by querying firmware
- Select the preset Report Rate
- Verify the Report Rate set to device by querying firmware</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Checking Firmware Report Rate</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:15.351" endtime="20220314 16:57:15.352"/>
</kw>
<kw name="dpi.Report Rate Test" library="dpi">
<arg>${device['productId']}</arg>
<arg>${device['displayName']}</arg>
<doc>Check that G HUB can assign Report Rate to the device. And the script will verify if device can be set the Report Rate by querying firmware
- Select the preset Report Rate
- Verify the Report Rate set to device by querying firmware</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Checking Report Rate</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:15.371" endtime="20220314 16:57:15.371"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>1</value>
<value>5</value>
<iter>
<var name="${index}">1</var>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>${index}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:57:15.372" endtime="20220314 16:57:15.962"/>
</kw>
<status status="PASS" starttime="20220314 16:57:15.372" endtime="20220314 16:57:15.962"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_report_rate}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:57:15.993" level="INFO">${report_rate} = 1000</msg>
<status status="PASS" starttime="20220314 16:57:15.966" endtime="20220314 16:57:15.993"/>
</kw>
<msg timestamp="20220314 16:57:15.994" level="INFO">${GUI_report_rate} = 1000</msg>
<status status="PASS" starttime="20220314 16:57:15.964" endtime="20220314 16:57:15.994"/>
</kw>
<kw name="backend.Verify Report Rate" library="backend">
<arg>${device_name}</arg>
<arg>${GUI_report_rate}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:57:15.999" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:57:15.998" endtime="20220314 16:57:15.999"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:57:17.006" level="INFO">16:57:16.004846: {"msgId": "b929dc8f-c3b4-408c-98fc-bfebde52573b", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO", "ZONE_PRIMARY": "PRIMARY"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:57:17.007" level="INFO">${res} =  {"msgId": "b929dc8f-c3b4-408c-98fc-bfebde52573b", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:57:16.000" endtime="20220314 16:57:17.007"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:57:17.010" level="INFO">${res} = {'msgId': 'b929dc8f-c3b4-408c-98fc-bfebde52573b', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:57:17.008" endtime="20220314 16:57:17.010"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:17.025" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:57:17.011" endtime="20220314 16:57:17.025"/>
</kw>
<msg timestamp="20220314 16:57:17.026" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:57:17.011" endtime="20220314 16:57:17.026"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:17.211" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:17.027" endtime="20220314 16:57:17.211"/>
</kw>
<msg timestamp="20220314 16:57:17.227" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:17.027" endtime="20220314 16:57:17.227"/>
</kw>
<msg timestamp="20220314 16:57:17.227" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:17.026" endtime="20220314 16:57:17.227"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:17.428" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:57:17.229" endtime="20220314 16:57:17.428"/>
</kw>
<msg timestamp="20220314 16:57:17.428" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:57:17.229" endtime="20220314 16:57:17.428"/>
</kw>
<msg timestamp="20220314 16:57:17.428" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:57:17.228" endtime="20220314 16:57:17.428"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:17.666" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g6_m1', 'g903hero_g5_m1', 'g903hero_g11_m1', 'g903hero_g12...</msg>
<status status="PASS" starttime="20220314 16:57:17.430" endtime="20220314 16:57:17.666"/>
</kw>
<msg timestamp="20220314 16:57:17.667" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g6_m1', 'g903hero_g5_m1', 'g903hero_g11_m1', 'g903hero_g12...</msg>
<status status="PASS" starttime="20220314 16:57:17.429" endtime="20220314 16:57:17.667"/>
</kw>
<msg timestamp="20220314 16:57:17.667" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:57:17.429" endtime="20220314 16:57:17.667"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:17.668" endtime="20220314 16:57:17.668"/>
</kw>
<status status="PASS" starttime="20220314 16:57:17.428" endtime="20220314 16:57:17.668"/>
</branch>
<status status="PASS" starttime="20220314 16:57:17.428" endtime="20220314 16:57:17.668"/>
</if>
<status status="PASS" starttime="20220314 16:57:17.227" endtime="20220314 16:57:17.668"/>
</iter>
<status status="PASS" starttime="20220314 16:57:17.227" endtime="20220314 16:57:17.668"/>
</for>
<msg timestamp="20220314 16:57:17.668" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:57:15.997" endtime="20220314 16:57:17.668"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:57:17.669" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/report_rate'}</msg>
<status status="PASS" starttime="20220314 16:57:17.669" endtime="20220314 16:57:17.669"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:57:17.669" endtime="20220314 16:57:17.674"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:57:18.674" level="INFO">16:57:17.673099: {"msgId": "bc58c08b-db28-4cc6-9d88-5a72a03039c9", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.ReportRate", "value": 1000}}</msg>
<msg timestamp="20220314 16:57:18.674" level="INFO">${response} =  {"msgId": "bc58c08b-db28-4cc6-9d88-5a72a03039c9", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.g...</msg>
<status status="PASS" starttime="20220314 16:57:17.674" endtime="20220314 16:57:18.674"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:57:18.676" level="INFO">${response} = {'msgId': 'bc58c08b-db28-4cc6-9d88-5a72a03039c9', 'verb': 'GET', 'path': '/mouse/dev00000000/report_rate', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.go...</msg>
<status status="PASS" starttime="20220314 16:57:18.675" endtime="20220314 16:57:18.676"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:18.692" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:57:18.679" endtime="20220314 16:57:18.692"/>
</kw>
<msg timestamp="20220314 16:57:18.692" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:57:18.678" endtime="20220314 16:57:18.692"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:18.706" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:57:18.693" endtime="20220314 16:57:18.706"/>
</kw>
<msg timestamp="20220314 16:57:18.706" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:57:18.692" endtime="20220314 16:57:18.706"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:57:18.707" endtime="20220314 16:57:18.707"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:57:18.707" endtime="20220314 16:57:18.707"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:57:18.707" endtime="20220314 16:57:18.708"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:18.708" endtime="20220314 16:57:18.708"/>
</kw>
<status status="PASS" starttime="20220314 16:57:18.678" endtime="20220314 16:57:18.708"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_report_rate}</var>
<arg>${response}</arg>
<arg>value</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:18.723" level="INFO">${result} = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]</msg>
<status status="PASS" starttime="20220314 16:57:18.710" endtime="20220314 16:57:18.723"/>
</kw>
<msg timestamp="20220314 16:57:18.723" level="INFO">${result} = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]</msg>
<status status="PASS" starttime="20220314 16:57:18.709" endtime="20220314 16:57:18.723"/>
</kw>
<msg timestamp="20220314 16:57:18.723" level="INFO">${backend_report_rate} = 1000</msg>
<status status="PASS" starttime="20220314 16:57:18.709" endtime="20220314 16:57:18.723"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_report_rate}</arg>
<arg>${backend_report_rate}</arg>
<arg>The expected repo rate (${expected_report_rate}) and the actual value from backend repo rate (${backend_report_rate}) does not match</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:57:18.724" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:57:18.724" endtime="20220314 16:57:18.724"/>
</kw>
<status status="PASS" starttime="20220314 16:57:15.995" endtime="20220314 16:57:18.724"/>
</kw>
<status status="PASS" starttime="20220314 16:57:15.371" endtime="20220314 16:57:18.724"/>
</iter>
<iter>
<var name="${index}">2</var>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>${index}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:57:18.725" endtime="20220314 16:57:19.299"/>
</kw>
<status status="PASS" starttime="20220314 16:57:18.725" endtime="20220314 16:57:19.300"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_report_rate}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:57:19.331" level="INFO">${report_rate} = 500</msg>
<status status="PASS" starttime="20220314 16:57:19.303" endtime="20220314 16:57:19.331"/>
</kw>
<msg timestamp="20220314 16:57:19.332" level="INFO">${GUI_report_rate} = 500</msg>
<status status="PASS" starttime="20220314 16:57:19.301" endtime="20220314 16:57:19.332"/>
</kw>
<kw name="backend.Verify Report Rate" library="backend">
<arg>${device_name}</arg>
<arg>${GUI_report_rate}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:57:19.337" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:57:19.336" endtime="20220314 16:57:19.337"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:57:20.344" level="INFO">16:57:19.341816: {"msgId": "77077436-da1f-4b51-87d5-a93e5f3a20a0", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_PRIMARY": "PRIMARY", "ZONE_BRANDING": "LOGO"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:57:20.345" level="INFO">${res} =  {"msgId": "77077436-da1f-4b51-87d5-a93e5f3a20a0", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:57:19.338" endtime="20220314 16:57:20.345"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:57:20.347" level="INFO">${res} = {'msgId': '77077436-da1f-4b51-87d5-a93e5f3a20a0', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:57:20.346" endtime="20220314 16:57:20.347"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:20.373" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:57:20.350" endtime="20220314 16:57:20.373"/>
</kw>
<msg timestamp="20220314 16:57:20.374" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:57:20.348" endtime="20220314 16:57:20.374"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:20.553" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:20.375" endtime="20220314 16:57:20.553"/>
</kw>
<msg timestamp="20220314 16:57:20.569" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:20.375" endtime="20220314 16:57:20.569"/>
</kw>
<msg timestamp="20220314 16:57:20.569" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:20.374" endtime="20220314 16:57:20.569"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:20.738" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:57:20.571" endtime="20220314 16:57:20.738"/>
</kw>
<msg timestamp="20220314 16:57:20.738" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:57:20.571" endtime="20220314 16:57:20.738"/>
</kw>
<msg timestamp="20220314 16:57:20.738" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:57:20.570" endtime="20220314 16:57:20.738"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:20.970" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g7_m1_shifted', 'g903hero_lighting_setting_firmware', 'g90...</msg>
<status status="PASS" starttime="20220314 16:57:20.742" endtime="20220314 16:57:20.970"/>
</kw>
<msg timestamp="20220314 16:57:20.971" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g7_m1_shifted', 'g903hero_lighting_setting_firmware', 'g90...</msg>
<status status="PASS" starttime="20220314 16:57:20.741" endtime="20220314 16:57:20.971"/>
</kw>
<msg timestamp="20220314 16:57:20.971" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:57:20.740" endtime="20220314 16:57:20.971"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:20.972" endtime="20220314 16:57:20.972"/>
</kw>
<status status="PASS" starttime="20220314 16:57:20.739" endtime="20220314 16:57:20.972"/>
</branch>
<status status="PASS" starttime="20220314 16:57:20.739" endtime="20220314 16:57:20.972"/>
</if>
<status status="PASS" starttime="20220314 16:57:20.569" endtime="20220314 16:57:20.972"/>
</iter>
<status status="PASS" starttime="20220314 16:57:20.569" endtime="20220314 16:57:20.972"/>
</for>
<msg timestamp="20220314 16:57:20.972" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:57:19.335" endtime="20220314 16:57:20.972"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:57:20.973" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/report_rate'}</msg>
<status status="PASS" starttime="20220314 16:57:20.973" endtime="20220314 16:57:20.973"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:57:20.973" endtime="20220314 16:57:20.977"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:57:21.979" level="INFO">16:57:20.977433: {"msgId": "51724506-5877-4c34-ac70-30b206cc6818", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.ReportRate", "value": 500}}</msg>
<msg timestamp="20220314 16:57:21.979" level="INFO">${response} =  {"msgId": "51724506-5877-4c34-ac70-30b206cc6818", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.g...</msg>
<status status="PASS" starttime="20220314 16:57:20.979" endtime="20220314 16:57:21.979"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:57:21.982" level="INFO">${response} = {'msgId': '51724506-5877-4c34-ac70-30b206cc6818', 'verb': 'GET', 'path': '/mouse/dev00000000/report_rate', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.go...</msg>
<status status="PASS" starttime="20220314 16:57:21.981" endtime="20220314 16:57:21.982"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:21.998" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:57:21.985" endtime="20220314 16:57:21.998"/>
</kw>
<msg timestamp="20220314 16:57:21.999" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:57:21.985" endtime="20220314 16:57:21.999"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:22.012" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:57:22.000" endtime="20220314 16:57:22.012"/>
</kw>
<msg timestamp="20220314 16:57:22.013" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:57:21.999" endtime="20220314 16:57:22.013"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:57:22.013" endtime="20220314 16:57:22.013"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:57:22.013" endtime="20220314 16:57:22.014"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:57:22.014" endtime="20220314 16:57:22.014"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:22.014" endtime="20220314 16:57:22.015"/>
</kw>
<status status="PASS" starttime="20220314 16:57:21.984" endtime="20220314 16:57:22.015"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_report_rate}</var>
<arg>${response}</arg>
<arg>value</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:22.029" level="INFO">${result} = [500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500]</msg>
<status status="PASS" starttime="20220314 16:57:22.016" endtime="20220314 16:57:22.029"/>
</kw>
<msg timestamp="20220314 16:57:22.030" level="INFO">${result} = [500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500]</msg>
<status status="PASS" starttime="20220314 16:57:22.016" endtime="20220314 16:57:22.030"/>
</kw>
<msg timestamp="20220314 16:57:22.030" level="INFO">${backend_report_rate} = 500</msg>
<status status="PASS" starttime="20220314 16:57:22.015" endtime="20220314 16:57:22.030"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_report_rate}</arg>
<arg>${backend_report_rate}</arg>
<arg>The expected repo rate (${expected_report_rate}) and the actual value from backend repo rate (${backend_report_rate}) does not match</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:57:22.030" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:57:22.030" endtime="20220314 16:57:22.030"/>
</kw>
<status status="PASS" starttime="20220314 16:57:19.333" endtime="20220314 16:57:22.031"/>
</kw>
<status status="PASS" starttime="20220314 16:57:18.724" endtime="20220314 16:57:22.031"/>
</iter>
<iter>
<var name="${index}">3</var>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>${index}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:57:22.032" endtime="20220314 16:57:22.600"/>
</kw>
<status status="PASS" starttime="20220314 16:57:22.031" endtime="20220314 16:57:22.600"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_report_rate}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:57:22.634" level="INFO">${report_rate} = 250</msg>
<status status="PASS" starttime="20220314 16:57:22.604" endtime="20220314 16:57:22.634"/>
</kw>
<msg timestamp="20220314 16:57:22.634" level="INFO">${GUI_report_rate} = 250</msg>
<status status="PASS" starttime="20220314 16:57:22.602" endtime="20220314 16:57:22.634"/>
</kw>
<kw name="backend.Verify Report Rate" library="backend">
<arg>${device_name}</arg>
<arg>${GUI_report_rate}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:57:22.640" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:57:22.639" endtime="20220314 16:57:22.640"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:57:23.648" level="INFO">16:57:22.646533: {"msgId": "7bcb906d-c804-4b25-9217-9ee5b891a189", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO", "ZONE_PRIMARY": "PRIMARY"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:57:23.649" level="INFO">${res} =  {"msgId": "7bcb906d-c804-4b25-9217-9ee5b891a189", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:57:22.641" endtime="20220314 16:57:23.649"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:57:23.652" level="INFO">${res} = {'msgId': '7bcb906d-c804-4b25-9217-9ee5b891a189', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:57:23.651" endtime="20220314 16:57:23.652"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:23.668" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:57:23.654" endtime="20220314 16:57:23.668"/>
</kw>
<msg timestamp="20220314 16:57:23.668" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:57:23.654" endtime="20220314 16:57:23.668"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:23.857" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:23.669" endtime="20220314 16:57:23.857"/>
</kw>
<msg timestamp="20220314 16:57:23.873" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:23.669" endtime="20220314 16:57:23.873"/>
</kw>
<msg timestamp="20220314 16:57:23.874" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:23.668" endtime="20220314 16:57:23.874"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:24.037" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:57:23.876" endtime="20220314 16:57:24.037"/>
</kw>
<msg timestamp="20220314 16:57:24.037" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:57:23.876" endtime="20220314 16:57:24.037"/>
</kw>
<msg timestamp="20220314 16:57:24.038" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:57:23.875" endtime="20220314 16:57:24.038"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:24.323" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g2_m1', 'g903hero_g1_m1_shifted', 'g903hero_g2_m1_shifted'...</msg>
<status status="PASS" starttime="20220314 16:57:24.039" endtime="20220314 16:57:24.323"/>
</kw>
<msg timestamp="20220314 16:57:24.324" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g2_m1', 'g903hero_g1_m1_shifted', 'g903hero_g2_m1_shifted'...</msg>
<status status="PASS" starttime="20220314 16:57:24.039" endtime="20220314 16:57:24.324"/>
</kw>
<msg timestamp="20220314 16:57:24.324" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:57:24.038" endtime="20220314 16:57:24.324"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:24.325" endtime="20220314 16:57:24.325"/>
</kw>
<status status="PASS" starttime="20220314 16:57:24.038" endtime="20220314 16:57:24.325"/>
</branch>
<status status="PASS" starttime="20220314 16:57:24.038" endtime="20220314 16:57:24.325"/>
</if>
<status status="PASS" starttime="20220314 16:57:23.874" endtime="20220314 16:57:24.325"/>
</iter>
<status status="PASS" starttime="20220314 16:57:23.874" endtime="20220314 16:57:24.325"/>
</for>
<msg timestamp="20220314 16:57:24.325" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:57:22.638" endtime="20220314 16:57:24.325"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:57:24.326" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/report_rate'}</msg>
<status status="PASS" starttime="20220314 16:57:24.326" endtime="20220314 16:57:24.326"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:57:24.327" endtime="20220314 16:57:24.331"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:57:25.333" level="INFO">16:57:24.331008: {"msgId": "8b3e131f-6599-4743-b0a7-ca309ae8f8aa", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.ReportRate", "value": 250}}</msg>
<msg timestamp="20220314 16:57:25.333" level="INFO">${response} =  {"msgId": "8b3e131f-6599-4743-b0a7-ca309ae8f8aa", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.g...</msg>
<status status="PASS" starttime="20220314 16:57:24.331" endtime="20220314 16:57:25.333"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:57:25.336" level="INFO">${response} = {'msgId': '8b3e131f-6599-4743-b0a7-ca309ae8f8aa', 'verb': 'GET', 'path': '/mouse/dev00000000/report_rate', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.go...</msg>
<status status="PASS" starttime="20220314 16:57:25.335" endtime="20220314 16:57:25.336"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:25.376" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:57:25.341" endtime="20220314 16:57:25.376"/>
</kw>
<msg timestamp="20220314 16:57:25.376" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:57:25.339" endtime="20220314 16:57:25.376"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:25.403" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:57:25.378" endtime="20220314 16:57:25.403"/>
</kw>
<msg timestamp="20220314 16:57:25.404" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:57:25.377" endtime="20220314 16:57:25.404"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:57:25.404" endtime="20220314 16:57:25.405"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:57:25.405" endtime="20220314 16:57:25.405"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:57:25.406" endtime="20220314 16:57:25.406"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:25.407" endtime="20220314 16:57:25.407"/>
</kw>
<status status="PASS" starttime="20220314 16:57:25.337" endtime="20220314 16:57:25.407"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_report_rate}</var>
<arg>${response}</arg>
<arg>value</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:25.436" level="INFO">${result} = [250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250]</msg>
<status status="PASS" starttime="20220314 16:57:25.410" endtime="20220314 16:57:25.436"/>
</kw>
<msg timestamp="20220314 16:57:25.436" level="INFO">${result} = [250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250]</msg>
<status status="PASS" starttime="20220314 16:57:25.409" endtime="20220314 16:57:25.436"/>
</kw>
<msg timestamp="20220314 16:57:25.436" level="INFO">${backend_report_rate} = 250</msg>
<status status="PASS" starttime="20220314 16:57:25.408" endtime="20220314 16:57:25.436"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_report_rate}</arg>
<arg>${backend_report_rate}</arg>
<arg>The expected repo rate (${expected_report_rate}) and the actual value from backend repo rate (${backend_report_rate}) does not match</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:57:25.437" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:57:25.436" endtime="20220314 16:57:25.437"/>
</kw>
<status status="PASS" starttime="20220314 16:57:22.636" endtime="20220314 16:57:25.437"/>
</kw>
<status status="PASS" starttime="20220314 16:57:22.031" endtime="20220314 16:57:25.437"/>
</iter>
<iter>
<var name="${index}">4</var>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>${index}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:57:25.440" endtime="20220314 16:57:25.997"/>
</kw>
<status status="PASS" starttime="20220314 16:57:25.439" endtime="20220314 16:57:25.997"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_report_rate}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:57:26.029" level="INFO">${report_rate} = 125</msg>
<status status="PASS" starttime="20220314 16:57:26.001" endtime="20220314 16:57:26.029"/>
</kw>
<msg timestamp="20220314 16:57:26.030" level="INFO">${GUI_report_rate} = 125</msg>
<status status="PASS" starttime="20220314 16:57:25.999" endtime="20220314 16:57:26.030"/>
</kw>
<kw name="backend.Verify Report Rate" library="backend">
<arg>${device_name}</arg>
<arg>${GUI_report_rate}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:57:26.035" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:57:26.034" endtime="20220314 16:57:26.035"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:57:27.043" level="INFO">16:57:26.041820: {"msgId": "2ed0d8ce-e342-4e0a-847f-72588b317a0a", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_PRIMARY": "PRIMARY", "ZONE_BRANDING": "LOGO"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:57:27.044" level="INFO">${res} =  {"msgId": "2ed0d8ce-e342-4e0a-847f-72588b317a0a", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:57:26.036" endtime="20220314 16:57:27.044"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:57:27.047" level="INFO">${res} = {'msgId': '2ed0d8ce-e342-4e0a-847f-72588b317a0a', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:57:27.045" endtime="20220314 16:57:27.047"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:27.063" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:57:27.049" endtime="20220314 16:57:27.063"/>
</kw>
<msg timestamp="20220314 16:57:27.063" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:57:27.048" endtime="20220314 16:57:27.063"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:27.243" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:27.064" endtime="20220314 16:57:27.243"/>
</kw>
<msg timestamp="20220314 16:57:27.259" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:27.064" endtime="20220314 16:57:27.259"/>
</kw>
<msg timestamp="20220314 16:57:27.260" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:57:27.063" endtime="20220314 16:57:27.260"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:27.426" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:57:27.262" endtime="20220314 16:57:27.426"/>
</kw>
<msg timestamp="20220314 16:57:27.426" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:57:27.261" endtime="20220314 16:57:27.426"/>
</kw>
<msg timestamp="20220314 16:57:27.426" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:57:27.260" endtime="20220314 16:57:27.426"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:27.652" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g8_m1', 'g903hero_g3_m1', 'g903hero_lighting_setting_firmw...</msg>
<status status="PASS" starttime="20220314 16:57:27.428" endtime="20220314 16:57:27.652"/>
</kw>
<msg timestamp="20220314 16:57:27.653" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g8_m1', 'g903hero_g3_m1', 'g903hero_lighting_setting_firmw...</msg>
<status status="PASS" starttime="20220314 16:57:27.428" endtime="20220314 16:57:27.653"/>
</kw>
<msg timestamp="20220314 16:57:27.653" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:57:27.427" endtime="20220314 16:57:27.653"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:27.654" endtime="20220314 16:57:27.654"/>
</kw>
<status status="PASS" starttime="20220314 16:57:27.426" endtime="20220314 16:57:27.654"/>
</branch>
<status status="PASS" starttime="20220314 16:57:27.426" endtime="20220314 16:57:27.654"/>
</if>
<status status="PASS" starttime="20220314 16:57:27.260" endtime="20220314 16:57:27.654"/>
</iter>
<status status="PASS" starttime="20220314 16:57:27.260" endtime="20220314 16:57:27.654"/>
</for>
<msg timestamp="20220314 16:57:27.654" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:57:26.033" endtime="20220314 16:57:27.654"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:57:27.655" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/report_rate'}</msg>
<status status="PASS" starttime="20220314 16:57:27.655" endtime="20220314 16:57:27.655"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:57:27.655" endtime="20220314 16:57:27.659"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:57:28.660" level="INFO">16:57:27.658514: {"msgId": "918a9975-7126-4ea2-b4a2-3b5aff0a3624", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.ReportRate", "value": 125}}</msg>
<msg timestamp="20220314 16:57:28.660" level="INFO">${response} =  {"msgId": "918a9975-7126-4ea2-b4a2-3b5aff0a3624", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.g...</msg>
<status status="PASS" starttime="20220314 16:57:27.659" endtime="20220314 16:57:28.661"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:57:28.663" level="INFO">${response} = {'msgId': '918a9975-7126-4ea2-b4a2-3b5aff0a3624', 'verb': 'GET', 'path': '/mouse/dev00000000/report_rate', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.go...</msg>
<status status="PASS" starttime="20220314 16:57:28.662" endtime="20220314 16:57:28.663"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:28.679" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:57:28.666" endtime="20220314 16:57:28.679"/>
</kw>
<msg timestamp="20220314 16:57:28.680" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:57:28.666" endtime="20220314 16:57:28.680"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:28.693" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:57:28.681" endtime="20220314 16:57:28.693"/>
</kw>
<msg timestamp="20220314 16:57:28.693" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:57:28.680" endtime="20220314 16:57:28.693"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:57:28.694" endtime="20220314 16:57:28.694"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:57:28.694" endtime="20220314 16:57:28.694"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:57:28.695" endtime="20220314 16:57:28.695"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:28.695" endtime="20220314 16:57:28.695"/>
</kw>
<status status="PASS" starttime="20220314 16:57:28.665" endtime="20220314 16:57:28.695"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_report_rate}</var>
<arg>${response}</arg>
<arg>value</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:57:28.710" level="INFO">${result} = [125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125]</msg>
<status status="PASS" starttime="20220314 16:57:28.697" endtime="20220314 16:57:28.710"/>
</kw>
<msg timestamp="20220314 16:57:28.710" level="INFO">${result} = [125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125]</msg>
<status status="PASS" starttime="20220314 16:57:28.696" endtime="20220314 16:57:28.710"/>
</kw>
<msg timestamp="20220314 16:57:28.710" level="INFO">${backend_report_rate} = 125</msg>
<status status="PASS" starttime="20220314 16:57:28.696" endtime="20220314 16:57:28.710"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_report_rate}</arg>
<arg>${backend_report_rate}</arg>
<arg>The expected repo rate (${expected_report_rate}) and the actual value from backend repo rate (${backend_report_rate}) does not match</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:57:28.711" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:57:28.711" endtime="20220314 16:57:28.711"/>
</kw>
<status status="PASS" starttime="20220314 16:57:26.031" endtime="20220314 16:57:28.711"/>
</kw>
<status status="PASS" starttime="20220314 16:57:25.437" endtime="20220314 16:57:28.711"/>
</iter>
<status status="PASS" starttime="20220314 16:57:15.371" endtime="20220314 16:57:28.711"/>
</for>
<status status="PASS" starttime="20220314 16:57:15.353" endtime="20220314 16:57:28.711"/>
</kw>
<status status="PASS" starttime="20220314 16:57:15.350" endtime="20220314 16:57:28.712"/>
</kw>
<kw name="dpi.Profile Sensitivity Test" library="dpi">
<arg>${device}</arg>
<doc>When debugging, we need to skip some device or some status, and we put all status here
Enginner can mark those devices that you want to run</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Checking Profile Sensitivity</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:28.712" endtime="20220314 16:57:28.713"/>
</kw>
<kw name="Terminate Chrome" library="tools.python.mindstorm.process">
<status status="PASS" starttime="20220314 16:57:28.713" endtime="20220314 16:57:28.964"/>
</kw>
<kw name="profile.Add Chrome Profile" library="profile">
<doc>-Add a new custom application to GHUB app [For MAC only]</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Adding Chrome Profile...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:28.965" endtime="20220314 16:57:28.966"/>
</kw>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:57:33.989" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:57:28.968" endtime="20220314 16:57:33.989"/>
</kw>
<status status="FAIL" starttime="20220314 16:57:28.968" endtime="20220314 16:57:33.991"/>
</kw>
<msg timestamp="20220314 16:57:33.991" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 16:57:28.967" endtime="20220314 16:57:33.991"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 16:57:33.992" endtime="20220314 16:57:33.992"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:57:33.992" endtime="20220314 16:57:33.992"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:57:33.993" endtime="20220314 16:57:33.993"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:57:33.993" endtime="20220314 16:57:33.993"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:57:33.993" endtime="20220314 16:57:33.993"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 16:57:33.993" endtime="20220314 16:57:33.993"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:57:33.992" endtime="20220314 16:57:33.993"/>
</branch>
<status status="PASS" starttime="20220314 16:57:33.991" endtime="20220314 16:57:33.993"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:57:33.995" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:57:33.995" endtime="20220314 16:57:33.995"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:57:33.996" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:57:33.996" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:57:33.996" endtime="20220314 16:57:33.996"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:57:44.004" level="INFO">Failed to find element with selector: #home-view and attributes:{}</msg>
<msg timestamp="20220314 16:57:44.006" level="FAIL">Failure: Selector "#home-view" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:57:33.996" endtime="20220314 16:57:44.006"/>
</kw>
<status status="FAIL" starttime="20220314 16:57:33.996" endtime="20220314 16:57:44.007"/>
</kw>
<status status="FAIL" starttime="20220314 16:57:33.994" endtime="20220314 16:57:44.008"/>
</kw>
<msg timestamp="20220314 16:57:44.008" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220314 16:57:33.994" endtime="20220314 16:57:44.008"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:57:44.009" endtime="20220314 16:57:44.009"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:57:44.010" endtime="20220314 16:57:44.035"/>
</kw>
<msg timestamp="20220314 16:57:44.035" level="INFO">${back_button_present} = True</msg>
<status status="PASS" starttime="20220314 16:57:44.009" endtime="20220314 16:57:44.035"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:57:44.037" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:57:44.036" endtime="20220314 16:57:44.037"/>
</kw>
<status status="PASS" starttime="20220314 16:57:28.967" endtime="20220314 16:57:44.037"/>
</iter>
<status status="PASS" starttime="20220314 16:57:28.967" endtime="20220314 16:57:44.038"/>
</for>
<status status="PASS" starttime="20220314 16:57:28.966" endtime="20220314 16:57:44.038"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:57:44.041" endtime="20220314 16:57:44.054"/>
</kw>
<msg timestamp="20220314 16:57:44.054" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:57:44.040" endtime="20220314 16:57:44.054"/>
</kw>
<msg timestamp="20220314 16:57:44.054" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:57:44.039" endtime="20220314 16:57:44.054"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:57:44.055" endtime="20220314 16:57:44.055"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${clicked}</var>
<arg>common.Click On Back</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:57:44.057" endtime="20220314 16:57:44.649"/>
</kw>
<status status="PASS" starttime="20220314 16:57:44.056" endtime="20220314 16:57:44.649"/>
</kw>
<msg timestamp="20220314 16:57:44.650" level="INFO">${clicked} = True</msg>
<status status="PASS" starttime="20220314 16:57:44.056" endtime="20220314 16:57:44.650"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clicked}==False</arg>
<arg>common.alerts</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:57:44.651" endtime="20220314 16:57:44.651"/>
</kw>
<status status="PASS" starttime="20220314 16:57:44.038" endtime="20220314 16:57:44.652"/>
</iter>
<iter>
<var name="${index}">1</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:57:45.669" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 16:57:45.671" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:57:44.655" endtime="20220314 16:57:45.671"/>
</kw>
<msg timestamp="20220314 16:57:45.671" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:57:44.654" endtime="20220314 16:57:45.671"/>
</kw>
<msg timestamp="20220314 16:57:45.672" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:57:44.653" endtime="20220314 16:57:45.672"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:57:45.673" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:57:45.673" endtime="20220314 16:57:45.674"/>
</kw>
<status status="PASS" starttime="20220314 16:57:44.652" endtime="20220314 16:57:45.674"/>
</iter>
<status status="PASS" starttime="20220314 16:57:44.038" endtime="20220314 16:57:45.675"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:57:45.677" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:57:45.677" endtime="20220314 16:57:45.677"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:57:45.678" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:57:45.678" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:57:45.678" endtime="20220314 16:57:45.678"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:57:45.679" endtime="20220314 16:57:45.699"/>
</kw>
<status status="PASS" starttime="20220314 16:57:45.678" endtime="20220314 16:57:45.700"/>
</kw>
<status status="PASS" starttime="20220314 16:57:45.676" endtime="20220314 16:57:45.700"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:57:47.723" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:57:45.701" endtime="20220314 16:57:47.725"/>
</kw>
<status status="PASS" starttime="20220314 16:57:45.675" endtime="20220314 16:57:47.726"/>
</kw>
<status status="PASS" starttime="20220314 16:57:28.966" endtime="20220314 16:57:47.726"/>
</kw>
<kw name="home.Click On Appbar Application Name" library="home_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${home_appbar_application_name}</arg>
<arg>wait_timeout=10</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:57:47.731" level="INFO">${words} = ['.appbar-application-name']</msg>
<status status="PASS" starttime="20220314 16:57:47.731" endtime="20220314 16:57:47.731"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:57:47.732" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:57:47.732" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:57:47.732" endtime="20220314 16:57:47.732"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:57:47.734" endtime="20220314 16:57:48.328"/>
</kw>
<status status="PASS" starttime="20220314 16:57:47.733" endtime="20220314 16:57:48.328"/>
</kw>
<status status="PASS" starttime="20220314 16:57:47.729" endtime="20220314 16:57:48.329"/>
</kw>
<status status="PASS" starttime="20220314 16:57:47.728" endtime="20220314 16:57:48.329"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>3</value>
<iter>
<var name="${i}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_chrome_profile_added}</var>
<arg>profile_screen.Is Chrome Profile Added</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="profile_screen.Is Chrome Profile Added" library="profile_screen">
<if>
<branch type="IF" condition="${is_windows}">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${profile_chrome_app_profile_win}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:57:53.356" level="FAIL">Failure: Selector "//div[text()='chrome']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:57:48.335" endtime="20220314 16:57:53.356"/>
</kw>
<status status="FAIL" starttime="20220314 16:57:48.334" endtime="20220314 16:57:53.358"/>
</branch>
<branch type="ELSE">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${profile_chrome_app_profile_mac}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220314 16:57:53.359" endtime="20220314 16:57:53.359"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${status} is ${False}</arg>
<arg>Expect Element</arg>
<arg>selector=${profile_chrome_app_profile_mac_fallback}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20220314 16:57:53.360" endtime="20220314 16:57:53.360"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:57:53.358" endtime="20220314 16:57:53.361"/>
</branch>
<status status="FAIL" starttime="20220314 16:57:48.334" endtime="20220314 16:57:53.361"/>
</if>
<status status="FAIL" starttime="20220314 16:57:48.333" endtime="20220314 16:57:53.363"/>
</kw>
<msg timestamp="20220314 16:57:53.364" level="INFO">${is_chrome_profile_added} = False</msg>
<status status="PASS" starttime="20220314 16:57:48.331" endtime="20220314 16:57:53.364"/>
</kw>
<if>
<branch type="IF" condition="${is_chrome_profile_added}==True">
<kw name="Log To Console" library="BuiltIn">
<arg>Chrome Profile Added.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20220314 16:57:53.365" endtime="20220314 16:57:53.365"/>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<status status="NOT RUN" starttime="20220314 16:57:53.366" endtime="20220314 16:57:53.366"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:57:53.364" endtime="20220314 16:57:53.366"/>
</branch>
<branch type="ELSE">
<if>
<branch type="IF" condition="${i} &gt;= 1">
<kw name="common.Restart GHUB" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:57:53.368" endtime="20220314 16:57:53.368"/>
</kw>
<kw name="home.Click On Appbar Application Name" library="home_screen">
<status status="NOT RUN" starttime="20220314 16:57:53.369" endtime="20220314 16:57:53.369"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:57:53.367" endtime="20220314 16:57:53.369"/>
</branch>
<status status="PASS" starttime="20220314 16:57:53.367" endtime="20220314 16:57:53.369"/>
</if>
<kw name="games_applications.Click On Add Application" library="games_and_applications_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${games_applications_add_application}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:57:53.372" level="INFO">${words} = ['.add-application']</msg>
<status status="PASS" starttime="20220314 16:57:53.371" endtime="20220314 16:57:53.372"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:57:53.372" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:57:53.373" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:57:53.372" endtime="20220314 16:57:53.373"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:57:53.373" endtime="20220314 16:57:53.959"/>
</kw>
<status status="PASS" starttime="20220314 16:57:53.373" endtime="20220314 16:57:53.959"/>
</kw>
<status status="PASS" starttime="20220314 16:57:53.371" endtime="20220314 16:57:53.959"/>
</kw>
<status status="PASS" starttime="20220314 16:57:53.370" endtime="20220314 16:57:53.959"/>
</kw>
<kw name="games_and_apps.Add Application" library="games_and_applications">
<arg>app_path_mac=${app_path_mac}</arg>
<arg>app_path_win=${app_path_win}</arg>
<kw name="Add Application On Lghub" library="tools.python.mindstorm.process">
<arg>${app_path_mac}</arg>
<arg>${app_path_win}</arg>
<msg timestamp="20220314 16:57:56.133" level="INFO">['return']
['return']</msg>
<status status="PASS" starttime="20220314 16:57:53.960" endtime="20220314 16:57:56.134"/>
</kw>
<status status="PASS" starttime="20220314 16:57:53.959" endtime="20220314 16:57:56.134"/>
</kw>
<status status="PASS" starttime="20220314 16:57:53.367" endtime="20220314 16:57:56.134"/>
</branch>
<status status="PASS" starttime="20220314 16:57:53.364" endtime="20220314 16:57:56.134"/>
</if>
<status status="PASS" starttime="20220314 16:57:48.330" endtime="20220314 16:57:56.135"/>
</iter>
<iter>
<var name="${i}">1</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_chrome_profile_added}</var>
<arg>profile_screen.Is Chrome Profile Added</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="profile_screen.Is Chrome Profile Added" library="profile_screen">
<if>
<branch type="IF" condition="${is_windows}">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${profile_chrome_app_profile_win}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:57:56.139" endtime="20220314 16:57:56.222"/>
</kw>
<status status="PASS" starttime="20220314 16:57:56.138" endtime="20220314 16:57:56.223"/>
</branch>
<branch type="ELSE">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${profile_chrome_app_profile_mac}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220314 16:57:56.223" endtime="20220314 16:57:56.223"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${status} is ${False}</arg>
<arg>Expect Element</arg>
<arg>selector=${profile_chrome_app_profile_mac_fallback}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20220314 16:57:56.224" endtime="20220314 16:57:56.224"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:57:56.223" endtime="20220314 16:57:56.224"/>
</branch>
<status status="PASS" starttime="20220314 16:57:56.138" endtime="20220314 16:57:56.224"/>
</if>
<status status="PASS" starttime="20220314 16:57:56.137" endtime="20220314 16:57:56.224"/>
</kw>
<msg timestamp="20220314 16:57:56.224" level="INFO">${is_chrome_profile_added} = True</msg>
<status status="PASS" starttime="20220314 16:57:56.136" endtime="20220314 16:57:56.224"/>
</kw>
<if>
<branch type="IF" condition="${is_chrome_profile_added}==True">
<kw name="Log To Console" library="BuiltIn">
<arg>Chrome Profile Added.</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:57:56.225" endtime="20220314 16:57:56.225"/>
</kw>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20220314 16:57:56.225" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:57:56.225" endtime="20220314 16:57:56.225"/>
</kw>
<status status="PASS" starttime="20220314 16:57:56.224" endtime="20220314 16:57:56.225"/>
</branch>
<branch type="ELSE">
<if>
<branch type="IF" condition="${i} &gt;= 1">
<kw name="common.Restart GHUB" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:57:56.226" endtime="20220314 16:57:56.226"/>
</kw>
<kw name="home.Click On Appbar Application Name" library="home_screen">
<status status="NOT RUN" starttime="20220314 16:57:56.226" endtime="20220314 16:57:56.226"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:57:56.226" endtime="20220314 16:57:56.226"/>
</branch>
<status status="NOT RUN" starttime="20220314 16:57:56.226" endtime="20220314 16:57:56.226"/>
</if>
<kw name="games_applications.Click On Add Application" library="games_and_applications_screen">
<status status="NOT RUN" starttime="20220314 16:57:56.227" endtime="20220314 16:57:56.227"/>
</kw>
<kw name="games_and_apps.Add Application" library="games_and_applications">
<arg>app_path_mac=${app_path_mac}</arg>
<arg>app_path_win=${app_path_win}</arg>
<status status="NOT RUN" starttime="20220314 16:57:56.227" endtime="20220314 16:57:56.227"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:57:56.226" endtime="20220314 16:57:56.227"/>
</branch>
<status status="PASS" starttime="20220314 16:57:56.224" endtime="20220314 16:57:56.227"/>
</if>
<status status="PASS" starttime="20220314 16:57:56.135" endtime="20220314 16:57:56.227"/>
</iter>
<status status="PASS" starttime="20220314 16:57:48.330" endtime="20220314 16:57:56.227"/>
</for>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_chrome_profile_added}</var>
<arg>profile_screen.Is Chrome Profile Added</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="profile_screen.Is Chrome Profile Added" library="profile_screen">
<if>
<branch type="IF" condition="${is_windows}">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${profile_chrome_app_profile_win}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:57:56.229" endtime="20220314 16:57:56.235"/>
</kw>
<status status="PASS" starttime="20220314 16:57:56.228" endtime="20220314 16:57:56.235"/>
</branch>
<branch type="ELSE">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${profile_chrome_app_profile_mac}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220314 16:57:56.236" endtime="20220314 16:57:56.236"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${status} is ${False}</arg>
<arg>Expect Element</arg>
<arg>selector=${profile_chrome_app_profile_mac_fallback}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20220314 16:57:56.236" endtime="20220314 16:57:56.236"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:57:56.235" endtime="20220314 16:57:56.237"/>
</branch>
<status status="PASS" starttime="20220314 16:57:56.228" endtime="20220314 16:57:56.237"/>
</if>
<status status="PASS" starttime="20220314 16:57:56.228" endtime="20220314 16:57:56.237"/>
</kw>
<msg timestamp="20220314 16:57:56.237" level="INFO">${is_chrome_profile_added} = True</msg>
<status status="PASS" starttime="20220314 16:57:56.228" endtime="20220314 16:57:56.237"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${is_chrome_profile_added}</arg>
<arg>common.Click On Back</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:57:56.238" endtime="20220314 16:57:56.812"/>
</kw>
<status status="PASS" starttime="20220314 16:57:56.238" endtime="20220314 16:57:56.812"/>
</kw>
<status status="PASS" starttime="20220314 16:57:56.237" endtime="20220314 16:57:56.813"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${is_chrome_profile_added}</arg>
<arg>Return From Keyword</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20220314 16:57:56.815" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 16:57:56.815" endtime="20220314 16:57:56.816"/>
</kw>
<status status="PASS" starttime="20220314 16:57:56.814" endtime="20220314 16:57:56.817"/>
</kw>
<status status="PASS" starttime="20220314 16:57:28.965" endtime="20220314 16:57:56.817"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:58:01.820" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220314 16:57:56.818" endtime="20220314 16:58:01.820"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${header_name}</var>
<arg>${is_windows}==True</arg>
<arg>CHROME</arg>
<arg>GOOGLE CHROME</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20220314 16:58:01.822" level="INFO">${header_name} = CHROME</msg>
<status status="PASS" starttime="20220314 16:58:01.821" endtime="20220314 16:58:01.822"/>
</kw>
<kw name="home.Open Device Configuration" library="home_screen">
<arg>${device['displayName']}</arg>
<doc>Click on the device to open device configuration and if device introduction page opens then skip it.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device Home Screen Loaded</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device Home Screen Loaded" library="home_screen">
<arg>${device_name}</arg>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:58:06.857" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:58:01.842" endtime="20220314 16:58:06.858"/>
</kw>
<status status="FAIL" starttime="20220314 16:58:01.842" endtime="20220314 16:58:06.861"/>
</kw>
<msg timestamp="20220314 16:58:06.861" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 16:58:01.841" endtime="20220314 16:58:06.861"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 16:58:06.862" endtime="20220314 16:58:06.862"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:58:06.863" endtime="20220314 16:58:06.863"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:58:06.863" endtime="20220314 16:58:06.863"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:58:06.864" endtime="20220314 16:58:06.864"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:58:06.864" endtime="20220314 16:58:06.864"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 16:58:06.865" endtime="20220314 16:58:06.865"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:58:06.861" endtime="20220314 16:58:06.865"/>
</branch>
<status status="PASS" starttime="20220314 16:58:06.861" endtime="20220314 16:58:06.865"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:58:06.867" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:58:06.867" endtime="20220314 16:58:06.867"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:58:06.868" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:58:06.868" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:58:06.868" endtime="20220314 16:58:06.868"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:58:06.869" endtime="20220314 16:58:06.884"/>
</kw>
<status status="PASS" starttime="20220314 16:58:06.868" endtime="20220314 16:58:06.884"/>
</kw>
<status status="PASS" starttime="20220314 16:58:06.866" endtime="20220314 16:58:06.885"/>
</kw>
<msg timestamp="20220314 16:58:06.885" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220314 16:58:06.865" endtime="20220314 16:58:06.885"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:58:06.887" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:58:06.886" endtime="20220314 16:58:06.888"/>
</kw>
<status status="PASS" starttime="20220314 16:58:01.841" endtime="20220314 16:58:06.888"/>
</iter>
<status status="PASS" starttime="20220314 16:58:01.841" endtime="20220314 16:58:06.888"/>
</for>
<status status="PASS" starttime="20220314 16:58:01.841" endtime="20220314 16:58:06.888"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:58:07.902" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 16:58:07.903" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:58:06.891" endtime="20220314 16:58:07.903"/>
</kw>
<msg timestamp="20220314 16:58:07.903" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:58:06.891" endtime="20220314 16:58:07.903"/>
</kw>
<msg timestamp="20220314 16:58:07.904" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:58:06.890" endtime="20220314 16:58:07.904"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:58:07.904" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:58:07.904" endtime="20220314 16:58:07.905"/>
</kw>
<status status="PASS" starttime="20220314 16:58:06.889" endtime="20220314 16:58:07.905"/>
</iter>
<status status="PASS" starttime="20220314 16:58:06.888" endtime="20220314 16:58:07.905"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:58:07.907" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:58:07.907" endtime="20220314 16:58:07.907"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:58:07.908" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:58:07.908" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:58:07.907" endtime="20220314 16:58:07.908"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:58:07.908" endtime="20220314 16:58:07.923"/>
</kw>
<status status="PASS" starttime="20220314 16:58:07.908" endtime="20220314 16:58:07.923"/>
</kw>
<status status="PASS" starttime="20220314 16:58:07.906" endtime="20220314 16:58:07.923"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:58:09.936" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:58:07.924" endtime="20220314 16:58:09.938"/>
</kw>
<status status="PASS" starttime="20220314 16:58:07.906" endtime="20220314 16:58:09.938"/>
</kw>
<status status="PASS" starttime="20220314 16:58:01.840" endtime="20220314 16:58:09.938"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:58:11.955" level="INFO">Failed to find element with selector: .left-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:58:09.944" endtime="20220314 16:58:11.957"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:58:11.970" level="FAIL">Failure: Selector ".left-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 16:58:11.959" endtime="20220314 16:58:11.970"/>
</kw>
<status status="FAIL" starttime="20220314 16:58:09.943" endtime="20220314 16:58:11.971"/>
</kw>
<msg timestamp="20220314 16:58:11.971" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 16:58:09.943" endtime="20220314 16:58:11.971"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:58:11.972" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:58:11.972" endtime="20220314 16:58:11.972"/>
</kw>
<status status="PASS" starttime="20220314 16:58:09.942" endtime="20220314 16:58:11.972"/>
</iter>
<status status="PASS" starttime="20220314 16:58:09.941" endtime="20220314 16:58:11.972"/>
</for>
<status status="PASS" starttime="20220314 16:58:09.941" endtime="20220314 16:58:11.973"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:58:13.985" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:58:11.974" endtime="20220314 16:58:13.987"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:58:14.003" level="FAIL">Failure: Selector ".right-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 16:58:13.988" endtime="20220314 16:58:14.003"/>
</kw>
<status status="FAIL" starttime="20220314 16:58:11.973" endtime="20220314 16:58:14.004"/>
</kw>
<msg timestamp="20220314 16:58:14.004" level="INFO">${right_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 16:58:11.973" endtime="20220314 16:58:14.004"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:58:14.005" endtime="20220314 16:58:14.040"/>
</kw>
<msg timestamp="20220314 16:58:14.040" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220314 16:58:14.005" endtime="20220314 16:58:14.040"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:58:14.041" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:58:14.040" endtime="20220314 16:58:14.041"/>
</kw>
<status status="PASS" starttime="20220314 16:58:11.973" endtime="20220314 16:58:14.041"/>
</iter>
<status status="PASS" starttime="20220314 16:58:11.973" endtime="20220314 16:58:14.041"/>
</for>
<status status="PASS" starttime="20220314 16:58:09.939" endtime="20220314 16:58:14.041"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_device_in_active_state}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:58:14.043" endtime="20220314 16:58:14.076"/>
</kw>
<status status="PASS" starttime="20220314 16:58:14.042" endtime="20220314 16:58:14.076"/>
</kw>
<msg timestamp="20220314 16:58:14.077" level="INFO">${is_device_in_active_state} = True</msg>
<status status="PASS" starttime="20220314 16:58:14.042" endtime="20220314 16:58:14.077"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${is_device_in_active_state} is ${True}</arg>
<arg>${True}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 16:58:14.078" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 16:58:14.077" endtime="20220314 16:58:14.078"/>
</kw>
<status status="PASS" starttime="20220314 16:58:01.840" endtime="20220314 16:58:14.078"/>
</kw>
<msg timestamp="20220314 16:58:14.078" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:58:01.838" endtime="20220314 16:58:14.078"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'False'">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>${device_name} not loaded in GHub.</arg>
<status status="NOT RUN" starttime="20220314 16:58:14.079" endtime="20220314 16:58:14.079"/>
</kw>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220314 16:58:14.080" endtime="20220314 16:58:14.080"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:58:14.079" endtime="20220314 16:58:14.080"/>
</branch>
<status status="PASS" starttime="20220314 16:58:14.079" endtime="20220314 16:58:14.080"/>
</if>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:58:14.080" endtime="20220314 16:58:14.715"/>
</kw>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:58:16.769" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220314 16:58:16.770" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:58:14.719" endtime="20220314 16:58:16.771"/>
</kw>
<status status="PASS" starttime="20220314 16:58:14.718" endtime="20220314 16:58:16.771"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:58:18.838" level="FAIL">Failure: Selector "//*[@id="color-variant"]/button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:58:16.773" endtime="20220314 16:58:18.838"/>
</kw>
<status status="PASS" starttime="20220314 16:58:16.772" endtime="20220314 16:58:18.838"/>
</kw>
<status status="PASS" starttime="20220314 16:58:14.717" endtime="20220314 16:58:18.839"/>
</kw>
<kw name="device_view.Handle Got It Popup" library="device_main_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${got_it_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_got_it_button}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_got_it_button}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:58:23.866" level="FAIL">Failure: Selector "//div[@class='coach-mark']/button[text()='GOT IT']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:58:18.843" endtime="20220314 16:58:23.866"/>
</kw>
<msg timestamp="20220314 16:58:23.866" level="INFO">${got_it_button_present} = False</msg>
<status status="PASS" starttime="20220314 16:58:18.842" endtime="20220314 16:58:23.867"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${got_it_button_present} is ${False}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 16:58:23.869" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 16:58:23.868" endtime="20220314 16:58:23.869"/>
</kw>
<status status="PASS" starttime="20220314 16:58:18.841" endtime="20220314 16:58:23.870"/>
</kw>
<status status="PASS" starttime="20220314 16:58:01.824" endtime="20220314 16:58:23.870"/>
</kw>
<kw name="device_view.Click On Sensitivity(DPI) Tab" library="device_main_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${device_view_sensitivity_tab}</arg>
<arg>10</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:58:23.875" level="INFO">${words} = ['.icon-wrapper.dpi']</msg>
<status status="PASS" starttime="20220314 16:58:23.874" endtime="20220314 16:58:23.875"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:58:23.876" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:58:23.876" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:58:23.876" endtime="20220314 16:58:23.876"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:58:23.878" endtime="20220314 16:58:24.486"/>
</kw>
<status status="PASS" starttime="20220314 16:58:23.877" endtime="20220314 16:58:24.486"/>
</kw>
<status status="PASS" starttime="20220314 16:58:23.873" endtime="20220314 16:58:24.488"/>
</kw>
<status status="PASS" starttime="20220314 16:58:23.872" endtime="20220314 16:58:24.488"/>
</kw>
<kw name="sensitivity_dpi.Click On Restore Default Settings" library="sensitivity_dpi_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${sensitivity_dpi_restore_default}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:58:24.492" level="INFO">${words} = ['.panel-button', 'text=RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:58:24.492" endtime="20220314 16:58:24.492"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:58:24.494" level="INFO">Length is 2</msg>
<msg timestamp="20220314 16:58:24.494" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20220314 16:58:24.493" endtime="20220314 16:58:24.494"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="__Click UI Based On Attribute__" library="common_keywords_kragle">
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<doc>Internal fuction to do additional check on 'Click UI'. Not to be used anywhere else.</doc>
<kw name="Split String" library="String">
<var>${sub_words}</var>
<arg>${word}</arg>
<arg>=</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:58:24.495" level="INFO">${sub_words} = ['text', 'RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:58:24.495" endtime="20220314 16:58:24.495"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='text'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:58:24.495" endtime="20220314 16:58:25.080"/>
</kw>
<status status="PASS" starttime="20220314 16:58:24.495" endtime="20220314 16:58:25.080"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='innerText'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>innerText=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:58:25.082" endtime="20220314 16:58:25.083"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='value'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>value=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:58:25.084" endtime="20220314 16:58:25.084"/>
</kw>
<status status="PASS" starttime="20220314 16:58:24.494" endtime="20220314 16:58:25.085"/>
</kw>
<status status="PASS" starttime="20220314 16:58:24.494" endtime="20220314 16:58:25.085"/>
</kw>
<status status="PASS" starttime="20220314 16:58:24.492" endtime="20220314 16:58:25.085"/>
</kw>
<status status="PASS" starttime="20220314 16:58:24.490" endtime="20220314 16:58:25.085"/>
</kw>
<kw name="sensitivity_dpi.Select DPI By Level" library="sensitivity_dpi_screen">
<arg>1</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:58:25.086" endtime="20220314 16:58:25.666"/>
</kw>
<status status="PASS" starttime="20220314 16:58:25.086" endtime="20220314 16:58:25.666"/>
</kw>
<kw name="sensitivity_dpi.Get Current DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${dpi_current}</var>
<arg>selector=${sensitivity_dpi_speed_selected}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:58:25.696" level="INFO">${dpi_current} = 400</msg>
<status status="PASS" starttime="20220314 16:58:25.670" endtime="20220314 16:58:25.696"/>
</kw>
<msg timestamp="20220314 16:58:25.696" level="INFO">${GUI_dpi} = 400</msg>
<status status="PASS" starttime="20220314 16:58:25.668" endtime="20220314 16:58:25.696"/>
</kw>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>1</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:58:25.699" endtime="20220314 16:58:26.272"/>
</kw>
<status status="PASS" starttime="20220314 16:58:25.698" endtime="20220314 16:58:26.273"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_report_rate_1}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:58:26.303" level="INFO">${report_rate} = 1000</msg>
<status status="PASS" starttime="20220314 16:58:26.276" endtime="20220314 16:58:26.303"/>
</kw>
<msg timestamp="20220314 16:58:26.304" level="INFO">${GUI_report_rate_1} = 1000</msg>
<status status="PASS" starttime="20220314 16:58:26.274" endtime="20220314 16:58:26.304"/>
</kw>
<kw name="device_View.Select Profile From Dropdown With Header Name" library="device_main_screen">
<arg>${header_name}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${Status}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_profile_dropdown_item}</arg>
<arg>text=Default</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_profile_dropdown_item}</arg>
<arg>text=Default</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:58:27.371" level="INFO">Failed to find element with selector: .dropdown-item and attributes:{'text': 'Default'}</msg>
<msg timestamp="20220314 16:58:27.372" level="FAIL">Failure: Selector ".dropdown-item" with attribute(s) "{'text': 'Default'}" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:58:26.308" endtime="20220314 16:58:27.372"/>
</kw>
<msg timestamp="20220314 16:58:27.373" level="INFO">${Status} = False</msg>
<status status="PASS" starttime="20220314 16:58:26.307" endtime="20220314 16:58:27.373"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${Status} is ${False}</arg>
<arg>Click</arg>
<arg>selector=${device_view_profile_dropdown}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_view_profile_dropdown}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:58:27.376" endtime="20220314 16:58:27.946"/>
</kw>
<status status="PASS" starttime="20220314 16:58:27.374" endtime="20220314 16:58:27.946"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_view_profile_header_name}</arg>
<arg>innerText=${header_name}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:58:27.948" endtime="20220314 16:58:28.569"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>3</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:58:31.571" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20220314 16:58:28.570" endtime="20220314 16:58:31.571"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.Select Yes On a Alert</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Select Yes On a Alert" library="common_keywords_kragle">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:58:35.776" level="INFO">Failed to find element with selector: .action-button and attributes:{'innerText': 'YES'}</msg>
<msg timestamp="20220314 16:58:35.779" level="FAIL">Failure: Selector ".action-button" with attribute(s) "{'innerText': 'YES'}" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:58:31.576" endtime="20220314 16:58:35.779"/>
</kw>
<status status="PASS" starttime="20220314 16:58:31.576" endtime="20220314 16:58:35.780"/>
</kw>
<status status="PASS" starttime="20220314 16:58:31.574" endtime="20220314 16:58:35.781"/>
</kw>
<status status="PASS" starttime="20220314 16:58:31.573" endtime="20220314 16:58:35.781"/>
</kw>
<status status="PASS" starttime="20220314 16:58:26.305" endtime="20220314 16:58:35.781"/>
</kw>
<kw name="sensitivity_dpi.Select DPI By Level" library="sensitivity_dpi_screen">
<arg>4</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:58:35.783" endtime="20220314 16:58:36.364"/>
</kw>
<status status="PASS" starttime="20220314 16:58:35.782" endtime="20220314 16:58:36.365"/>
</kw>
<kw name="sensitivity_dpi.Get Current DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi2}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${dpi_current}</var>
<arg>selector=${sensitivity_dpi_speed_selected}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:58:36.396" level="INFO">${dpi_current} = 3200</msg>
<status status="PASS" starttime="20220314 16:58:36.368" endtime="20220314 16:58:36.396"/>
</kw>
<msg timestamp="20220314 16:58:36.397" level="INFO">${GUI_dpi2} = 3200</msg>
<status status="PASS" starttime="20220314 16:58:36.367" endtime="20220314 16:58:36.397"/>
</kw>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>4</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:58:36.399" endtime="20220314 16:58:36.971"/>
</kw>
<status status="PASS" starttime="20220314 16:58:36.398" endtime="20220314 16:58:36.971"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_report_rate_2}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 16:58:36.984" level="INFO">${report_rate} = 125</msg>
<status status="PASS" starttime="20220314 16:58:36.973" endtime="20220314 16:58:36.984"/>
</kw>
<msg timestamp="20220314 16:58:36.984" level="INFO">${GUI_report_rate_2} = 125</msg>
<status status="PASS" starttime="20220314 16:58:36.972" endtime="20220314 16:58:36.984"/>
</kw>
<kw name="device_View.Select Profile From Dropdown With Header Name" library="device_main_screen">
<arg>DESKTOP</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${Status}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_profile_dropdown_item}</arg>
<arg>text=Default</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_profile_dropdown_item}</arg>
<arg>text=Default</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:58:38.015" level="INFO">Failed to find element with selector: .dropdown-item and attributes:{'text': 'Default'}</msg>
<msg timestamp="20220314 16:58:38.016" level="FAIL">Failure: Selector ".dropdown-item" with attribute(s) "{'text': 'Default'}" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:58:36.986" endtime="20220314 16:58:38.016"/>
</kw>
<msg timestamp="20220314 16:58:38.017" level="INFO">${Status} = False</msg>
<status status="PASS" starttime="20220314 16:58:36.986" endtime="20220314 16:58:38.017"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${Status} is ${False}</arg>
<arg>Click</arg>
<arg>selector=${device_view_profile_dropdown}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_view_profile_dropdown}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:58:38.020" endtime="20220314 16:58:38.583"/>
</kw>
<status status="PASS" starttime="20220314 16:58:38.019" endtime="20220314 16:58:38.583"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${device_view_profile_header_name}</arg>
<arg>innerText=${header_name}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:58:38.585" endtime="20220314 16:58:39.199"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>3</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:58:42.202" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20220314 16:58:39.200" endtime="20220314 16:58:42.202"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.Select Yes On a Alert</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Select Yes On a Alert" library="common_keywords_kragle">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:58:46.431" level="INFO">Failed to find element with selector: .action-button and attributes:{'innerText': 'YES'}</msg>
<msg timestamp="20220314 16:58:46.433" level="FAIL">Failure: Selector ".action-button" with attribute(s) "{'innerText': 'YES'}" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:58:42.208" endtime="20220314 16:58:46.434"/>
</kw>
<status status="PASS" starttime="20220314 16:58:42.207" endtime="20220314 16:58:46.434"/>
</kw>
<status status="PASS" starttime="20220314 16:58:42.206" endtime="20220314 16:58:46.435"/>
</kw>
<status status="PASS" starttime="20220314 16:58:42.204" endtime="20220314 16:58:46.435"/>
</kw>
<status status="PASS" starttime="20220314 16:58:36.985" endtime="20220314 16:58:46.435"/>
</kw>
<kw name="sensitivity_dpi.Verify DPI Speed Is Selected" library="sensitivity_dpi_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_speed_selected}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:58:46.437" endtime="20220314 16:58:46.461"/>
</kw>
<status status="PASS" starttime="20220314 16:58:46.436" endtime="20220314 16:58:46.461"/>
</kw>
<kw name="backend.Verify DPI Of Device" library="backend">
<arg>${GUI_dpi}</arg>
<arg>${device['displayName']}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:58:46.479" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:58:46.479" endtime="20220314 16:58:46.479"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:58:47.484" level="INFO">16:58:46.484232: {"msgId": "c56a6751-e714-4f47-a325-17f8108d05b7", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_PRIMARY": "PRIMARY", "ZONE_BRANDING": "LOGO"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:58:47.485" level="INFO">${res} =  {"msgId": "c56a6751-e714-4f47-a325-17f8108d05b7", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:58:46.479" endtime="20220314 16:58:47.485"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:58:47.488" level="INFO">${res} = {'msgId': 'c56a6751-e714-4f47-a325-17f8108d05b7', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:58:47.486" endtime="20220314 16:58:47.488"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:58:47.503" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:58:47.489" endtime="20220314 16:58:47.503"/>
</kw>
<msg timestamp="20220314 16:58:47.503" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:58:47.489" endtime="20220314 16:58:47.503"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:58:47.685" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:58:47.505" endtime="20220314 16:58:47.685"/>
</kw>
<msg timestamp="20220314 16:58:47.701" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:58:47.505" endtime="20220314 16:58:47.701"/>
</kw>
<msg timestamp="20220314 16:58:47.702" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:58:47.504" endtime="20220314 16:58:47.702"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:58:47.857" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:58:47.704" endtime="20220314 16:58:47.857"/>
</kw>
<msg timestamp="20220314 16:58:47.858" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:58:47.703" endtime="20220314 16:58:47.858"/>
</kw>
<msg timestamp="20220314 16:58:47.858" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:58:47.702" endtime="20220314 16:58:47.858"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:58:48.091" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g9_m1_shifted', 'g903hero_g6_m1', 'g903hero_g3_m1_shifted'...</msg>
<status status="PASS" starttime="20220314 16:58:47.860" endtime="20220314 16:58:48.091"/>
</kw>
<msg timestamp="20220314 16:58:48.092" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g9_m1_shifted', 'g903hero_g6_m1', 'g903hero_g3_m1_shifted'...</msg>
<status status="PASS" starttime="20220314 16:58:47.859" endtime="20220314 16:58:48.092"/>
</kw>
<msg timestamp="20220314 16:58:48.093" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:58:47.859" endtime="20220314 16:58:48.093"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:58:48.093" endtime="20220314 16:58:48.093"/>
</kw>
<status status="PASS" starttime="20220314 16:58:47.858" endtime="20220314 16:58:48.093"/>
</branch>
<status status="PASS" starttime="20220314 16:58:47.858" endtime="20220314 16:58:48.093"/>
</if>
<status status="PASS" starttime="20220314 16:58:47.702" endtime="20220314 16:58:48.093"/>
</iter>
<status status="PASS" starttime="20220314 16:58:47.702" endtime="20220314 16:58:48.094"/>
</for>
<msg timestamp="20220314 16:58:48.094" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:58:46.479" endtime="20220314 16:58:48.094"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:58:48.095" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/dpi'}</msg>
<status status="PASS" starttime="20220314 16:58:48.094" endtime="20220314 16:58:48.095"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:58:48.095" endtime="20220314 16:58:48.096"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:58:49.097" level="INFO">16:58:48.095598: {"msgId": "1044d09a-1742-408a-886d-c3dd2cc536e9", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.Dpi.State", "deviceId": "dev00000000", "dpi": 400, "dpiIndex": 1, "shifted": false}}</msg>
<msg timestamp="20220314 16:58:49.097" level="INFO">${response} =  {"msgId": "1044d09a-1742-408a-886d-c3dd2cc536e9", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapi...</msg>
<status status="PASS" starttime="20220314 16:58:48.096" endtime="20220314 16:58:49.097"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:58:49.099" level="INFO">${response} = {'msgId': '1044d09a-1742-408a-886d-c3dd2cc536e9', 'verb': 'GET', 'path': '/mouse/dev00000000/dpi', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis...</msg>
<status status="PASS" starttime="20220314 16:58:49.098" endtime="20220314 16:58:49.099"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:58:49.118" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:58:49.101" endtime="20220314 16:58:49.118"/>
</kw>
<msg timestamp="20220314 16:58:49.118" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:58:49.100" endtime="20220314 16:58:49.118"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:58:49.132" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:58:49.119" endtime="20220314 16:58:49.132"/>
</kw>
<msg timestamp="20220314 16:58:49.132" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:58:49.119" endtime="20220314 16:58:49.132"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:58:49.133" endtime="20220314 16:58:49.133"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:58:49.133" endtime="20220314 16:58:49.133"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:58:49.134" endtime="20220314 16:58:49.134"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:58:49.134" endtime="20220314 16:58:49.134"/>
</kw>
<status status="PASS" starttime="20220314 16:58:49.100" endtime="20220314 16:58:49.134"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_dpi}</var>
<arg>${response}</arg>
<arg>dpi</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:58:49.149" level="INFO">${result} = [400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400]</msg>
<status status="PASS" starttime="20220314 16:58:49.136" endtime="20220314 16:58:49.149"/>
</kw>
<msg timestamp="20220314 16:58:49.149" level="INFO">${result} = [400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400]</msg>
<status status="PASS" starttime="20220314 16:58:49.135" endtime="20220314 16:58:49.149"/>
</kw>
<msg timestamp="20220314 16:58:49.149" level="INFO">${backend_dpi} = 400</msg>
<status status="PASS" starttime="20220314 16:58:49.135" endtime="20220314 16:58:49.149"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_dpi}</arg>
<arg>${backend_dpi}</arg>
<arg>The expected dpi value (${expected_dpi}) and actual value from backend (${backend_dpi}) is different</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:58:49.150" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:58:49.150" endtime="20220314 16:58:49.150"/>
</kw>
<status status="PASS" starttime="20220314 16:58:46.462" endtime="20220314 16:58:49.150"/>
</kw>
<kw name="backend.Verify Report Rate" library="backend">
<arg>${device['displayName']}</arg>
<arg>${GUI_report_rate_1}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:58:49.158" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:58:49.158" endtime="20220314 16:58:49.158"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:58:50.164" level="INFO">16:58:49.163677: {"msgId": "8dd22912-5ff6-489f-9e91-13cb6856d8a2", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_PRIMARY": "PRIMARY", "ZONE_BRANDING": "LOGO"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:58:50.165" level="INFO">${res} =  {"msgId": "8dd22912-5ff6-489f-9e91-13cb6856d8a2", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:58:49.159" endtime="20220314 16:58:50.165"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:58:50.168" level="INFO">${res} = {'msgId': '8dd22912-5ff6-489f-9e91-13cb6856d8a2', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:58:50.167" endtime="20220314 16:58:50.168"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:58:50.229" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:58:50.170" endtime="20220314 16:58:50.229"/>
</kw>
<msg timestamp="20220314 16:58:50.230" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:58:50.169" endtime="20220314 16:58:50.230"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:58:50.409" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:58:50.231" endtime="20220314 16:58:50.409"/>
</kw>
<msg timestamp="20220314 16:58:50.425" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:58:50.231" endtime="20220314 16:58:50.425"/>
</kw>
<msg timestamp="20220314 16:58:50.425" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:58:50.230" endtime="20220314 16:58:50.425"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:58:50.592" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:58:50.427" endtime="20220314 16:58:50.592"/>
</kw>
<msg timestamp="20220314 16:58:50.593" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:58:50.427" endtime="20220314 16:58:50.593"/>
</kw>
<msg timestamp="20220314 16:58:50.593" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:58:50.426" endtime="20220314 16:58:50.593"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:58:50.823" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g9_m1_shifted', 'g903hero_g6_m1', 'g903hero_g3_m1_shifted'...</msg>
<status status="PASS" starttime="20220314 16:58:50.595" endtime="20220314 16:58:50.823"/>
</kw>
<msg timestamp="20220314 16:58:50.824" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g9_m1_shifted', 'g903hero_g6_m1', 'g903hero_g3_m1_shifted'...</msg>
<status status="PASS" starttime="20220314 16:58:50.594" endtime="20220314 16:58:50.824"/>
</kw>
<msg timestamp="20220314 16:58:50.824" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:58:50.593" endtime="20220314 16:58:50.824"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:58:50.825" endtime="20220314 16:58:50.825"/>
</kw>
<status status="PASS" starttime="20220314 16:58:50.593" endtime="20220314 16:58:50.825"/>
</branch>
<status status="PASS" starttime="20220314 16:58:50.593" endtime="20220314 16:58:50.825"/>
</if>
<status status="PASS" starttime="20220314 16:58:50.426" endtime="20220314 16:58:50.825"/>
</iter>
<status status="PASS" starttime="20220314 16:58:50.426" endtime="20220314 16:58:50.825"/>
</for>
<msg timestamp="20220314 16:58:50.825" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:58:49.157" endtime="20220314 16:58:50.825"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:58:50.826" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/report_rate'}</msg>
<status status="PASS" starttime="20220314 16:58:50.826" endtime="20220314 16:58:50.826"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:58:50.827" endtime="20220314 16:58:50.831"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:58:51.831" level="INFO">16:58:50.830038: {"msgId": "f49d36ad-2462-4f14-bb3d-e762b2025c56", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.ReportRate", "value": 1000}}</msg>
<msg timestamp="20220314 16:58:51.831" level="INFO">${response} =  {"msgId": "f49d36ad-2462-4f14-bb3d-e762b2025c56", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.g...</msg>
<status status="PASS" starttime="20220314 16:58:50.831" endtime="20220314 16:58:51.832"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:58:51.834" level="INFO">${response} = {'msgId': 'f49d36ad-2462-4f14-bb3d-e762b2025c56', 'verb': 'GET', 'path': '/mouse/dev00000000/report_rate', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.go...</msg>
<status status="PASS" starttime="20220314 16:58:51.833" endtime="20220314 16:58:51.834"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:58:51.850" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:58:51.837" endtime="20220314 16:58:51.850"/>
</kw>
<msg timestamp="20220314 16:58:51.850" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:58:51.837" endtime="20220314 16:58:51.850"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:58:51.864" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:58:51.851" endtime="20220314 16:58:51.864"/>
</kw>
<msg timestamp="20220314 16:58:51.865" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:58:51.851" endtime="20220314 16:58:51.865"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:58:51.865" endtime="20220314 16:58:51.865"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:58:51.865" endtime="20220314 16:58:51.866"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:58:51.866" endtime="20220314 16:58:51.866"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:58:51.866" endtime="20220314 16:58:51.867"/>
</kw>
<status status="PASS" starttime="20220314 16:58:51.836" endtime="20220314 16:58:51.867"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_report_rate}</var>
<arg>${response}</arg>
<arg>value</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:58:51.881" level="INFO">${result} = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]</msg>
<status status="PASS" starttime="20220314 16:58:51.868" endtime="20220314 16:58:51.881"/>
</kw>
<msg timestamp="20220314 16:58:51.881" level="INFO">${result} = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000]</msg>
<status status="PASS" starttime="20220314 16:58:51.868" endtime="20220314 16:58:51.881"/>
</kw>
<msg timestamp="20220314 16:58:51.881" level="INFO">${backend_report_rate} = 1000</msg>
<status status="PASS" starttime="20220314 16:58:51.867" endtime="20220314 16:58:51.881"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_report_rate}</arg>
<arg>${backend_report_rate}</arg>
<arg>The expected repo rate (${expected_report_rate}) and the actual value from backend repo rate (${backend_report_rate}) does not match</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:58:51.882" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:58:51.882" endtime="20220314 16:58:51.882"/>
</kw>
<status status="PASS" starttime="20220314 16:58:49.151" endtime="20220314 16:58:51.882"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${is_windows}</arg>
<arg>os.Open And Close First Application Listed In Windows Taskbar</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="os.Open And Close First Application Listed In Windows Taskbar" library="operating_system">
<doc>Opens very first application listed in windows taskbar for 3 second and then closes it.</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Opening First Application Listed In Windows Taskbar</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:58:51.883" endtime="20220314 16:58:51.884"/>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<arg>libraries.input.keyboard</arg>
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<status status="PASS" starttime="20220314 16:58:51.884" endtime="20220314 16:58:51.884"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>3</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:58:54.885" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20220314 16:58:51.884" endtime="20220314 16:58:54.885"/>
</kw>
<kw name="os.Type Keys" library="operating_system">
<arg>&lt;windows 1&gt;</arg>
<kw name="Type Keys" library="libraries.input.keyboard">
<arg>${key_string}</arg>
<doc>Sample string format:
"&lt;ctrl&gt;&lt;a&gt;" = key down key up ctrl, key down key up a
"&lt;ctrl a&gt; = key down ctrl, key down a, key up a, key up ctrl
"hello&lt;enter&gt;" = type "hello", then key down key up enter</doc>
<msg timestamp="20220314 16:58:54.903" level="INFO">['windows', '1']</msg>
<status status="PASS" starttime="20220314 16:58:54.890" endtime="20220314 16:58:54.903"/>
</kw>
<status status="PASS" starttime="20220314 16:58:54.887" endtime="20220314 16:58:54.903"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>3</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:58:57.905" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20220314 16:58:54.904" endtime="20220314 16:58:57.905"/>
</kw>
<kw name="os.Type Keys" library="operating_system">
<arg>&lt;alt f4&gt;</arg>
<kw name="Type Keys" library="libraries.input.keyboard">
<arg>${key_string}</arg>
<doc>Sample string format:
"&lt;ctrl&gt;&lt;a&gt;" = key down key up ctrl, key down key up a
"&lt;ctrl a&gt; = key down ctrl, key down a, key up a, key up ctrl
"hello&lt;enter&gt;" = type "hello", then key down key up enter</doc>
<msg timestamp="20220314 16:58:57.915" level="INFO">['alt', 'f4']</msg>
<status status="PASS" starttime="20220314 16:58:57.910" endtime="20220314 16:58:57.915"/>
</kw>
<status status="PASS" starttime="20220314 16:58:57.907" endtime="20220314 16:58:57.915"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>3</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:59:00.918" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20220314 16:58:57.917" endtime="20220314 16:59:00.918"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Closing Windows Application</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:59:00.920" endtime="20220314 16:59:00.920"/>
</kw>
<status status="PASS" starttime="20220314 16:58:51.883" endtime="20220314 16:59:00.921"/>
</kw>
<status status="PASS" starttime="20220314 16:58:51.883" endtime="20220314 16:59:00.921"/>
</kw>
<kw name="os.Open Chrome And Verify It Is Running" library="operating_system">
<arg>${is_windows}</arg>
<doc>Opens Chrome browser and verifies it is running if os is windows.</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Opening Chrome</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:59:00.924" endtime="20220314 16:59:00.925"/>
</kw>
<kw name="Focus Cmd" library="tools.python.mindstorm.process">
<msg timestamp="20220314 16:59:00.932" level="INFO">[(66098, ''), (66038, ''), (2621928, 'Task Switching'), (2295504, ''), (131362, ''), (65950, ''), (65946, ''), (65940, ''), (65932, ''), (65928, ''), (65920, ''), (65958, ''), (196974, ''), (65962, ''), (65922, ''), (66200, 'Battery Meter'), (66212, ''), (66244, 'Network Flyout'), (131778, ''), (65988, ''), (197396, 'HPSystemEventUtilityHost.OsdHelper'), (131852, 'HPSystemEventUtilityHost.OsdHelper'), (67158, ''), (131526, 'CiceroUIWndFrame'), (65808, ''), (65792, 'My Favorites Setting'), (3212964, ''), (2754374, ''), (2491884, 'Logitech G HUB'), (8652342, ''), (6358772, ''), (4917028, ''), (14746742, ''), (4916998, ''), (4261606, 'Logi_Devio_MainWindow'), (1705168, ''), (2229926, ''), (3409690, ''), (4850420, ''), (329596, ''), (3934002, ''), (4523748, 'gerty – run_configuration_pc7.py'), (263580, ''), (1246894, ''), (132966, '150 items recycled'), (1049806, 'DesktopWindowXamlSource'), (787526, ''), (3606248, 'GDI+ Window (Explorer.EXE)'), (2752862, 'theAwtToolkitWindow'), (328808, '##VSO###MCVSSHLD##'), (263570, ''), (263578, 'McPlatformSingleExeFramework'), (132754, ''), (132758, ''), (132742, ''), (132736, ''), (198002, ''), (132726, ''), (132722, ''), (198252, ''), (132172, 'GDI+ Window (OneDrive.exe)'), (132120, 'DDE Server Window'), (132126, ''), (132148, ''), (132106, ''), (132132, 'OneDrive - Personal'), (132136, ''), (525946, ''), (66010, ''), (853244, 'DesktopWindowXamlSource'), (131126, ''), (198182, ''), (263514, 'DesktopWindowXamlSource'), (132432, 'EXPLORER'), (132538, ''), (66998, 'Settings'), (196920, 'Settings'), (66978, '.NET-BroadcastEventWindow.4.0.0.0.2e9e79f.0'), (66976, ''), (66958, 'SystemResourceNotifyWindow'), (328786, 'MediaContextNotificationWindow'), (197728, ''), (328922, '{30A1588D-127B-4CC0-BA47-B11825F07731}'), (131364, '{03374DBB-D3AF-4A0B-AFC2-C2F5E0DB82A9}'), (197970, ''), (132446, ''), (131856, 'Hidden Window'), (197322, 'Hidden Window'), (131724, 'Form1'), (131722, 'GDI+ Window (HPSystemEventUtilityHost.exe)'), (131718, '.NET-BroadcastEventWindow.4.0.0.0.59f057.0'), (328812, 'CiceroUIWndFrame'), (131886, ''), (197848, 'SystemResourceNotifyWindow'), (197452, 'MediaContextNotificationWindow'), (66934, 'RealtekAudioBackgroundProcessClass'), (66578, ''), (66574, 'SecurityHealthSystray'), (131764, 'Windows Input Experience'), (66438, ''), (66398, ''), (66360, 'RealtekAudioAdminBackgroundProcessClass'), (66348, ''), (131872, ''), (66308, 'BluetoothNotificationAreaIconWindowClass'), (66304, 'MS_WebcheckMonitor'), (66224, ''), (131528, ''), (131506, 'DDE Server Window'), (852326, 'DesktopWindowXamlSource'), (66060, ''), (66078, ''), (66084, ''), (66180, ''), (66086, ''), (66058, ''), (66048, ''), (66046, ''), (66044, ''), (66042, ''), (1640156, 'DesktopWindowXamlSource'), (66006, ''), (131470, ''), (65998, ''), (65972, ''), (65968, ''), (65838, ''), (65834, ''), (65810, 'Windows Push Notifications Platform'), (65654, 'The Event Manager Dashboard'), (196638, 'ETDCtrl'), (131104, 'Task Host Window'), (131140, 'DWM Notification Window'), (65680, ''), (132196, 'JamPostMessageWindow'), (132320, ''), (132242, 'WISPTIS'), (591574, ''), (65982, 'Program Manager'), (984816, 'MSCTFIME UI'), (66100, 'Default IME'), (197762, 'MSCTFIME UI'), (66008, 'Default IME'), (131502, 'MSCTFIME UI'), (65904, 'Default IME'), (66214, 'Default IME'), (131892, 'MSCTFIME UI'), (393968, 'Default IME'), (67160, 'Default IME'), (65802, 'MSCTFIME UI'), (196636, 'Default IME'), (4589052, 'MSCTFIME UI'), (2885184, 'Default IME'), (3998978, 'Default IME'), (7472626, 'Default IME'), (394784, 'Default IME'), (132996, 'Default IME'), (393282, 'Default IME'), (393534, 'Default IME'), (1507918, 'Default IME'), (3278494, 'Default IME'), (2885014, 'MSCTFIME UI'), (5768942, 'Default IME'), (722488, 'MSCTFIME UI'), (263568, 'Default IME'), (4981064, 'MSCTFIME UI'), (3539962, 'Default IME'), (3868240, 'MSCTFIME UI'), (132968, 'Default IME'), (3278102, 'Default IME'), (263558, 'Default IME'), (263562, 'Default IME'), (1180680, 'Default IME'), (132700, 'Default IME'), (132778, 'Default IME'), (198240, 'Default IME'), (1312314, 'Default IME'), (132174, 'Default IME'), (132124, 'Default IME'), (132144, 'Default IME'), (132142, 'Default IME'), (132134, 'Default IME'), (525308, 'Default IME'), (328966, 'MSCTFIME UI'), (263668, 'Default IME'), (131854, 'Default IME'), (132244, 'Default IME'), (67004, 'Default IME'), (67000, 'Default IME'), (131386, 'Default IME'), (66996, 'MSCTFIME UI'), (132188, 'Default IME'), (66944, 'Default IME'), (131516, 'Default IME'), (132444, 'Default IME'), (131720, 'Default IME'), (66940, 'Default IME'), (66576, 'Default IME'), (131986, 'Default IME'), (66440, 'Default IME'), (66400, 'Default IME'), (66368, 'Default IME'), (66338, 'Default IME'), (66226, 'Default IME'), (66194, 'Default IME'), (65974, 'Default IME'), (65812, 'Default IME'), (65806, 'MSCTFIME UI'), (65656, 'Default IME'), (132246, 'Default IME'), (131538, 'MSCTFIME UI'), (65836, 'Default IME')]</msg>
<status status="PASS" starttime="20220314 16:59:00.926" endtime="20220314 16:59:00.932"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>3</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:59:03.934" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20220314 16:59:00.934" endtime="20220314 16:59:03.934"/>
</kw>
<kw name="Open Chrome" library="tools.python.mindstorm.process">
<status status="PASS" starttime="20220314 16:59:03.936" endtime="20220314 16:59:03.944"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>4</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:59:07.947" level="INFO">Slept 4 seconds</msg>
<status status="PASS" starttime="20220314 16:59:03.946" endtime="20220314 16:59:07.947"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${is_windows}</arg>
<arg>Expect Process</arg>
<arg>chrome.exe</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Process" library="tools.python.mindstorm.process">
<arg>chrome.exe</arg>
<status status="PASS" starttime="20220314 16:59:07.949" endtime="20220314 16:59:08.214"/>
</kw>
<status status="PASS" starttime="20220314 16:59:07.948" endtime="20220314 16:59:08.214"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:59:10.216" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20220314 16:59:08.215" endtime="20220314 16:59:10.216"/>
</kw>
<status status="PASS" starttime="20220314 16:59:00.923" endtime="20220314 16:59:10.216"/>
</kw>
<kw name="backend.Verify DPI Of Device" library="backend">
<arg>${GUI_dpi2}</arg>
<arg>${device['displayName']}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:59:10.236" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:59:10.235" endtime="20220314 16:59:10.236"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:59:11.242" level="INFO">16:59:10.241618: {"msgId": "b7eb0359-c161-4f9a-a9ad-261d0e15eb39", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO", "ZONE_PRIMARY": "PRIMARY"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:59:11.242" level="INFO">${res} =  {"msgId": "b7eb0359-c161-4f9a-a9ad-261d0e15eb39", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:59:10.236" endtime="20220314 16:59:11.242"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:59:11.243" level="INFO">${res} = {'msgId': 'b7eb0359-c161-4f9a-a9ad-261d0e15eb39', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:59:11.243" endtime="20220314 16:59:11.243"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:59:11.260" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:59:11.244" endtime="20220314 16:59:11.260"/>
</kw>
<msg timestamp="20220314 16:59:11.260" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:59:11.244" endtime="20220314 16:59:11.260"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:59:11.454" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:59:11.262" endtime="20220314 16:59:11.454"/>
</kw>
<msg timestamp="20220314 16:59:11.470" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:59:11.262" endtime="20220314 16:59:11.470"/>
</kw>
<msg timestamp="20220314 16:59:11.471" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:59:11.261" endtime="20220314 16:59:11.471"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:59:11.653" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:59:11.473" endtime="20220314 16:59:11.653"/>
</kw>
<msg timestamp="20220314 16:59:11.653" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:59:11.472" endtime="20220314 16:59:11.653"/>
</kw>
<msg timestamp="20220314 16:59:11.653" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:59:11.471" endtime="20220314 16:59:11.653"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:59:11.965" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g9_m1_shifted', 'g903hero_g6_m1', 'g903hero_g4_m1_shifted'...</msg>
<status status="PASS" starttime="20220314 16:59:11.656" endtime="20220314 16:59:11.965"/>
</kw>
<msg timestamp="20220314 16:59:11.966" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g9_m1_shifted', 'g903hero_g6_m1', 'g903hero_g4_m1_shifted'...</msg>
<status status="PASS" starttime="20220314 16:59:11.655" endtime="20220314 16:59:11.966"/>
</kw>
<msg timestamp="20220314 16:59:11.967" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:59:11.654" endtime="20220314 16:59:11.967"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:59:11.967" endtime="20220314 16:59:11.967"/>
</kw>
<status status="PASS" starttime="20220314 16:59:11.653" endtime="20220314 16:59:11.967"/>
</branch>
<status status="PASS" starttime="20220314 16:59:11.653" endtime="20220314 16:59:11.967"/>
</if>
<status status="PASS" starttime="20220314 16:59:11.471" endtime="20220314 16:59:11.967"/>
</iter>
<status status="PASS" starttime="20220314 16:59:11.471" endtime="20220314 16:59:11.967"/>
</for>
<msg timestamp="20220314 16:59:11.968" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:59:10.235" endtime="20220314 16:59:11.968"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:59:11.968" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/dpi'}</msg>
<status status="PASS" starttime="20220314 16:59:11.968" endtime="20220314 16:59:11.969"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:59:11.969" endtime="20220314 16:59:11.970"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:59:12.970" level="INFO">16:59:11.969797: {"msgId": "45deaefd-f7f9-4469-b029-2159c2cf43d8", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.Dpi.State", "deviceId": "dev00000000", "dpi": 3200, "dpiIndex": 4, "shifted": false}}</msg>
<msg timestamp="20220314 16:59:12.970" level="INFO">${response} =  {"msgId": "45deaefd-f7f9-4469-b029-2159c2cf43d8", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapi...</msg>
<status status="PASS" starttime="20220314 16:59:11.970" endtime="20220314 16:59:12.970"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:59:12.971" level="INFO">${response} = {'msgId': '45deaefd-f7f9-4469-b029-2159c2cf43d8', 'verb': 'GET', 'path': '/mouse/dev00000000/dpi', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis...</msg>
<status status="PASS" starttime="20220314 16:59:12.971" endtime="20220314 16:59:12.971"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:59:12.989" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:59:12.973" endtime="20220314 16:59:12.989"/>
</kw>
<msg timestamp="20220314 16:59:12.989" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:59:12.972" endtime="20220314 16:59:12.989"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:59:13.006" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:59:12.991" endtime="20220314 16:59:13.007"/>
</kw>
<msg timestamp="20220314 16:59:13.007" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:59:12.990" endtime="20220314 16:59:13.007"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:59:13.007" endtime="20220314 16:59:13.008"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:59:13.008" endtime="20220314 16:59:13.008"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:59:13.008" endtime="20220314 16:59:13.009"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:59:13.009" endtime="20220314 16:59:13.009"/>
</kw>
<status status="PASS" starttime="20220314 16:59:12.972" endtime="20220314 16:59:13.009"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_dpi}</var>
<arg>${response}</arg>
<arg>dpi</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:59:13.026" level="INFO">${result} = [3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200]</msg>
<status status="PASS" starttime="20220314 16:59:13.011" endtime="20220314 16:59:13.026"/>
</kw>
<msg timestamp="20220314 16:59:13.026" level="INFO">${result} = [3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200, 3200]</msg>
<status status="PASS" starttime="20220314 16:59:13.010" endtime="20220314 16:59:13.026"/>
</kw>
<msg timestamp="20220314 16:59:13.026" level="INFO">${backend_dpi} = 3200</msg>
<status status="PASS" starttime="20220314 16:59:13.010" endtime="20220314 16:59:13.027"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_dpi}</arg>
<arg>${backend_dpi}</arg>
<arg>The expected dpi value (${expected_dpi}) and actual value from backend (${backend_dpi}) is different</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:59:13.027" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:59:13.027" endtime="20220314 16:59:13.027"/>
</kw>
<status status="PASS" starttime="20220314 16:59:10.217" endtime="20220314 16:59:13.027"/>
</kw>
<kw name="backend.Verify Report Rate" library="backend">
<arg>${device['displayName']}</arg>
<arg>${GUI_report_rate_2}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:59:13.037" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 16:59:13.037" endtime="20220314 16:59:13.038"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:59:14.044" level="INFO">16:59:13.044417: {"msgId": "fbf888df-9e3c-40e0-ace1-526aeaffc077", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_PRIMARY": "PRIMARY", "ZONE_BRANDING": "LOGO"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 16:59:14.044" level="INFO">${res} =  {"msgId": "fbf888df-9e3c-40e0-ace1-526aeaffc077", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 16:59:13.039" endtime="20220314 16:59:14.044"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:59:14.046" level="INFO">${res} = {'msgId': 'fbf888df-9e3c-40e0-ace1-526aeaffc077', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 16:59:14.045" endtime="20220314 16:59:14.046"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:59:14.070" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:59:14.048" endtime="20220314 16:59:14.070"/>
</kw>
<msg timestamp="20220314 16:59:14.071" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 16:59:14.047" endtime="20220314 16:59:14.071"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:59:14.305" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:59:14.072" endtime="20220314 16:59:14.305"/>
</kw>
<msg timestamp="20220314 16:59:14.323" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:59:14.072" endtime="20220314 16:59:14.323"/>
</kw>
<msg timestamp="20220314 16:59:14.324" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 16:59:14.071" endtime="20220314 16:59:14.324"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:59:14.519" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:59:14.326" endtime="20220314 16:59:14.519"/>
</kw>
<msg timestamp="20220314 16:59:14.519" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 16:59:14.325" endtime="20220314 16:59:14.519"/>
</kw>
<msg timestamp="20220314 16:59:14.520" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 16:59:14.325" endtime="20220314 16:59:14.520"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:59:14.832" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g7_m1', 'g903hero_g4_m1_shifted', 'g903hero_g11_m1', 'g903...</msg>
<status status="PASS" starttime="20220314 16:59:14.523" endtime="20220314 16:59:14.832"/>
</kw>
<msg timestamp="20220314 16:59:14.833" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g7_m1', 'g903hero_g4_m1_shifted', 'g903hero_g11_m1', 'g903...</msg>
<status status="PASS" starttime="20220314 16:59:14.522" endtime="20220314 16:59:14.833"/>
</kw>
<msg timestamp="20220314 16:59:14.833" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:59:14.521" endtime="20220314 16:59:14.833"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:59:14.834" endtime="20220314 16:59:14.834"/>
</kw>
<status status="PASS" starttime="20220314 16:59:14.520" endtime="20220314 16:59:14.834"/>
</branch>
<status status="PASS" starttime="20220314 16:59:14.520" endtime="20220314 16:59:14.834"/>
</if>
<status status="PASS" starttime="20220314 16:59:14.324" endtime="20220314 16:59:14.834"/>
</iter>
<status status="PASS" starttime="20220314 16:59:14.324" endtime="20220314 16:59:14.834"/>
</for>
<msg timestamp="20220314 16:59:14.834" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 16:59:13.036" endtime="20220314 16:59:14.834"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 16:59:14.835" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/report_rate'}</msg>
<status status="PASS" starttime="20220314 16:59:14.835" endtime="20220314 16:59:14.835"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 16:59:14.837" endtime="20220314 16:59:14.840"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 16:59:15.840" level="INFO">16:59:14.839656: {"msgId": "d39e726d-062e-41ce-8339-3a3ab2c5dcf9", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.ReportRate", "value": 125}}</msg>
<msg timestamp="20220314 16:59:15.840" level="INFO">${response} =  {"msgId": "d39e726d-062e-41ce-8339-3a3ab2c5dcf9", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.g...</msg>
<status status="PASS" starttime="20220314 16:59:14.840" endtime="20220314 16:59:15.840"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 16:59:15.842" level="INFO">${response} = {'msgId': 'd39e726d-062e-41ce-8339-3a3ab2c5dcf9', 'verb': 'GET', 'path': '/mouse/dev00000000/report_rate', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.go...</msg>
<status status="PASS" starttime="20220314 16:59:15.841" endtime="20220314 16:59:15.842"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:59:15.859" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:59:15.845" endtime="20220314 16:59:15.859"/>
</kw>
<msg timestamp="20220314 16:59:15.860" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 16:59:15.844" endtime="20220314 16:59:15.860"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:59:15.874" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 16:59:15.861" endtime="20220314 16:59:15.875"/>
</kw>
<msg timestamp="20220314 16:59:15.875" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 16:59:15.860" endtime="20220314 16:59:15.875"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:59:15.875" endtime="20220314 16:59:15.875"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 16:59:15.876" endtime="20220314 16:59:15.876"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 16:59:15.876" endtime="20220314 16:59:15.876"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:59:15.877" endtime="20220314 16:59:15.877"/>
</kw>
<status status="PASS" starttime="20220314 16:59:15.843" endtime="20220314 16:59:15.877"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_report_rate}</var>
<arg>${response}</arg>
<arg>value</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 16:59:15.892" level="INFO">${result} = [125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125]</msg>
<status status="PASS" starttime="20220314 16:59:15.878" endtime="20220314 16:59:15.892"/>
</kw>
<msg timestamp="20220314 16:59:15.892" level="INFO">${result} = [125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125]</msg>
<status status="PASS" starttime="20220314 16:59:15.878" endtime="20220314 16:59:15.892"/>
</kw>
<msg timestamp="20220314 16:59:15.892" level="INFO">${backend_report_rate} = 125</msg>
<status status="PASS" starttime="20220314 16:59:15.877" endtime="20220314 16:59:15.892"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_report_rate}</arg>
<arg>${backend_report_rate}</arg>
<arg>The expected repo rate (${expected_report_rate}) and the actual value from backend repo rate (${backend_report_rate}) does not match</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 16:59:15.893" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 16:59:15.893" endtime="20220314 16:59:15.893"/>
</kw>
<status status="PASS" starttime="20220314 16:59:13.028" endtime="20220314 16:59:15.893"/>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="TEARDOWN">
<arg>profile.Remove Chrome Profile</arg>
<arg>AND</arg>
<arg>Terminate Chrome</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="profile.Remove Chrome Profile" library="profile">
<kw name="Log To Console" library="BuiltIn">
<arg>Removing Chrome Profile...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:59:15.894" endtime="20220314 16:59:15.895"/>
</kw>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:59:20.924" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:59:15.897" endtime="20220314 16:59:20.924"/>
</kw>
<status status="FAIL" starttime="20220314 16:59:15.896" endtime="20220314 16:59:20.925"/>
</kw>
<msg timestamp="20220314 16:59:20.925" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 16:59:15.896" endtime="20220314 16:59:20.925"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 16:59:20.926" endtime="20220314 16:59:20.926"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:59:20.927" endtime="20220314 16:59:20.927"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:59:20.928" endtime="20220314 16:59:20.928"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:59:20.928" endtime="20220314 16:59:20.928"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 16:59:20.929" endtime="20220314 16:59:20.929"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 16:59:20.930" endtime="20220314 16:59:20.930"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:59:20.926" endtime="20220314 16:59:20.930"/>
</branch>
<status status="PASS" starttime="20220314 16:59:20.925" endtime="20220314 16:59:20.930"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:59:20.934" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:59:20.933" endtime="20220314 16:59:20.934"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:59:20.935" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:59:20.935" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:59:20.934" endtime="20220314 16:59:20.935"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:59:30.990" level="INFO">Failed to find element with selector: #home-view and attributes:{}</msg>
<msg timestamp="20220314 16:59:30.990" level="FAIL">Failure: Selector "#home-view" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:59:20.936" endtime="20220314 16:59:30.990"/>
</kw>
<status status="FAIL" starttime="20220314 16:59:20.935" endtime="20220314 16:59:30.991"/>
</kw>
<status status="FAIL" starttime="20220314 16:59:20.932" endtime="20220314 16:59:30.991"/>
</kw>
<msg timestamp="20220314 16:59:30.991" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220314 16:59:20.931" endtime="20220314 16:59:30.991"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:59:30.992" endtime="20220314 16:59:30.993"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:59:30.994" endtime="20220314 16:59:31.018"/>
</kw>
<msg timestamp="20220314 16:59:31.019" level="INFO">${back_button_present} = True</msg>
<status status="PASS" starttime="20220314 16:59:30.993" endtime="20220314 16:59:31.019"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:59:31.019" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:59:31.019" endtime="20220314 16:59:31.020"/>
</kw>
<status status="PASS" starttime="20220314 16:59:15.896" endtime="20220314 16:59:31.020"/>
</iter>
<status status="PASS" starttime="20220314 16:59:15.896" endtime="20220314 16:59:31.020"/>
</for>
<status status="PASS" starttime="20220314 16:59:15.896" endtime="20220314 16:59:31.020"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:59:31.022" endtime="20220314 16:59:31.035"/>
</kw>
<msg timestamp="20220314 16:59:31.035" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:59:31.021" endtime="20220314 16:59:31.035"/>
</kw>
<msg timestamp="20220314 16:59:31.035" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:59:31.021" endtime="20220314 16:59:31.035"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:59:31.036" endtime="20220314 16:59:31.036"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${clicked}</var>
<arg>common.Click On Back</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:59:41.580" level="INFO">WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)

WebDriverException in click(): Message: unknown error: Element &lt;button class="back-button"&gt;...&lt;/button&gt; is not clickable at point (32, 59). Other element would receive the click: &lt;div class="screen-blocker"&gt;...&lt;/div&gt;
  (Session info: chrome=96.0.4664.55)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.22000 x86_64)</msg>
<msg timestamp="20220314 16:59:41.581" level="FAIL">Failure: Selector ".back-button" is Not Clickable</msg>
<status status="FAIL" starttime="20220314 16:59:31.038" endtime="20220314 16:59:41.581"/>
</kw>
<status status="FAIL" starttime="20220314 16:59:31.037" endtime="20220314 16:59:41.582"/>
</kw>
<msg timestamp="20220314 16:59:41.582" level="INFO">${clicked} = False</msg>
<status status="PASS" starttime="20220314 16:59:31.037" endtime="20220314 16:59:41.582"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clicked}==False</arg>
<arg>common.alerts</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="common.alerts" library="common_keywords_kragle">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${yes_button}</var>
<arg>common.Verify Yes On a Alert</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Verify Yes On a Alert" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:59:41.584" endtime="20220314 16:59:41.623"/>
</kw>
<status status="PASS" starttime="20220314 16:59:41.584" endtime="20220314 16:59:41.623"/>
</kw>
<msg timestamp="20220314 16:59:41.623" level="INFO">${yes_button} = True</msg>
<status status="PASS" starttime="20220314 16:59:41.584" endtime="20220314 16:59:41.623"/>
</kw>
<if>
<branch type="IF" condition="${yes_button}==True">
<kw name="common.Select Yes On a Alert" library="common_keywords_kragle">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:59:41.624" endtime="20220314 16:59:42.247"/>
</kw>
<status status="PASS" starttime="20220314 16:59:41.624" endtime="20220314 16:59:42.247"/>
</kw>
<status status="PASS" starttime="20220314 16:59:41.624" endtime="20220314 16:59:42.247"/>
</kw>
<status status="PASS" starttime="20220314 16:59:41.624" endtime="20220314 16:59:42.247"/>
</branch>
<branch type="ELSE">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${not_now_button}</var>
<arg>common.Verify Not Now On a Alert</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220314 16:59:42.248" endtime="20220314 16:59:42.248"/>
</kw>
<if>
<branch type="IF" condition="${not_now_button}==True">
<kw name="common.Select Not Now On a Alert" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:59:42.248" endtime="20220314 16:59:42.248"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:59:42.248" endtime="20220314 16:59:42.248"/>
</branch>
<branch type="ELSE">
<kw name="common.Restart GHUB" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 16:59:42.249" endtime="20220314 16:59:42.249"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:59:42.248" endtime="20220314 16:59:42.249"/>
</branch>
<status status="NOT RUN" starttime="20220314 16:59:42.248" endtime="20220314 16:59:42.249"/>
</if>
<status status="NOT RUN" starttime="20220314 16:59:42.247" endtime="20220314 16:59:42.249"/>
</branch>
<status status="PASS" starttime="20220314 16:59:41.624" endtime="20220314 16:59:42.249"/>
</if>
<status status="PASS" starttime="20220314 16:59:41.583" endtime="20220314 16:59:42.249"/>
</kw>
<status status="PASS" starttime="20220314 16:59:41.582" endtime="20220314 16:59:42.249"/>
</kw>
<status status="PASS" starttime="20220314 16:59:31.020" endtime="20220314 16:59:42.249"/>
</iter>
<iter>
<var name="${index}">1</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:59:42.251" endtime="20220314 16:59:42.267"/>
</kw>
<msg timestamp="20220314 16:59:42.267" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:59:42.250" endtime="20220314 16:59:42.267"/>
</kw>
<msg timestamp="20220314 16:59:42.268" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:59:42.250" endtime="20220314 16:59:42.268"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:59:42.268" endtime="20220314 16:59:42.269"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${clicked}</var>
<arg>common.Click On Back</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:59:42.270" endtime="20220314 16:59:42.818"/>
</kw>
<status status="PASS" starttime="20220314 16:59:42.270" endtime="20220314 16:59:42.818"/>
</kw>
<msg timestamp="20220314 16:59:42.818" level="INFO">${clicked} = True</msg>
<status status="PASS" starttime="20220314 16:59:42.269" endtime="20220314 16:59:42.818"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clicked}==False</arg>
<arg>common.alerts</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:59:42.819" endtime="20220314 16:59:42.819"/>
</kw>
<status status="PASS" starttime="20220314 16:59:42.250" endtime="20220314 16:59:42.819"/>
</iter>
<iter>
<var name="${index}">2</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 16:59:43.828" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 16:59:43.829" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:59:42.821" endtime="20220314 16:59:43.829"/>
</kw>
<msg timestamp="20220314 16:59:43.829" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:59:42.821" endtime="20220314 16:59:43.829"/>
</kw>
<msg timestamp="20220314 16:59:43.829" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 16:59:42.820" endtime="20220314 16:59:43.829"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 16:59:43.830" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 16:59:43.830" endtime="20220314 16:59:43.830"/>
</kw>
<status status="PASS" starttime="20220314 16:59:42.819" endtime="20220314 16:59:43.830"/>
</iter>
<status status="PASS" starttime="20220314 16:59:31.020" endtime="20220314 16:59:43.830"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:59:43.832" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 16:59:43.832" endtime="20220314 16:59:43.832"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:59:43.832" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:59:43.832" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:59:43.832" endtime="20220314 16:59:43.832"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:59:43.833" endtime="20220314 16:59:43.851"/>
</kw>
<status status="PASS" starttime="20220314 16:59:43.833" endtime="20220314 16:59:43.851"/>
</kw>
<status status="PASS" starttime="20220314 16:59:43.831" endtime="20220314 16:59:43.851"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 16:59:45.879" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 16:59:43.852" endtime="20220314 16:59:45.879"/>
</kw>
<status status="PASS" starttime="20220314 16:59:43.831" endtime="20220314 16:59:45.881"/>
</kw>
<status status="PASS" starttime="20220314 16:59:15.895" endtime="20220314 16:59:45.881"/>
</kw>
<kw name="home.Click On Appbar Application Name" library="home_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${home_appbar_application_name}</arg>
<arg>wait_timeout=10</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:59:45.883" level="INFO">${words} = ['.appbar-application-name']</msg>
<status status="PASS" starttime="20220314 16:59:45.883" endtime="20220314 16:59:45.883"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:59:45.884" level="INFO">Length is 1</msg>
<msg timestamp="20220314 16:59:45.884" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 16:59:45.884" endtime="20220314 16:59:45.884"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:59:45.886" endtime="20220314 16:59:46.477"/>
</kw>
<status status="PASS" starttime="20220314 16:59:45.886" endtime="20220314 16:59:46.477"/>
</kw>
<status status="PASS" starttime="20220314 16:59:45.883" endtime="20220314 16:59:46.477"/>
</kw>
<status status="PASS" starttime="20220314 16:59:45.882" endtime="20220314 16:59:46.477"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_chrome_profile_added}</var>
<arg>profile_screen.Is Chrome Profile Added</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="profile_screen.Is Chrome Profile Added" library="profile_screen">
<if>
<branch type="IF" condition="${is_windows}">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${profile_chrome_app_profile_win}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 16:59:46.479" endtime="20220314 16:59:46.490"/>
</kw>
<status status="PASS" starttime="20220314 16:59:46.479" endtime="20220314 16:59:46.490"/>
</branch>
<branch type="ELSE">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${profile_chrome_app_profile_mac}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220314 16:59:46.492" endtime="20220314 16:59:46.492"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${status} is ${False}</arg>
<arg>Expect Element</arg>
<arg>selector=${profile_chrome_app_profile_mac_fallback}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20220314 16:59:46.493" endtime="20220314 16:59:46.493"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:59:46.490" endtime="20220314 16:59:46.493"/>
</branch>
<status status="PASS" starttime="20220314 16:59:46.478" endtime="20220314 16:59:46.493"/>
</if>
<status status="PASS" starttime="20220314 16:59:46.478" endtime="20220314 16:59:46.494"/>
</kw>
<msg timestamp="20220314 16:59:46.494" level="INFO">${is_chrome_profile_added} = True</msg>
<status status="PASS" starttime="20220314 16:59:46.478" endtime="20220314 16:59:46.494"/>
</kw>
<if>
<branch type="IF" condition="${is_chrome_profile_added}==False">
<kw name="Log To Console" library="BuiltIn">
<arg>Chrome Profile Removed.</arg>
<doc>Logs the given message to the console.</doc>
<status status="NOT RUN" starttime="20220314 16:59:46.495" endtime="20220314 16:59:46.495"/>
</kw>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<status status="NOT RUN" starttime="20220314 16:59:46.496" endtime="20220314 16:59:46.496"/>
</kw>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<status status="NOT RUN" starttime="20220314 16:59:46.496" endtime="20220314 16:59:46.497"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:59:46.494" endtime="20220314 16:59:46.497"/>
</branch>
<status status="PASS" starttime="20220314 16:59:46.494" endtime="20220314 16:59:46.497"/>
</if>
<kw name="profile_screen.Click On Chrome App" library="profile_screen">
<if>
<branch type="IF" condition="${is_windows}">
<kw name="Click" library="libraries.components.React">
<arg>selector=${profile_chrome_app_win}</arg>
<arg>wait_timeout=10</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:59:46.499" endtime="20220314 16:59:47.059"/>
</kw>
<status status="PASS" starttime="20220314 16:59:46.498" endtime="20220314 16:59:47.059"/>
</branch>
<branch type="ELSE">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Click</arg>
<arg>selector=${profile_chrome_app_mac}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<status status="NOT RUN" starttime="20220314 16:59:47.060" endtime="20220314 16:59:47.060"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${status} is ${False}</arg>
<arg>Click</arg>
<arg>selector=${profile_chrome_app_mac_fallback}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="NOT RUN" starttime="20220314 16:59:47.061" endtime="20220314 16:59:47.061"/>
</kw>
<status status="NOT RUN" starttime="20220314 16:59:47.059" endtime="20220314 16:59:47.061"/>
</branch>
<status status="PASS" starttime="20220314 16:59:46.498" endtime="20220314 16:59:47.061"/>
</if>
<status status="PASS" starttime="20220314 16:59:46.498" endtime="20220314 16:59:47.061"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click On Cancel</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click On Cancel" library="common_keywords_kragle">
<doc>Clicks on the Cancel Button
Can be used where ever 'cancel'['x'] button is seen</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=//div[@class='action-button dismiss']</arg>
<arg>wait_timeout=10</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:59:47.064" endtime="20220314 16:59:47.605"/>
</kw>
<status status="PASS" starttime="20220314 16:59:47.063" endtime="20220314 16:59:47.605"/>
</kw>
<status status="PASS" starttime="20220314 16:59:47.062" endtime="20220314 16:59:47.606"/>
</kw>
<kw name="games_applications.Click On Menu Item Settings" library="games_and_applications_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${games_applications_profile_settings}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:59:47.610" level="INFO">${words} = ['.menu-item', 'text=SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:59:47.609" endtime="20220314 16:59:47.610"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:59:47.611" level="INFO">Length is 2</msg>
<msg timestamp="20220314 16:59:47.611" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20220314 16:59:47.611" endtime="20220314 16:59:47.611"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="__Click UI Based On Attribute__" library="common_keywords_kragle">
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<doc>Internal fuction to do additional check on 'Click UI'. Not to be used anywhere else.</doc>
<kw name="Split String" library="String">
<var>${sub_words}</var>
<arg>${word}</arg>
<arg>=</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:59:47.614" level="INFO">${sub_words} = ['text', 'SETTINGS']</msg>
<status status="PASS" starttime="20220314 16:59:47.614" endtime="20220314 16:59:47.614"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='text'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:59:47.615" endtime="20220314 16:59:48.212"/>
</kw>
<status status="PASS" starttime="20220314 16:59:47.614" endtime="20220314 16:59:48.212"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='innerText'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>innerText=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:59:48.214" endtime="20220314 16:59:48.214"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='value'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>value=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:59:48.215" endtime="20220314 16:59:48.216"/>
</kw>
<status status="PASS" starttime="20220314 16:59:47.613" endtime="20220314 16:59:48.216"/>
</kw>
<status status="PASS" starttime="20220314 16:59:47.612" endtime="20220314 16:59:48.216"/>
</kw>
<status status="PASS" starttime="20220314 16:59:47.608" endtime="20220314 16:59:48.217"/>
</kw>
<status status="PASS" starttime="20220314 16:59:47.607" endtime="20220314 16:59:48.217"/>
</kw>
<kw name="games_applications.Click On Forget App" library="games_and_applications_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${games_applications_forget_app}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:59:48.222" level="INFO">${words} = ['.overlay-button.delete', 'text=FORGET APP']</msg>
<status status="PASS" starttime="20220314 16:59:48.221" endtime="20220314 16:59:48.222"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 16:59:48.223" level="INFO">Length is 2</msg>
<msg timestamp="20220314 16:59:48.224" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20220314 16:59:48.223" endtime="20220314 16:59:48.224"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="__Click UI Based On Attribute__" library="common_keywords_kragle">
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<doc>Internal fuction to do additional check on 'Click UI'. Not to be used anywhere else.</doc>
<kw name="Split String" library="String">
<var>${sub_words}</var>
<arg>${word}</arg>
<arg>=</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 16:59:48.227" level="INFO">${sub_words} = ['text', 'FORGET APP']</msg>
<status status="PASS" starttime="20220314 16:59:48.227" endtime="20220314 16:59:48.227"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='text'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:59:48.228" endtime="20220314 16:59:48.779"/>
</kw>
<status status="PASS" starttime="20220314 16:59:48.228" endtime="20220314 16:59:48.779"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='innerText'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>innerText=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:59:48.779" endtime="20220314 16:59:48.780"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='value'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>value=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 16:59:48.780" endtime="20220314 16:59:48.780"/>
</kw>
<status status="PASS" starttime="20220314 16:59:48.226" endtime="20220314 16:59:48.780"/>
</kw>
<status status="PASS" starttime="20220314 16:59:48.225" endtime="20220314 16:59:48.780"/>
</kw>
<status status="PASS" starttime="20220314 16:59:48.220" endtime="20220314 16:59:48.781"/>
</kw>
<status status="PASS" starttime="20220314 16:59:48.219" endtime="20220314 16:59:48.781"/>
</kw>
<kw name="common.Select Yes On a Alert" library="common_keywords_kragle">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:59:48.782" endtime="20220314 16:59:49.353"/>
</kw>
<status status="PASS" starttime="20220314 16:59:48.782" endtime="20220314 16:59:49.353"/>
</kw>
<status status="PASS" starttime="20220314 16:59:48.781" endtime="20220314 16:59:49.353"/>
</kw>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 16:59:49.354" endtime="20220314 16:59:49.931"/>
</kw>
<status status="PASS" starttime="20220314 16:59:49.354" endtime="20220314 16:59:49.931"/>
</kw>
<status status="PASS" starttime="20220314 16:59:15.894" endtime="20220314 16:59:49.931"/>
</kw>
<kw name="Terminate Chrome" library="tools.python.mindstorm.process">
<status status="PASS" starttime="20220314 16:59:49.932" endtime="20220314 16:59:50.263"/>
</kw>
<status status="PASS" starttime="20220314 16:59:15.894" endtime="20220314 16:59:50.263"/>
</kw>
<status status="PASS" starttime="20220314 16:57:28.712" endtime="20220314 16:59:50.264"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>4</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 16:59:54.265" level="INFO">Slept 4 seconds</msg>
<status status="PASS" starttime="20220314 16:59:50.264" endtime="20220314 16:59:54.265"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.Select Yes On a Alert</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Select Yes On a Alert" library="common_keywords_kragle">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=.action-button</arg>
<arg>innerText=YES</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 16:59:58.208" level="INFO">Failed to find element with selector: .action-button and attributes:{'innerText': 'YES'}</msg>
<msg timestamp="20220314 16:59:58.210" level="FAIL">Failure: Selector ".action-button" with attribute(s) "{'innerText': 'YES'}" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:59:54.271" endtime="20220314 16:59:58.210"/>
</kw>
<status status="PASS" starttime="20220314 16:59:54.270" endtime="20220314 16:59:58.211"/>
</kw>
<status status="PASS" starttime="20220314 16:59:54.268" endtime="20220314 16:59:58.211"/>
</kw>
<status status="PASS" starttime="20220314 16:59:54.267" endtime="20220314 16:59:58.211"/>
</kw>
<kw name="End Test" library="logging" type="TEARDOWN">
<arg>${KEYWORD STATUS}</arg>
<doc>Ensure to Call this keyword at Teardown of all High Level Test Keywords
If Test Fails - This will capture logs and screenshots and append links to report</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}Test Status: ${test_status}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 16:59:58.212" endtime="20220314 16:59:58.212"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${test_status}'=='FAIL'</arg>
<arg>Get Log Files And Upload To FTPDrive</arg>
<arg>end_test</arg>
<arg>ELSE</arg>
<arg>Return From Keyword</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20220314 16:59:58.213" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 16:59:58.213" endtime="20220314 16:59:58.213"/>
</kw>
<status status="PASS" starttime="20220314 16:59:58.213" endtime="20220314 16:59:58.213"/>
</kw>
<status status="PASS" starttime="20220314 16:59:58.211" endtime="20220314 16:59:58.213"/>
</kw>
<status status="PASS" starttime="20220314 16:56:03.213" endtime="20220314 16:59:58.213"/>
</kw>
<status status="PASS" starttime="20220314 16:56:03.212" endtime="20220314 16:59:58.214"/>
</kw>
<tag>Device: G903 LIGHTSPEED (Windows, Wired)</tag>
<tag>Device Type: MOUSE</tag>
<tag>Feature: dpi</tag>
<tag>OS: Windows-10-10.0.22000-SP0</tag>
<status status="PASS" starttime="20220314 16:56:03.207" endtime="20220314 16:59:58.214"/>
</test>
<test id="s1-t6" name="Test: DPI Sensitivity With Sleep System For Mouse: G903 LIGHTSPEED (Windows, Wired)">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Test: DPI Sensitivity With Sleep System For Mouse</arg>
<arg>{'displayName': 'G903 LIGHTSPEED', 'connection_type': 'wired', 'hub': 3856831629, 'portNumber': 6, 'features': {'dpi': ['sys']}, 'pid': 'c091', 'productId': '0xc091', 'firmware': '23.1.13', 'modelId': 'c4087', 'type': 'MOUSE', 'device_specific_features': {'lightsync': {'primary': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer'], 'logo': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}, 'device_settings': ['DPI Lighting', 'Startup Effect', 'Low Battery Mode', 'Firmware Version', 'On-Board Memory Mode', 'Battery Level']}, 'connection_interfaces': {'wired': {'pid': 'c091', 'productId': '0xc091'}, 'wireless': {'pid': '0x4087', 'productId': '0x4087'}}}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Test: DPI Sensitivity With Sleep System For Mouse" library="mouse_regression_system">
<arg>{'displayName': 'G903 LIGHTSPEED', 'connection_type': 'wired', 'hub': 3856831629, 'portNumber': 6, 'features': {'dpi': ['sys']}, 'pid': 'c091', 'productId': '0xc091', 'firmware': '23.1.13', 'modelId': 'c4087', 'type': 'MOUSE', 'device_specific_features': {'lightsync': {'primary': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer'], 'logo': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}, 'device_settings': ['DPI Lighting', 'Startup Effect', 'Low Battery Mode', 'Firmware Version', 'On-Board Memory Mode', 'Battery Level']}, 'connection_interfaces': {'wired': {'pid': 'c091', 'productId': '0xc091'}, 'wireless': {'pid': '0x4087', 'productId': '0x4087'}}}</arg>
<tag>dpi</tag>
<doc>Check that G HUB can assign given DPI and Report Rate to the device.
And verify it by querying firmware before and after sleeping the system
- Check that device appears in the Home view and open device configuration page
- Click device picture
- Click the sensitivity icon
- Set and verify the DPI and Report rate
- Let PC sleep
- Check that device appears in the Home view and open device configuration page
- Verify the DPI and Report rate that set by user</doc>
<kw name="home.Open Device Configuration" library="home_screen">
<arg>${device['displayName']}</arg>
<doc>Click on the device to open device configuration and if device introduction page opens then skip it.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device Home Screen Loaded</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device Home Screen Loaded" library="home_screen">
<arg>${device_name}</arg>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:00:03.267" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 16:59:58.245" endtime="20220314 17:00:03.267"/>
</kw>
<status status="FAIL" starttime="20220314 16:59:58.244" endtime="20220314 17:00:03.270"/>
</kw>
<msg timestamp="20220314 17:00:03.270" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 16:59:58.243" endtime="20220314 17:00:03.270"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 17:00:03.272" endtime="20220314 17:00:03.272"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 17:00:03.272" endtime="20220314 17:00:03.272"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 17:00:03.273" endtime="20220314 17:00:03.273"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 17:00:03.274" endtime="20220314 17:00:03.274"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 17:00:03.275" endtime="20220314 17:00:03.275"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 17:00:03.276" endtime="20220314 17:00:03.276"/>
</kw>
<status status="NOT RUN" starttime="20220314 17:00:03.271" endtime="20220314 17:00:03.276"/>
</branch>
<status status="PASS" starttime="20220314 17:00:03.270" endtime="20220314 17:00:03.276"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 17:00:03.279" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 17:00:03.278" endtime="20220314 17:00:03.279"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 17:00:03.280" level="INFO">Length is 1</msg>
<msg timestamp="20220314 17:00:03.280" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 17:00:03.279" endtime="20220314 17:00:03.280"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:00:03.281" endtime="20220314 17:00:03.294"/>
</kw>
<status status="PASS" starttime="20220314 17:00:03.280" endtime="20220314 17:00:03.295"/>
</kw>
<status status="PASS" starttime="20220314 17:00:03.277" endtime="20220314 17:00:03.295"/>
</kw>
<msg timestamp="20220314 17:00:03.295" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220314 17:00:03.277" endtime="20220314 17:00:03.295"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:00:03.297" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:00:03.296" endtime="20220314 17:00:03.297"/>
</kw>
<status status="PASS" starttime="20220314 16:59:58.243" endtime="20220314 17:00:03.297"/>
</iter>
<status status="PASS" starttime="20220314 16:59:58.243" endtime="20220314 17:00:03.297"/>
</for>
<status status="PASS" starttime="20220314 16:59:58.242" endtime="20220314 17:00:03.298"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:00:04.319" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 17:00:04.321" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:00:03.300" endtime="20220314 17:00:04.321"/>
</kw>
<msg timestamp="20220314 17:00:04.321" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 17:00:03.299" endtime="20220314 17:00:04.321"/>
</kw>
<msg timestamp="20220314 17:00:04.322" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 17:00:03.298" endtime="20220314 17:00:04.322"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:00:04.324" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:00:04.323" endtime="20220314 17:00:04.325"/>
</kw>
<status status="PASS" starttime="20220314 17:00:03.298" endtime="20220314 17:00:04.325"/>
</iter>
<status status="PASS" starttime="20220314 17:00:03.298" endtime="20220314 17:00:04.326"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 17:00:04.330" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 17:00:04.330" endtime="20220314 17:00:04.330"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 17:00:04.332" level="INFO">Length is 1</msg>
<msg timestamp="20220314 17:00:04.332" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 17:00:04.332" endtime="20220314 17:00:04.332"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:00:04.334" endtime="20220314 17:00:04.349"/>
</kw>
<status status="PASS" starttime="20220314 17:00:04.333" endtime="20220314 17:00:04.349"/>
</kw>
<status status="PASS" starttime="20220314 17:00:04.328" endtime="20220314 17:00:04.349"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:00:06.362" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 17:00:04.349" endtime="20220314 17:00:06.363"/>
</kw>
<status status="PASS" starttime="20220314 17:00:04.327" endtime="20220314 17:00:06.364"/>
</kw>
<status status="PASS" starttime="20220314 16:59:58.241" endtime="20220314 17:00:06.364"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:00:08.433" level="INFO">Failed to find element with selector: .left-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 17:00:06.371" endtime="20220314 17:00:08.435"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:00:08.449" level="FAIL">Failure: Selector ".left-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 17:00:08.436" endtime="20220314 17:00:08.449"/>
</kw>
<status status="FAIL" starttime="20220314 17:00:06.370" endtime="20220314 17:00:08.452"/>
</kw>
<msg timestamp="20220314 17:00:08.452" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 17:00:06.369" endtime="20220314 17:00:08.452"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:00:08.454" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:00:08.453" endtime="20220314 17:00:08.455"/>
</kw>
<status status="PASS" starttime="20220314 17:00:06.368" endtime="20220314 17:00:08.455"/>
</iter>
<status status="PASS" starttime="20220314 17:00:06.367" endtime="20220314 17:00:08.455"/>
</for>
<status status="PASS" starttime="20220314 17:00:06.367" endtime="20220314 17:00:08.455"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:00:10.469" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 17:00:08.458" endtime="20220314 17:00:10.471"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:00:10.482" level="FAIL">Failure: Selector ".right-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 17:00:10.472" endtime="20220314 17:00:10.482"/>
</kw>
<status status="FAIL" starttime="20220314 17:00:08.457" endtime="20220314 17:00:10.484"/>
</kw>
<msg timestamp="20220314 17:00:10.485" level="INFO">${right_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 17:00:08.456" endtime="20220314 17:00:10.485"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:00:10.487" endtime="20220314 17:00:10.521"/>
</kw>
<msg timestamp="20220314 17:00:10.521" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220314 17:00:10.486" endtime="20220314 17:00:10.522"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:00:10.523" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:00:10.522" endtime="20220314 17:00:10.524"/>
</kw>
<status status="PASS" starttime="20220314 17:00:08.456" endtime="20220314 17:00:10.524"/>
</iter>
<status status="PASS" starttime="20220314 17:00:08.455" endtime="20220314 17:00:10.524"/>
</for>
<status status="PASS" starttime="20220314 17:00:06.365" endtime="20220314 17:00:10.524"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_device_in_active_state}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:00:10.527" endtime="20220314 17:00:10.553"/>
</kw>
<status status="PASS" starttime="20220314 17:00:10.526" endtime="20220314 17:00:10.553"/>
</kw>
<msg timestamp="20220314 17:00:10.553" level="INFO">${is_device_in_active_state} = True</msg>
<status status="PASS" starttime="20220314 17:00:10.525" endtime="20220314 17:00:10.553"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${is_device_in_active_state} is ${True}</arg>
<arg>${True}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 17:00:10.554" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 17:00:10.553" endtime="20220314 17:00:10.554"/>
</kw>
<status status="PASS" starttime="20220314 16:59:58.240" endtime="20220314 17:00:10.554"/>
</kw>
<msg timestamp="20220314 17:00:10.554" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 16:59:58.238" endtime="20220314 17:00:10.554"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'False'">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>${device_name} not loaded in GHub.</arg>
<status status="NOT RUN" starttime="20220314 17:00:10.555" endtime="20220314 17:00:10.555"/>
</kw>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220314 17:00:10.555" endtime="20220314 17:00:10.555"/>
</kw>
<status status="NOT RUN" starttime="20220314 17:00:10.554" endtime="20220314 17:00:10.555"/>
</branch>
<status status="PASS" starttime="20220314 17:00:10.554" endtime="20220314 17:00:10.555"/>
</if>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:00:10.555" endtime="20220314 17:00:11.189"/>
</kw>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 17:00:13.256" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220314 17:00:13.256" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:00:11.193" endtime="20220314 17:00:13.256"/>
</kw>
<status status="PASS" starttime="20220314 17:00:11.192" endtime="20220314 17:00:13.257"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 17:00:15.323" level="FAIL">Failure: Selector "//*[@id="color-variant"]/button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:00:13.259" endtime="20220314 17:00:15.323"/>
</kw>
<status status="PASS" starttime="20220314 17:00:13.258" endtime="20220314 17:00:15.323"/>
</kw>
<status status="PASS" starttime="20220314 17:00:11.191" endtime="20220314 17:00:15.324"/>
</kw>
<kw name="device_view.Handle Got It Popup" library="device_main_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${got_it_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_got_it_button}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_got_it_button}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:00:20.348" level="FAIL">Failure: Selector "//div[@class='coach-mark']/button[text()='GOT IT']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:00:15.328" endtime="20220314 17:00:20.349"/>
</kw>
<msg timestamp="20220314 17:00:20.349" level="INFO">${got_it_button_present} = False</msg>
<status status="PASS" starttime="20220314 17:00:15.327" endtime="20220314 17:00:20.349"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${got_it_button_present} is ${False}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 17:00:20.351" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 17:00:20.351" endtime="20220314 17:00:20.352"/>
</kw>
<status status="PASS" starttime="20220314 17:00:15.326" endtime="20220314 17:00:20.353"/>
</kw>
<status status="PASS" starttime="20220314 16:59:58.226" endtime="20220314 17:00:20.353"/>
</kw>
<kw name="sensitivity_dpi.Select Sensitvity Dpi Button" library="sensitivity_dpi_screen">
<kw name="Click" library="libraries.components.React">
<arg>${sensitivity_dpi_senstivity_dpi}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:00:20.356" endtime="20220314 17:00:20.964"/>
</kw>
<status status="PASS" starttime="20220314 17:00:20.355" endtime="20220314 17:00:20.965"/>
</kw>
<kw name="sensitivity_dpi.Click On Restore Default Settings" library="sensitivity_dpi_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${sensitivity_dpi_restore_default}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 17:00:20.970" level="INFO">${words} = ['.panel-button', 'text=RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 17:00:20.969" endtime="20220314 17:00:20.970"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 17:00:20.970" level="INFO">Length is 2</msg>
<msg timestamp="20220314 17:00:20.970" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20220314 17:00:20.970" endtime="20220314 17:00:20.970"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="__Click UI Based On Attribute__" library="common_keywords_kragle">
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<doc>Internal fuction to do additional check on 'Click UI'. Not to be used anywhere else.</doc>
<kw name="Split String" library="String">
<var>${sub_words}</var>
<arg>${word}</arg>
<arg>=</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 17:00:20.971" level="INFO">${sub_words} = ['text', 'RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 17:00:20.971" endtime="20220314 17:00:20.971"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='text'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:00:20.972" endtime="20220314 17:00:21.564"/>
</kw>
<status status="PASS" starttime="20220314 17:00:20.972" endtime="20220314 17:00:21.564"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='innerText'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>innerText=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:00:21.565" endtime="20220314 17:00:21.566"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='value'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>value=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:00:21.567" endtime="20220314 17:00:21.567"/>
</kw>
<status status="PASS" starttime="20220314 17:00:20.971" endtime="20220314 17:00:21.568"/>
</kw>
<status status="PASS" starttime="20220314 17:00:20.970" endtime="20220314 17:00:21.568"/>
</kw>
<status status="PASS" starttime="20220314 17:00:20.967" endtime="20220314 17:00:21.568"/>
</kw>
<status status="PASS" starttime="20220314 17:00:20.966" endtime="20220314 17:00:21.569"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${dpi_value}</var>
<arg>1800</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220314 17:00:21.570" level="INFO">${dpi_value} = 1800</msg>
<status status="PASS" starttime="20220314 17:00:21.570" endtime="20220314 17:00:21.570"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${report_rate}</var>
<arg>125</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220314 17:00:21.572" level="INFO">${report_rate} = 125</msg>
<status status="PASS" starttime="20220314 17:00:21.571" endtime="20220314 17:00:21.572"/>
</kw>
<kw name="dpi.Change DPI Value To" library="dpi">
<arg>${device}</arg>
<arg>${dpi_value}</arg>
<doc>Change DPI value in a special value</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>3</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="sensitivity_dpi.Update DPI Speed Of Selected DPI" library="sensitivity_dpi_screen">
<arg>${value}</arg>
<kw name="Log To Console" library="BuiltIn">
<arg>Updating DPI Speed (as: ${dpi}) Of Selected DPI</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:00:21.577" endtime="20220314 17:00:21.577"/>
</kw>
<kw name="sensitivity_dpi.Click On Selected DPI Speed" library="sensitivity_dpi_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_selected_dpi_speed}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:00:21.579" endtime="20220314 17:00:22.144"/>
</kw>
<status status="PASS" starttime="20220314 17:00:21.578" endtime="20220314 17:00:22.145"/>
</kw>
<kw name="Input" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_selected_dpi_speed}</arg>
<arg>keys=${dpi}</arg>
<doc>Asserts that an element successfully receives input events for the given keys.</doc>
<status status="PASS" starttime="20220314 17:00:22.146" endtime="20220314 17:00:25.269"/>
</kw>
<status status="PASS" starttime="20220314 17:00:21.575" endtime="20220314 17:00:25.269"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>3</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 17:00:28.271" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20220314 17:00:25.271" endtime="20220314 17:00:28.271"/>
</kw>
<kw name="sensitivity_dpi.Get Current DPI Value" library="sensitivity_dpi_screen">
<var>${GUI_dpi}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${dpi_current}</var>
<arg>selector=${sensitivity_dpi_speed_selected}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 17:00:28.305" level="INFO">${dpi_current} = 1800</msg>
<status status="PASS" starttime="20220314 17:00:28.275" endtime="20220314 17:00:28.305"/>
</kw>
<msg timestamp="20220314 17:00:28.305" level="INFO">${GUI_dpi} = 1800</msg>
<status status="PASS" starttime="20220314 17:00:28.273" endtime="20220314 17:00:28.305"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>GUI DPI is ${GUI_dpi}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:00:28.306" endtime="20220314 17:00:28.307"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${GUI_dpi}==${value}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:00:28.309" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:00:28.308" endtime="20220314 17:00:28.309"/>
</kw>
<status status="PASS" starttime="20220314 17:00:21.574" endtime="20220314 17:00:28.310"/>
</iter>
<status status="PASS" starttime="20220314 17:00:21.574" endtime="20220314 17:00:28.310"/>
</for>
<status status="PASS" starttime="20220314 17:00:21.573" endtime="20220314 17:00:28.310"/>
</kw>
<kw name="dpi.Set Firmware Report Rate To" library="dpi">
<arg>${device}</arg>
<arg>${report_rate}</arg>
<doc>- Select the preset Report Rate
- Verify the Report Rate set to device by querying firmware</doc>
<for flavor="IN RANGE">
<var>${i}</var>
<value>1</value>
<value>5</value>
<iter>
<var name="${i}">1</var>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>${i}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:00:28.311" endtime="20220314 17:00:28.885"/>
</kw>
<status status="PASS" starttime="20220314 17:00:28.311" endtime="20220314 17:00:28.885"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_reportRate}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 17:00:28.918" level="INFO">${report_rate} = 1000</msg>
<status status="PASS" starttime="20220314 17:00:28.889" endtime="20220314 17:00:28.918"/>
</kw>
<msg timestamp="20220314 17:00:28.919" level="INFO">${GUI_reportRate} = 1000</msg>
<status status="PASS" starttime="20220314 17:00:28.887" endtime="20220314 17:00:28.919"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>'${GUI_reportRate}' == '${reportRate}'</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:00:28.920" endtime="20220314 17:00:28.921"/>
</kw>
<status status="PASS" starttime="20220314 17:00:28.311" endtime="20220314 17:00:28.921"/>
</iter>
<iter>
<var name="${i}">2</var>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>${i}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:00:28.924" endtime="20220314 17:00:29.498"/>
</kw>
<status status="PASS" starttime="20220314 17:00:28.923" endtime="20220314 17:00:29.499"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_reportRate}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 17:00:29.528" level="INFO">${report_rate} = 500</msg>
<status status="PASS" starttime="20220314 17:00:29.502" endtime="20220314 17:00:29.528"/>
</kw>
<msg timestamp="20220314 17:00:29.529" level="INFO">${GUI_reportRate} = 500</msg>
<status status="PASS" starttime="20220314 17:00:29.500" endtime="20220314 17:00:29.529"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>'${GUI_reportRate}' == '${reportRate}'</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:00:29.530" endtime="20220314 17:00:29.531"/>
</kw>
<status status="PASS" starttime="20220314 17:00:28.921" endtime="20220314 17:00:29.531"/>
</iter>
<iter>
<var name="${i}">3</var>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>${i}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:00:29.534" endtime="20220314 17:00:30.112"/>
</kw>
<status status="PASS" starttime="20220314 17:00:29.533" endtime="20220314 17:00:30.113"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_reportRate}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 17:00:30.144" level="INFO">${report_rate} = 250</msg>
<status status="PASS" starttime="20220314 17:00:30.116" endtime="20220314 17:00:30.144"/>
</kw>
<msg timestamp="20220314 17:00:30.145" level="INFO">${GUI_reportRate} = 250</msg>
<status status="PASS" starttime="20220314 17:00:30.115" endtime="20220314 17:00:30.145"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>'${GUI_reportRate}' == '${reportRate}'</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:00:30.146" endtime="20220314 17:00:30.147"/>
</kw>
<status status="PASS" starttime="20220314 17:00:29.532" endtime="20220314 17:00:30.147"/>
</iter>
<iter>
<var name="${i}">4</var>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>${i}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:00:30.149" endtime="20220314 17:00:30.722"/>
</kw>
<status status="PASS" starttime="20220314 17:00:30.148" endtime="20220314 17:00:30.722"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_reportRate}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 17:00:30.752" level="INFO">${report_rate} = 125</msg>
<status status="PASS" starttime="20220314 17:00:30.726" endtime="20220314 17:00:30.753"/>
</kw>
<msg timestamp="20220314 17:00:30.753" level="INFO">${GUI_reportRate} = 125</msg>
<status status="PASS" starttime="20220314 17:00:30.724" endtime="20220314 17:00:30.753"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>'${GUI_reportRate}' == '${reportRate}'</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:00:30.755" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:00:30.754" endtime="20220314 17:00:30.756"/>
</kw>
<status status="PASS" starttime="20220314 17:00:30.147" endtime="20220314 17:00:30.756"/>
</iter>
<status status="PASS" starttime="20220314 17:00:28.310" endtime="20220314 17:00:30.756"/>
</for>
<status status="PASS" starttime="20220314 17:00:28.310" endtime="20220314 17:00:30.756"/>
</kw>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:00:35.828" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:00:30.762" endtime="20220314 17:00:35.828"/>
</kw>
<status status="FAIL" starttime="20220314 17:00:30.762" endtime="20220314 17:00:35.831"/>
</kw>
<msg timestamp="20220314 17:00:35.831" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 17:00:30.761" endtime="20220314 17:00:35.831"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 17:00:35.833" endtime="20220314 17:00:35.833"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 17:00:35.834" endtime="20220314 17:00:35.834"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 17:00:35.836" endtime="20220314 17:00:35.836"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 17:00:35.837" endtime="20220314 17:00:35.837"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 17:00:35.838" endtime="20220314 17:00:35.838"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 17:00:35.838" endtime="20220314 17:00:35.838"/>
</kw>
<status status="NOT RUN" starttime="20220314 17:00:35.832" endtime="20220314 17:00:35.839"/>
</branch>
<status status="PASS" starttime="20220314 17:00:35.832" endtime="20220314 17:00:35.839"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 17:00:35.841" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 17:00:35.841" endtime="20220314 17:00:35.841"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 17:00:35.842" level="INFO">Length is 1</msg>
<msg timestamp="20220314 17:00:35.842" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 17:00:35.842" endtime="20220314 17:00:35.842"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:00:45.860" level="INFO">Failed to find element with selector: #home-view and attributes:{}</msg>
<msg timestamp="20220314 17:00:45.862" level="FAIL">Failure: Selector "#home-view" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:00:35.843" endtime="20220314 17:00:45.862"/>
</kw>
<status status="FAIL" starttime="20220314 17:00:35.842" endtime="20220314 17:00:45.863"/>
</kw>
<status status="FAIL" starttime="20220314 17:00:35.840" endtime="20220314 17:00:45.864"/>
</kw>
<msg timestamp="20220314 17:00:45.864" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220314 17:00:35.839" endtime="20220314 17:00:45.864"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:00:45.865" endtime="20220314 17:00:45.865"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:00:45.866" endtime="20220314 17:00:45.890"/>
</kw>
<msg timestamp="20220314 17:00:45.890" level="INFO">${back_button_present} = True</msg>
<status status="PASS" starttime="20220314 17:00:45.866" endtime="20220314 17:00:45.890"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:00:45.892" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:00:45.891" endtime="20220314 17:00:45.892"/>
</kw>
<status status="PASS" starttime="20220314 17:00:30.760" endtime="20220314 17:00:45.893"/>
</iter>
<status status="PASS" starttime="20220314 17:00:30.759" endtime="20220314 17:00:45.893"/>
</for>
<status status="PASS" starttime="20220314 17:00:30.759" endtime="20220314 17:00:45.893"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:00:45.896" endtime="20220314 17:00:45.911"/>
</kw>
<msg timestamp="20220314 17:00:45.911" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 17:00:45.896" endtime="20220314 17:00:45.911"/>
</kw>
<msg timestamp="20220314 17:00:45.912" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 17:00:45.895" endtime="20220314 17:00:45.912"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:00:45.912" endtime="20220314 17:00:45.913"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${clicked}</var>
<arg>common.Click On Back</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:00:45.915" endtime="20220314 17:00:46.500"/>
</kw>
<status status="PASS" starttime="20220314 17:00:45.914" endtime="20220314 17:00:46.501"/>
</kw>
<msg timestamp="20220314 17:00:46.501" level="INFO">${clicked} = True</msg>
<status status="PASS" starttime="20220314 17:00:45.913" endtime="20220314 17:00:46.501"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clicked}==False</arg>
<arg>common.alerts</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:00:46.503" endtime="20220314 17:00:46.503"/>
</kw>
<status status="PASS" starttime="20220314 17:00:45.894" endtime="20220314 17:00:46.503"/>
</iter>
<iter>
<var name="${index}">1</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:00:47.522" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 17:00:47.523" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:00:46.508" endtime="20220314 17:00:47.523"/>
</kw>
<msg timestamp="20220314 17:00:47.524" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 17:00:46.507" endtime="20220314 17:00:47.524"/>
</kw>
<msg timestamp="20220314 17:00:47.525" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 17:00:46.505" endtime="20220314 17:00:47.525"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:00:47.527" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:00:47.526" endtime="20220314 17:00:47.527"/>
</kw>
<status status="PASS" starttime="20220314 17:00:46.504" endtime="20220314 17:00:47.527"/>
</iter>
<status status="PASS" starttime="20220314 17:00:45.893" endtime="20220314 17:00:47.528"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 17:00:47.532" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 17:00:47.531" endtime="20220314 17:00:47.532"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 17:00:47.532" level="INFO">Length is 1</msg>
<msg timestamp="20220314 17:00:47.532" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 17:00:47.532" endtime="20220314 17:00:47.532"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:00:47.534" endtime="20220314 17:00:47.550"/>
</kw>
<status status="PASS" starttime="20220314 17:00:47.533" endtime="20220314 17:00:47.550"/>
</kw>
<status status="PASS" starttime="20220314 17:00:47.530" endtime="20220314 17:00:47.550"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:00:49.562" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 17:00:47.551" endtime="20220314 17:00:49.565"/>
</kw>
<status status="PASS" starttime="20220314 17:00:47.529" endtime="20220314 17:00:49.566"/>
</kw>
<status status="PASS" starttime="20220314 17:00:30.758" endtime="20220314 17:00:49.566"/>
</kw>
<kw name="backend.Verify DPI Of Device" library="backend">
<arg>${dpi_value}</arg>
<arg>${device['displayName']}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 17:00:49.584" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 17:00:49.584" endtime="20220314 17:00:49.584"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 17:00:50.591" level="INFO">17:00:49.590018: {"msgId": "a90198a6-f3ac-4d7e-9ad9-c1bb1cab07a1", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO", "ZONE_PRIMARY": "PRIMARY"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 17:00:50.592" level="INFO">${res} =  {"msgId": "a90198a6-f3ac-4d7e-9ad9-c1bb1cab07a1", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 17:00:49.585" endtime="20220314 17:00:50.592"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 17:00:50.594" level="INFO">${res} = {'msgId': 'a90198a6-f3ac-4d7e-9ad9-c1bb1cab07a1', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 17:00:50.593" endtime="20220314 17:00:50.594"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:00:50.625" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 17:00:50.597" endtime="20220314 17:00:50.625"/>
</kw>
<msg timestamp="20220314 17:00:50.625" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 17:00:50.596" endtime="20220314 17:00:50.625"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:00:50.855" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:00:50.627" endtime="20220314 17:00:50.855"/>
</kw>
<msg timestamp="20220314 17:00:50.872" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:00:50.627" endtime="20220314 17:00:50.872"/>
</kw>
<msg timestamp="20220314 17:00:50.873" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:00:50.626" endtime="20220314 17:00:50.873"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:00:51.043" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 17:00:50.875" endtime="20220314 17:00:51.043"/>
</kw>
<msg timestamp="20220314 17:00:51.043" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 17:00:50.874" endtime="20220314 17:00:51.043"/>
</kw>
<msg timestamp="20220314 17:00:51.043" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 17:00:50.873" endtime="20220314 17:00:51.043"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:00:51.319" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g9_m1_shifted', 'g903hero_g6_m1', 'g903hero_g4_m1_shifted'...</msg>
<status status="PASS" starttime="20220314 17:00:51.045" endtime="20220314 17:00:51.319"/>
</kw>
<msg timestamp="20220314 17:00:51.320" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g9_m1_shifted', 'g903hero_g6_m1', 'g903hero_g4_m1_shifted'...</msg>
<status status="PASS" starttime="20220314 17:00:51.045" endtime="20220314 17:00:51.320"/>
</kw>
<msg timestamp="20220314 17:00:51.320" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 17:00:51.044" endtime="20220314 17:00:51.320"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:00:51.321" endtime="20220314 17:00:51.321"/>
</kw>
<status status="PASS" starttime="20220314 17:00:51.043" endtime="20220314 17:00:51.321"/>
</branch>
<status status="PASS" starttime="20220314 17:00:51.043" endtime="20220314 17:00:51.321"/>
</if>
<status status="PASS" starttime="20220314 17:00:50.873" endtime="20220314 17:00:51.321"/>
</iter>
<status status="PASS" starttime="20220314 17:00:50.873" endtime="20220314 17:00:51.321"/>
</for>
<msg timestamp="20220314 17:00:51.322" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 17:00:49.583" endtime="20220314 17:00:51.322"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 17:00:51.322" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/dpi'}</msg>
<status status="PASS" starttime="20220314 17:00:51.322" endtime="20220314 17:00:51.322"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 17:00:51.323" endtime="20220314 17:00:51.325"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 17:00:52.325" level="INFO">17:00:51.324639: {"msgId": "ee691474-b0ad-4a1c-b1e3-3e627fff7b24", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.Dpi.State", "deviceId": "dev00000000", "dpi": 1800, "dpiIndex": 3, "shifted": false}}</msg>
<msg timestamp="20220314 17:00:52.325" level="INFO">${response} =  {"msgId": "ee691474-b0ad-4a1c-b1e3-3e627fff7b24", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapi...</msg>
<status status="PASS" starttime="20220314 17:00:51.325" endtime="20220314 17:00:52.325"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 17:00:52.327" level="INFO">${response} = {'msgId': 'ee691474-b0ad-4a1c-b1e3-3e627fff7b24', 'verb': 'GET', 'path': '/mouse/dev00000000/dpi', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis...</msg>
<status status="PASS" starttime="20220314 17:00:52.327" endtime="20220314 17:00:52.327"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:00:52.353" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 17:00:52.333" endtime="20220314 17:00:52.353"/>
</kw>
<msg timestamp="20220314 17:00:52.354" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 17:00:52.331" endtime="20220314 17:00:52.354"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:00:52.368" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 17:00:52.355" endtime="20220314 17:00:52.368"/>
</kw>
<msg timestamp="20220314 17:00:52.369" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 17:00:52.354" endtime="20220314 17:00:52.369"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:00:52.369" endtime="20220314 17:00:52.369"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 17:00:52.370" endtime="20220314 17:00:52.370"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 17:00:52.370" endtime="20220314 17:00:52.370"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:00:52.371" endtime="20220314 17:00:52.371"/>
</kw>
<status status="PASS" starttime="20220314 17:00:52.329" endtime="20220314 17:00:52.371"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_dpi}</var>
<arg>${response}</arg>
<arg>dpi</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:00:52.389" level="INFO">${result} = [1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800]</msg>
<status status="PASS" starttime="20220314 17:00:52.372" endtime="20220314 17:00:52.389"/>
</kw>
<msg timestamp="20220314 17:00:52.389" level="INFO">${result} = [1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800]</msg>
<status status="PASS" starttime="20220314 17:00:52.372" endtime="20220314 17:00:52.389"/>
</kw>
<msg timestamp="20220314 17:00:52.390" level="INFO">${backend_dpi} = 1800</msg>
<status status="PASS" starttime="20220314 17:00:52.371" endtime="20220314 17:00:52.390"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_dpi}</arg>
<arg>${backend_dpi}</arg>
<arg>The expected dpi value (${expected_dpi}) and actual value from backend (${backend_dpi}) is different</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 17:00:52.391" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 17:00:52.391" endtime="20220314 17:00:52.391"/>
</kw>
<status status="PASS" starttime="20220314 17:00:49.568" endtime="20220314 17:00:52.392"/>
</kw>
<kw name="backend.Verify Report Rate" library="backend">
<arg>${device['displayName']}</arg>
<arg>${report_rate}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 17:00:52.412" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 17:00:52.412" endtime="20220314 17:00:52.412"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 17:00:53.418" level="INFO">17:00:52.417290: {"msgId": "8abb7f4d-49af-4bb0-a08e-c1fffcc70cdb", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO", "ZONE_PRIMARY": "PRIMARY"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 17:00:53.419" level="INFO">${res} =  {"msgId": "8abb7f4d-49af-4bb0-a08e-c1fffcc70cdb", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 17:00:52.413" endtime="20220314 17:00:53.419"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 17:00:53.421" level="INFO">${res} = {'msgId': '8abb7f4d-49af-4bb0-a08e-c1fffcc70cdb', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 17:00:53.420" endtime="20220314 17:00:53.421"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:00:53.450" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 17:00:53.424" endtime="20220314 17:00:53.450"/>
</kw>
<msg timestamp="20220314 17:00:53.451" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 17:00:53.422" endtime="20220314 17:00:53.451"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:00:53.648" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:00:53.452" endtime="20220314 17:00:53.648"/>
</kw>
<msg timestamp="20220314 17:00:53.666" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:00:53.452" endtime="20220314 17:00:53.666"/>
</kw>
<msg timestamp="20220314 17:00:53.666" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:00:53.451" endtime="20220314 17:00:53.666"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:00:53.867" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 17:00:53.668" endtime="20220314 17:00:53.867"/>
</kw>
<msg timestamp="20220314 17:00:53.868" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 17:00:53.668" endtime="20220314 17:00:53.868"/>
</kw>
<msg timestamp="20220314 17:00:53.868" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 17:00:53.667" endtime="20220314 17:00:53.868"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:00:54.124" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g4_m1', 'g903hero_g5_m1_shifted', 'g903hero_g10_m1', 'g903...</msg>
<status status="PASS" starttime="20220314 17:00:53.872" endtime="20220314 17:00:54.124"/>
</kw>
<msg timestamp="20220314 17:00:54.126" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g4_m1', 'g903hero_g5_m1_shifted', 'g903hero_g10_m1', 'g903...</msg>
<status status="PASS" starttime="20220314 17:00:53.871" endtime="20220314 17:00:54.126"/>
</kw>
<msg timestamp="20220314 17:00:54.126" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 17:00:53.870" endtime="20220314 17:00:54.126"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:00:54.126" endtime="20220314 17:00:54.127"/>
</kw>
<status status="PASS" starttime="20220314 17:00:53.869" endtime="20220314 17:00:54.127"/>
</branch>
<status status="PASS" starttime="20220314 17:00:53.868" endtime="20220314 17:00:54.127"/>
</if>
<status status="PASS" starttime="20220314 17:00:53.667" endtime="20220314 17:00:54.127"/>
</iter>
<status status="PASS" starttime="20220314 17:00:53.666" endtime="20220314 17:00:54.127"/>
</for>
<msg timestamp="20220314 17:00:54.127" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 17:00:52.411" endtime="20220314 17:00:54.127"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 17:00:54.127" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/report_rate'}</msg>
<status status="PASS" starttime="20220314 17:00:54.127" endtime="20220314 17:00:54.127"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 17:00:54.128" endtime="20220314 17:00:54.131"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 17:00:55.132" level="INFO">17:00:54.130758: {"msgId": "86d9f336-3a5a-40e5-95f5-b9e8d2aed17b", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.ReportRate", "value": 125}}</msg>
<msg timestamp="20220314 17:00:55.132" level="INFO">${response} =  {"msgId": "86d9f336-3a5a-40e5-95f5-b9e8d2aed17b", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.g...</msg>
<status status="PASS" starttime="20220314 17:00:54.131" endtime="20220314 17:00:55.132"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 17:00:55.133" level="INFO">${response} = {'msgId': '86d9f336-3a5a-40e5-95f5-b9e8d2aed17b', 'verb': 'GET', 'path': '/mouse/dev00000000/report_rate', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.go...</msg>
<status status="PASS" starttime="20220314 17:00:55.133" endtime="20220314 17:00:55.133"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:00:55.153" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 17:00:55.136" endtime="20220314 17:00:55.153"/>
</kw>
<msg timestamp="20220314 17:00:55.153" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 17:00:55.135" endtime="20220314 17:00:55.153"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:00:55.179" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 17:00:55.154" endtime="20220314 17:00:55.179"/>
</kw>
<msg timestamp="20220314 17:00:55.179" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 17:00:55.154" endtime="20220314 17:00:55.179"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:00:55.181" endtime="20220314 17:00:55.181"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 17:00:55.181" endtime="20220314 17:00:55.181"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 17:00:55.182" endtime="20220314 17:00:55.182"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:00:55.182" endtime="20220314 17:00:55.182"/>
</kw>
<status status="PASS" starttime="20220314 17:00:55.134" endtime="20220314 17:00:55.182"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_report_rate}</var>
<arg>${response}</arg>
<arg>value</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:00:55.197" level="INFO">${result} = [125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125]</msg>
<status status="PASS" starttime="20220314 17:00:55.184" endtime="20220314 17:00:55.197"/>
</kw>
<msg timestamp="20220314 17:00:55.197" level="INFO">${result} = [125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125]</msg>
<status status="PASS" starttime="20220314 17:00:55.183" endtime="20220314 17:00:55.197"/>
</kw>
<msg timestamp="20220314 17:00:55.197" level="INFO">${backend_report_rate} = 125</msg>
<status status="PASS" starttime="20220314 17:00:55.183" endtime="20220314 17:00:55.197"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_report_rate}</arg>
<arg>${backend_report_rate}</arg>
<arg>The expected repo rate (${expected_report_rate}) and the actual value from backend repo rate (${backend_report_rate}) does not match</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 17:00:55.198" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 17:00:55.198" endtime="20220314 17:00:55.198"/>
</kw>
<status status="PASS" starttime="20220314 17:00:52.393" endtime="20220314 17:00:55.198"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Going to sleep...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:00:55.199" endtime="20220314 17:00:55.199"/>
</kw>
<kw name="os.Put System On Sleep" library="operating_system">
<doc>Put system in sleep for perticular time period.</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Note: Operating System is sleeping for ${sleep_time} sec.</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:00:55.200" endtime="20220314 17:00:55.200"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Note: Do not press any key on system for next ${sleep_time} sec.</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:00:55.200" endtime="20220314 17:00:55.200"/>
</kw>
<kw name="Is Darwin" library="libraries.input.keyboard">
<var>${is_mac}</var>
<msg timestamp="20220314 17:00:55.201" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220314 17:00:55.200" endtime="20220314 17:00:55.201"/>
</kw>
<if>
<branch type="IF" condition="${is_mac} is ${True}">
<kw name="Mac Sleep">
<arg>sleep_time=${sleep_time}</arg>
<arg>delay=30</arg>
<arg>cycles=1</arg>
<status status="NOT RUN" starttime="20220314 17:00:55.233" endtime="20220314 17:00:55.233"/>
</kw>
<status status="NOT RUN" starttime="20220314 17:00:55.201" endtime="20220314 17:00:55.233"/>
</branch>
<branch type="ELSE">
<kw name="Sleep System" library="libraries.power_management.sleep_system">
<arg>sleep_states=3</arg>
<arg>sleep_time=${sleep_time}</arg>
<arg>cycles=1</arg>
<arg>delay=20</arg>
<msg timestamp="20220314 17:00:57.317" level="INFO">C:\Users\cpgpq\Documents\Automation\gerty/report
&gt;&gt; C:\Users\cpgpq\Documents\Automation\gerty\tools\python\mindstorm\power_management/pwrtest.exe /sleep /s:3 /p:40 /c:1 /d:20 /e:120 /lf:C:/Users/cpgpq/Documents/Automation/gerty/report
An error occurred during the command!</msg>
<status status="PASS" starttime="20220314 17:00:55.234" endtime="20220314 17:00:57.318"/>
</kw>
<status status="PASS" starttime="20220314 17:00:55.233" endtime="20220314 17:00:57.318"/>
</branch>
<status status="PASS" starttime="20220314 17:00:55.201" endtime="20220314 17:00:57.318"/>
</if>
<kw name="common.Wait Until GHUB Restores" library="common_keywords_kragle">
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 17:01:02.320" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220314 17:00:57.320" endtime="20220314 17:01:02.320"/>
</kw>
<for flavor="IN RANGE">
<var>${i}</var>
<value>0</value>
<value>12</value>
<iter>
<var name="${i}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:01:07.342" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:01:02.325" endtime="20220314 17:01:07.342"/>
</kw>
<status status="FAIL" starttime="20220314 17:01:02.323" endtime="20220314 17:01:07.345"/>
</kw>
<msg timestamp="20220314 17:01:07.345" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 17:01:02.322" endtime="20220314 17:01:07.345"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${status} is ${True}</arg>
<arg>Sleep</arg>
<arg>10</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:01:07.346" endtime="20220314 17:01:07.347"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:01:07.349" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:01:07.348" endtime="20220314 17:01:07.349"/>
</kw>
<status status="PASS" starttime="20220314 17:01:02.321" endtime="20220314 17:01:07.349"/>
</iter>
<status status="PASS" starttime="20220314 17:01:02.320" endtime="20220314 17:01:07.350"/>
</for>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:01:12.361" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:01:07.352" endtime="20220314 17:01:12.361"/>
</kw>
<status status="FAIL" starttime="20220314 17:01:07.351" endtime="20220314 17:01:12.364"/>
</kw>
<msg timestamp="20220314 17:01:12.364" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 17:01:07.350" endtime="20220314 17:01:12.364"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_home_screen}</var>
<arg>home.Is Screen Loaded</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 17:01:12.370" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 17:01:12.369" endtime="20220314 17:01:12.370"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 17:01:12.371" level="INFO">Length is 1</msg>
<msg timestamp="20220314 17:01:12.371" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 17:01:12.370" endtime="20220314 17:01:12.371"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:01:12.373" endtime="20220314 17:01:12.389"/>
</kw>
<status status="PASS" starttime="20220314 17:01:12.372" endtime="20220314 17:01:12.389"/>
</kw>
<status status="PASS" starttime="20220314 17:01:12.368" endtime="20220314 17:01:12.390"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:01:14.453" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 17:01:12.390" endtime="20220314 17:01:14.455"/>
</kw>
<status status="PASS" starttime="20220314 17:01:12.367" endtime="20220314 17:01:14.456"/>
</kw>
<msg timestamp="20220314 17:01:14.456" level="INFO">${is_home_screen} = True</msg>
<status status="PASS" starttime="20220314 17:01:12.365" endtime="20220314 17:01:14.456"/>
</kw>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${is_back_button}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:01:15.467" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 17:01:15.468" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:01:14.459" endtime="20220314 17:01:15.469"/>
</kw>
<msg timestamp="20220314 17:01:15.469" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 17:01:14.458" endtime="20220314 17:01:15.469"/>
</kw>
<msg timestamp="20220314 17:01:15.470" level="INFO">${is_back_button} = False</msg>
<status status="PASS" starttime="20220314 17:01:14.457" endtime="20220314 17:01:15.470"/>
</kw>
<if>
<branch type="IF" condition="${status} is ${True} or ${is_home_screen} is ${False} and ${is_back_button} is ${False}">
<kw name="LOG ERROR" library="logging">
<arg>GHUB does not recovered after system sleep, restarting GHUB...</arg>
<doc>Log a FATAL ERROR in the report.
This should be used to signify an action/validation that would MOST LIKELY result in failure.</doc>
<status status="NOT RUN" starttime="20220314 17:01:15.472" endtime="20220314 17:01:15.472"/>
</kw>
<kw name="common.Restart GHUB" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 17:01:15.473" endtime="20220314 17:01:15.473"/>
</kw>
<status status="NOT RUN" starttime="20220314 17:01:15.471" endtime="20220314 17:01:15.473"/>
</branch>
<status status="PASS" starttime="20220314 17:01:15.470" endtime="20220314 17:01:15.473"/>
</if>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 17:01:20.476" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220314 17:01:15.474" endtime="20220314 17:01:20.476"/>
</kw>
<status status="PASS" starttime="20220314 17:00:57.318" endtime="20220314 17:01:20.477"/>
</kw>
<status status="PASS" starttime="20220314 17:00:55.199" endtime="20220314 17:01:20.477"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Woke up.</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:01:20.478" endtime="20220314 17:01:20.479"/>
</kw>
<kw name="home.Open Device Configuration" library="home_screen">
<arg>${device['displayName']}</arg>
<doc>Click on the device to open device configuration and if device introduction page opens then skip it.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device Home Screen Loaded</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device Home Screen Loaded" library="home_screen">
<arg>${device_name}</arg>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:01:25.518" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:01:20.501" endtime="20220314 17:01:25.519"/>
</kw>
<status status="FAIL" starttime="20220314 17:01:20.501" endtime="20220314 17:01:25.520"/>
</kw>
<msg timestamp="20220314 17:01:25.520" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 17:01:20.500" endtime="20220314 17:01:25.521"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 17:01:25.521" endtime="20220314 17:01:25.521"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 17:01:25.522" endtime="20220314 17:01:25.522"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 17:01:25.523" endtime="20220314 17:01:25.523"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 17:01:25.523" endtime="20220314 17:01:25.523"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 17:01:25.523" endtime="20220314 17:01:25.523"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 17:01:25.524" endtime="20220314 17:01:25.524"/>
</kw>
<status status="NOT RUN" starttime="20220314 17:01:25.521" endtime="20220314 17:01:25.524"/>
</branch>
<status status="PASS" starttime="20220314 17:01:25.521" endtime="20220314 17:01:25.524"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 17:01:25.526" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 17:01:25.525" endtime="20220314 17:01:25.526"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 17:01:25.527" level="INFO">Length is 1</msg>
<msg timestamp="20220314 17:01:25.527" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 17:01:25.527" endtime="20220314 17:01:25.527"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:01:25.529" endtime="20220314 17:01:25.544"/>
</kw>
<status status="PASS" starttime="20220314 17:01:25.528" endtime="20220314 17:01:25.544"/>
</kw>
<status status="PASS" starttime="20220314 17:01:25.525" endtime="20220314 17:01:25.544"/>
</kw>
<msg timestamp="20220314 17:01:25.544" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220314 17:01:25.524" endtime="20220314 17:01:25.544"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:01:25.545" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:01:25.545" endtime="20220314 17:01:25.545"/>
</kw>
<status status="PASS" starttime="20220314 17:01:20.500" endtime="20220314 17:01:25.545"/>
</iter>
<status status="PASS" starttime="20220314 17:01:20.500" endtime="20220314 17:01:25.546"/>
</for>
<status status="PASS" starttime="20220314 17:01:20.500" endtime="20220314 17:01:25.546"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:01:26.562" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 17:01:26.563" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:01:25.548" endtime="20220314 17:01:26.564"/>
</kw>
<msg timestamp="20220314 17:01:26.564" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 17:01:25.547" endtime="20220314 17:01:26.564"/>
</kw>
<msg timestamp="20220314 17:01:26.565" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 17:01:25.547" endtime="20220314 17:01:26.565"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:01:26.566" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:01:26.566" endtime="20220314 17:01:26.567"/>
</kw>
<status status="PASS" starttime="20220314 17:01:25.546" endtime="20220314 17:01:26.567"/>
</iter>
<status status="PASS" starttime="20220314 17:01:25.546" endtime="20220314 17:01:26.567"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 17:01:26.570" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 17:01:26.570" endtime="20220314 17:01:26.570"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 17:01:26.571" level="INFO">Length is 1</msg>
<msg timestamp="20220314 17:01:26.571" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 17:01:26.570" endtime="20220314 17:01:26.571"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:01:26.573" endtime="20220314 17:01:26.590"/>
</kw>
<status status="PASS" starttime="20220314 17:01:26.572" endtime="20220314 17:01:26.590"/>
</kw>
<status status="PASS" starttime="20220314 17:01:26.569" endtime="20220314 17:01:26.590"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:01:28.610" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 17:01:26.591" endtime="20220314 17:01:28.613"/>
</kw>
<status status="PASS" starttime="20220314 17:01:26.569" endtime="20220314 17:01:28.613"/>
</kw>
<status status="PASS" starttime="20220314 17:01:20.499" endtime="20220314 17:01:28.614"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:01:30.640" level="INFO">Failed to find element with selector: .left-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 17:01:28.620" endtime="20220314 17:01:30.642"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:01:30.662" level="FAIL">Failure: Selector ".left-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 17:01:30.643" endtime="20220314 17:01:30.662"/>
</kw>
<status status="FAIL" starttime="20220314 17:01:28.620" endtime="20220314 17:01:30.663"/>
</kw>
<msg timestamp="20220314 17:01:30.663" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 17:01:28.618" endtime="20220314 17:01:30.663"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:01:30.664" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:01:30.664" endtime="20220314 17:01:30.665"/>
</kw>
<status status="PASS" starttime="20220314 17:01:28.617" endtime="20220314 17:01:30.665"/>
</iter>
<status status="PASS" starttime="20220314 17:01:28.617" endtime="20220314 17:01:30.665"/>
</for>
<status status="PASS" starttime="20220314 17:01:28.616" endtime="20220314 17:01:30.665"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:01:32.673" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 17:01:30.668" endtime="20220314 17:01:32.676"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:01:32.690" level="FAIL">Failure: Selector ".right-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 17:01:32.677" endtime="20220314 17:01:32.691"/>
</kw>
<status status="FAIL" starttime="20220314 17:01:30.667" endtime="20220314 17:01:32.692"/>
</kw>
<msg timestamp="20220314 17:01:32.693" level="INFO">${right_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 17:01:30.666" endtime="20220314 17:01:32.693"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:01:32.694" endtime="20220314 17:01:32.727"/>
</kw>
<msg timestamp="20220314 17:01:32.727" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220314 17:01:32.694" endtime="20220314 17:01:32.727"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:01:32.729" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:01:32.728" endtime="20220314 17:01:32.730"/>
</kw>
<status status="PASS" starttime="20220314 17:01:30.666" endtime="20220314 17:01:32.730"/>
</iter>
<status status="PASS" starttime="20220314 17:01:30.666" endtime="20220314 17:01:32.730"/>
</for>
<status status="PASS" starttime="20220314 17:01:28.615" endtime="20220314 17:01:32.730"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_device_in_active_state}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:01:32.733" endtime="20220314 17:01:32.758"/>
</kw>
<status status="PASS" starttime="20220314 17:01:32.732" endtime="20220314 17:01:32.758"/>
</kw>
<msg timestamp="20220314 17:01:32.758" level="INFO">${is_device_in_active_state} = True</msg>
<status status="PASS" starttime="20220314 17:01:32.731" endtime="20220314 17:01:32.758"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${is_device_in_active_state} is ${True}</arg>
<arg>${True}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 17:01:32.759" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 17:01:32.759" endtime="20220314 17:01:32.760"/>
</kw>
<status status="PASS" starttime="20220314 17:01:20.499" endtime="20220314 17:01:32.760"/>
</kw>
<msg timestamp="20220314 17:01:32.760" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 17:01:20.498" endtime="20220314 17:01:32.760"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'False'">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>${device_name} not loaded in GHub.</arg>
<status status="NOT RUN" starttime="20220314 17:01:32.761" endtime="20220314 17:01:32.762"/>
</kw>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220314 17:01:32.762" endtime="20220314 17:01:32.762"/>
</kw>
<status status="NOT RUN" starttime="20220314 17:01:32.761" endtime="20220314 17:01:32.762"/>
</branch>
<status status="PASS" starttime="20220314 17:01:32.761" endtime="20220314 17:01:32.762"/>
</if>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:01:32.763" endtime="20220314 17:01:33.401"/>
</kw>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 17:01:35.459" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220314 17:01:35.460" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:01:33.406" endtime="20220314 17:01:35.460"/>
</kw>
<status status="PASS" starttime="20220314 17:01:33.404" endtime="20220314 17:01:35.461"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 17:01:37.478" level="FAIL">Failure: Selector "//*[@id="color-variant"]/button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:01:35.463" endtime="20220314 17:01:37.478"/>
</kw>
<status status="PASS" starttime="20220314 17:01:35.462" endtime="20220314 17:01:37.478"/>
</kw>
<status status="PASS" starttime="20220314 17:01:33.402" endtime="20220314 17:01:37.479"/>
</kw>
<kw name="device_view.Handle Got It Popup" library="device_main_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${got_it_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_got_it_button}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_got_it_button}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:01:42.508" level="FAIL">Failure: Selector "//div[@class='coach-mark']/button[text()='GOT IT']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:01:37.481" endtime="20220314 17:01:42.508"/>
</kw>
<msg timestamp="20220314 17:01:42.508" level="INFO">${got_it_button_present} = False</msg>
<status status="PASS" starttime="20220314 17:01:37.481" endtime="20220314 17:01:42.508"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${got_it_button_present} is ${False}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 17:01:42.508" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 17:01:42.508" endtime="20220314 17:01:42.510"/>
</kw>
<status status="PASS" starttime="20220314 17:01:37.480" endtime="20220314 17:01:42.510"/>
</kw>
<status status="PASS" starttime="20220314 17:01:20.480" endtime="20220314 17:01:42.510"/>
</kw>
<kw name="backend.Verify DPI Of Device" library="backend">
<arg>${dpi_value}</arg>
<arg>${device['displayName']}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 17:01:42.519" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 17:01:42.519" endtime="20220314 17:01:42.519"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 17:01:43.525" level="INFO">17:01:42.523483: {"msgId": "5c536f3f-1ac1-4be4-8875-c01e02617104", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO", "ZONE_PRIMARY": "PRIMARY"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 17:01:43.526" level="INFO">${res} =  {"msgId": "5c536f3f-1ac1-4be4-8875-c01e02617104", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 17:01:42.519" endtime="20220314 17:01:43.526"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 17:01:43.529" level="INFO">${res} = {'msgId': '5c536f3f-1ac1-4be4-8875-c01e02617104', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 17:01:43.527" endtime="20220314 17:01:43.529"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:01:43.555" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 17:01:43.532" endtime="20220314 17:01:43.555"/>
</kw>
<msg timestamp="20220314 17:01:43.555" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 17:01:43.530" endtime="20220314 17:01:43.555"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:01:43.731" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:01:43.557" endtime="20220314 17:01:43.731"/>
</kw>
<msg timestamp="20220314 17:01:43.748" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:01:43.556" endtime="20220314 17:01:43.748"/>
</kw>
<msg timestamp="20220314 17:01:43.748" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:01:43.556" endtime="20220314 17:01:43.748"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:01:43.916" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 17:01:43.750" endtime="20220314 17:01:43.916"/>
</kw>
<msg timestamp="20220314 17:01:43.917" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 17:01:43.749" endtime="20220314 17:01:43.917"/>
</kw>
<msg timestamp="20220314 17:01:43.917" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 17:01:43.749" endtime="20220314 17:01:43.917"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:01:44.202" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g4_m1', 'g903hero_g5_m1_shifted', 'g903hero_g10_m1', 'g903...</msg>
<status status="PASS" starttime="20220314 17:01:43.919" endtime="20220314 17:01:44.202"/>
</kw>
<msg timestamp="20220314 17:01:44.204" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g4_m1', 'g903hero_g5_m1_shifted', 'g903hero_g10_m1', 'g903...</msg>
<status status="PASS" starttime="20220314 17:01:43.918" endtime="20220314 17:01:44.204"/>
</kw>
<msg timestamp="20220314 17:01:44.204" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 17:01:43.917" endtime="20220314 17:01:44.204"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:01:44.204" endtime="20220314 17:01:44.205"/>
</kw>
<status status="PASS" starttime="20220314 17:01:43.917" endtime="20220314 17:01:44.205"/>
</branch>
<status status="PASS" starttime="20220314 17:01:43.917" endtime="20220314 17:01:44.205"/>
</if>
<status status="PASS" starttime="20220314 17:01:43.748" endtime="20220314 17:01:44.205"/>
</iter>
<status status="PASS" starttime="20220314 17:01:43.748" endtime="20220314 17:01:44.205"/>
</for>
<msg timestamp="20220314 17:01:44.205" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 17:01:42.518" endtime="20220314 17:01:44.205"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 17:01:44.206" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/dpi'}</msg>
<status status="PASS" starttime="20220314 17:01:44.205" endtime="20220314 17:01:44.206"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 17:01:44.206" endtime="20220314 17:01:44.208"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 17:01:45.208" level="INFO">17:01:44.207388: {"msgId": "a47ae497-79a5-44e7-ad90-6b91cea6e9c0", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.Dpi.State", "deviceId": "dev00000000", "dpi": 1800, "dpiIndex": 3, "shifted": false}}</msg>
<msg timestamp="20220314 17:01:45.209" level="INFO">${response} =  {"msgId": "a47ae497-79a5-44e7-ad90-6b91cea6e9c0", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapi...</msg>
<status status="PASS" starttime="20220314 17:01:44.208" endtime="20220314 17:01:45.209"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 17:01:45.211" level="INFO">${response} = {'msgId': 'a47ae497-79a5-44e7-ad90-6b91cea6e9c0', 'verb': 'GET', 'path': '/mouse/dev00000000/dpi', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis...</msg>
<status status="PASS" starttime="20220314 17:01:45.210" endtime="20220314 17:01:45.211"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:01:45.227" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 17:01:45.214" endtime="20220314 17:01:45.227"/>
</kw>
<msg timestamp="20220314 17:01:45.228" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 17:01:45.214" endtime="20220314 17:01:45.228"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:01:45.242" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 17:01:45.229" endtime="20220314 17:01:45.242"/>
</kw>
<msg timestamp="20220314 17:01:45.242" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 17:01:45.228" endtime="20220314 17:01:45.242"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:01:45.242" endtime="20220314 17:01:45.243"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 17:01:45.243" endtime="20220314 17:01:45.243"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 17:01:45.243" endtime="20220314 17:01:45.244"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:01:45.244" endtime="20220314 17:01:45.244"/>
</kw>
<status status="PASS" starttime="20220314 17:01:45.213" endtime="20220314 17:01:45.244"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_dpi}</var>
<arg>${response}</arg>
<arg>dpi</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:01:45.259" level="INFO">${result} = [1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800]</msg>
<status status="PASS" starttime="20220314 17:01:45.245" endtime="20220314 17:01:45.259"/>
</kw>
<msg timestamp="20220314 17:01:45.259" level="INFO">${result} = [1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800]</msg>
<status status="PASS" starttime="20220314 17:01:45.245" endtime="20220314 17:01:45.259"/>
</kw>
<msg timestamp="20220314 17:01:45.259" level="INFO">${backend_dpi} = 1800</msg>
<status status="PASS" starttime="20220314 17:01:45.244" endtime="20220314 17:01:45.259"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_dpi}</arg>
<arg>${backend_dpi}</arg>
<arg>The expected dpi value (${expected_dpi}) and actual value from backend (${backend_dpi}) is different</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 17:01:45.260" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 17:01:45.259" endtime="20220314 17:01:45.260"/>
</kw>
<status status="PASS" starttime="20220314 17:01:42.511" endtime="20220314 17:01:45.260"/>
</kw>
<kw name="backend.Verify Report Rate" library="backend">
<arg>${device['displayName']}</arg>
<arg>${report_rate}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 17:01:45.268" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 17:01:45.268" endtime="20220314 17:01:45.268"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 17:01:46.276" level="INFO">17:01:45.275896: {"msgId": "e27a6f51-7581-40e2-9ec4-e582670f1f80", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO", "ZONE_PRIMARY": "PRIMARY"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 17:01:46.277" level="INFO">${res} =  {"msgId": "e27a6f51-7581-40e2-9ec4-e582670f1f80", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 17:01:45.268" endtime="20220314 17:01:46.277"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 17:01:46.280" level="INFO">${res} = {'msgId': 'e27a6f51-7581-40e2-9ec4-e582670f1f80', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 17:01:46.279" endtime="20220314 17:01:46.280"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:01:46.296" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 17:01:46.282" endtime="20220314 17:01:46.296"/>
</kw>
<msg timestamp="20220314 17:01:46.297" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 17:01:46.281" endtime="20220314 17:01:46.297"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:01:46.487" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:01:46.298" endtime="20220314 17:01:46.487"/>
</kw>
<msg timestamp="20220314 17:01:46.503" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:01:46.298" endtime="20220314 17:01:46.503"/>
</kw>
<msg timestamp="20220314 17:01:46.503" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:01:46.297" endtime="20220314 17:01:46.503"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:01:46.671" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 17:01:46.505" endtime="20220314 17:01:46.671"/>
</kw>
<msg timestamp="20220314 17:01:46.672" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 17:01:46.505" endtime="20220314 17:01:46.672"/>
</kw>
<msg timestamp="20220314 17:01:46.672" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 17:01:46.504" endtime="20220314 17:01:46.672"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:01:46.909" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g4_m1', 'g903hero_g5_m1_shifted', 'g903hero_g10_m1', 'g903...</msg>
<status status="PASS" starttime="20220314 17:01:46.674" endtime="20220314 17:01:46.909"/>
</kw>
<msg timestamp="20220314 17:01:46.911" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g4_m1', 'g903hero_g5_m1_shifted', 'g903hero_g10_m1', 'g903...</msg>
<status status="PASS" starttime="20220314 17:01:46.673" endtime="20220314 17:01:46.911"/>
</kw>
<msg timestamp="20220314 17:01:46.911" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 17:01:46.673" endtime="20220314 17:01:46.911"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:01:46.911" endtime="20220314 17:01:46.912"/>
</kw>
<status status="PASS" starttime="20220314 17:01:46.672" endtime="20220314 17:01:46.912"/>
</branch>
<status status="PASS" starttime="20220314 17:01:46.672" endtime="20220314 17:01:46.912"/>
</if>
<status status="PASS" starttime="20220314 17:01:46.504" endtime="20220314 17:01:46.912"/>
</iter>
<status status="PASS" starttime="20220314 17:01:46.504" endtime="20220314 17:01:46.912"/>
</for>
<msg timestamp="20220314 17:01:46.912" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 17:01:45.267" endtime="20220314 17:01:46.912"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 17:01:46.913" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/report_rate'}</msg>
<status status="PASS" starttime="20220314 17:01:46.912" endtime="20220314 17:01:46.913"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 17:01:46.913" endtime="20220314 17:01:46.917"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 17:01:47.917" level="INFO">17:01:46.916697: {"msgId": "92b388a2-744d-42d0-ace4-b81144a350ee", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.ReportRate", "value": 125}}</msg>
<msg timestamp="20220314 17:01:47.917" level="INFO">${response} =  {"msgId": "92b388a2-744d-42d0-ace4-b81144a350ee", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.g...</msg>
<status status="PASS" starttime="20220314 17:01:46.917" endtime="20220314 17:01:47.918"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 17:01:47.920" level="INFO">${response} = {'msgId': '92b388a2-744d-42d0-ace4-b81144a350ee', 'verb': 'GET', 'path': '/mouse/dev00000000/report_rate', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.go...</msg>
<status status="PASS" starttime="20220314 17:01:47.919" endtime="20220314 17:01:47.920"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:01:47.936" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 17:01:47.923" endtime="20220314 17:01:47.936"/>
</kw>
<msg timestamp="20220314 17:01:47.936" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 17:01:47.922" endtime="20220314 17:01:47.936"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:01:47.953" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 17:01:47.937" endtime="20220314 17:01:47.953"/>
</kw>
<msg timestamp="20220314 17:01:47.953" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 17:01:47.936" endtime="20220314 17:01:47.953"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:01:47.954" endtime="20220314 17:01:47.954"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 17:01:47.954" endtime="20220314 17:01:47.954"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 17:01:47.955" endtime="20220314 17:01:47.955"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:01:47.955" endtime="20220314 17:01:47.955"/>
</kw>
<status status="PASS" starttime="20220314 17:01:47.921" endtime="20220314 17:01:47.955"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_report_rate}</var>
<arg>${response}</arg>
<arg>value</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:01:47.970" level="INFO">${result} = [125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125]</msg>
<status status="PASS" starttime="20220314 17:01:47.957" endtime="20220314 17:01:47.970"/>
</kw>
<msg timestamp="20220314 17:01:47.970" level="INFO">${result} = [125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125]</msg>
<status status="PASS" starttime="20220314 17:01:47.956" endtime="20220314 17:01:47.970"/>
</kw>
<msg timestamp="20220314 17:01:47.970" level="INFO">${backend_report_rate} = 125</msg>
<status status="PASS" starttime="20220314 17:01:47.956" endtime="20220314 17:01:47.970"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_report_rate}</arg>
<arg>${backend_report_rate}</arg>
<arg>The expected repo rate (${expected_report_rate}) and the actual value from backend repo rate (${backend_report_rate}) does not match</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 17:01:47.971" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 17:01:47.971" endtime="20220314 17:01:47.971"/>
</kw>
<status status="PASS" starttime="20220314 17:01:45.260" endtime="20220314 17:01:47.971"/>
</kw>
<kw name="End Test" library="logging" type="TEARDOWN">
<arg>${KEYWORD STATUS}</arg>
<doc>Ensure to Call this keyword at Teardown of all High Level Test Keywords
If Test Fails - This will capture logs and screenshots and append links to report</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}Test Status: ${test_status}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:01:47.972" endtime="20220314 17:01:47.972"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${test_status}'=='FAIL'</arg>
<arg>Get Log Files And Upload To FTPDrive</arg>
<arg>end_test</arg>
<arg>ELSE</arg>
<arg>Return From Keyword</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20220314 17:01:47.973" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 17:01:47.973" endtime="20220314 17:01:47.973"/>
</kw>
<status status="PASS" starttime="20220314 17:01:47.972" endtime="20220314 17:01:47.973"/>
</kw>
<status status="PASS" starttime="20220314 17:01:47.971" endtime="20220314 17:01:47.973"/>
</kw>
<status status="PASS" starttime="20220314 16:59:58.225" endtime="20220314 17:01:47.973"/>
</kw>
<status status="PASS" starttime="20220314 16:59:58.224" endtime="20220314 17:01:47.973"/>
</kw>
<tag>Device: G903 LIGHTSPEED (Windows, Wired)</tag>
<tag>Device Type: MOUSE</tag>
<tag>Feature: dpi</tag>
<tag>OS: Windows-10-10.0.22000-SP0</tag>
<status status="PASS" starttime="20220314 16:59:58.214" endtime="20220314 17:01:47.973"/>
</test>
<test id="s1-t7" name="Test: DPI Sensitivity With Restart G HUB For Mouse: G903 LIGHTSPEED (Windows, Wired)">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>Test: DPI Sensitivity With Restart G HUB For Mouse</arg>
<arg>{'displayName': 'G903 LIGHTSPEED', 'connection_type': 'wired', 'hub': 3856831629, 'portNumber': 6, 'features': {'dpi': ['sys']}, 'pid': 'c091', 'productId': '0xc091', 'firmware': '23.1.13', 'modelId': 'c4087', 'type': 'MOUSE', 'device_specific_features': {'lightsync': {'primary': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer'], 'logo': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}, 'device_settings': ['DPI Lighting', 'Startup Effect', 'Low Battery Mode', 'Firmware Version', 'On-Board Memory Mode', 'Battery Level']}, 'connection_interfaces': {'wired': {'pid': 'c091', 'productId': '0xc091'}, 'wireless': {'pid': '0x4087', 'productId': '0x4087'}}}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="Test: DPI Sensitivity With Restart G HUB For Mouse" library="mouse_regression_system">
<arg>{'displayName': 'G903 LIGHTSPEED', 'connection_type': 'wired', 'hub': 3856831629, 'portNumber': 6, 'features': {'dpi': ['sys']}, 'pid': 'c091', 'productId': '0xc091', 'firmware': '23.1.13', 'modelId': 'c4087', 'type': 'MOUSE', 'device_specific_features': {'lightsync': {'primary': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer'], 'logo': ['fixed', 'cycle', 'breathing', 'screen sampler', 'audio visualizer']}, 'device_settings': ['DPI Lighting', 'Startup Effect', 'Low Battery Mode', 'Firmware Version', 'On-Board Memory Mode', 'Battery Level']}, 'connection_interfaces': {'wired': {'pid': 'c091', 'productId': '0xc091'}, 'wireless': {'pid': '0x4087', 'productId': '0x4087'}}}</arg>
<tag>dpi</tag>
<doc>Check that G HUB can assign preset DPI to the device. And the script will verify if device can be set the DPI by querying firmware
- Check that device appears in the Home view and open device configuration page
- Click the sensitivity icon
- Set and verify the DPI
- Set and verify the Report Rate
- Restart GHUB
- Check that device appears in the Home view
- Verify the DPI that set by user
- Verify the Report Rate that set by user</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>'${device['type']}' != 'MOUSE'</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:01:47.990" endtime="20220314 17:01:47.999"/>
</kw>
<kw name="home.Open Device Configuration" library="home_screen">
<arg>${device['displayName']}</arg>
<doc>Click on the device to open device configuration and if device introduction page opens then skip it.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device Home Screen Loaded</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device Home Screen Loaded" library="home_screen">
<arg>${device_name}</arg>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:01:53.027" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:01:48.009" endtime="20220314 17:01:53.027"/>
</kw>
<status status="FAIL" starttime="20220314 17:01:48.008" endtime="20220314 17:01:53.029"/>
</kw>
<msg timestamp="20220314 17:01:53.029" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 17:01:48.008" endtime="20220314 17:01:53.029"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 17:01:53.030" endtime="20220314 17:01:53.030"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 17:01:53.030" endtime="20220314 17:01:53.030"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 17:01:53.030" endtime="20220314 17:01:53.030"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 17:01:53.031" endtime="20220314 17:01:53.031"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 17:01:53.031" endtime="20220314 17:01:53.031"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 17:01:53.031" endtime="20220314 17:01:53.031"/>
</kw>
<status status="NOT RUN" starttime="20220314 17:01:53.030" endtime="20220314 17:01:53.031"/>
</branch>
<status status="PASS" starttime="20220314 17:01:53.029" endtime="20220314 17:01:53.031"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 17:01:53.033" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 17:01:53.032" endtime="20220314 17:01:53.033"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 17:01:53.033" level="INFO">Length is 1</msg>
<msg timestamp="20220314 17:01:53.033" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 17:01:53.033" endtime="20220314 17:01:53.033"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:02:03.058" level="INFO">Failed to find element with selector: #home-view and attributes:{}</msg>
<msg timestamp="20220314 17:02:03.060" level="FAIL">Failure: Selector "#home-view" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:01:53.034" endtime="20220314 17:02:03.060"/>
</kw>
<status status="FAIL" starttime="20220314 17:01:53.033" endtime="20220314 17:02:03.061"/>
</kw>
<status status="FAIL" starttime="20220314 17:01:53.032" endtime="20220314 17:02:03.062"/>
</kw>
<msg timestamp="20220314 17:02:03.062" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220314 17:01:53.032" endtime="20220314 17:02:03.062"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:02:03.063" endtime="20220314 17:02:03.063"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:02:03.064" endtime="20220314 17:02:03.087"/>
</kw>
<msg timestamp="20220314 17:02:03.087" level="INFO">${back_button_present} = True</msg>
<status status="PASS" starttime="20220314 17:02:03.063" endtime="20220314 17:02:03.087"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:02:03.089" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:02:03.088" endtime="20220314 17:02:03.090"/>
</kw>
<status status="PASS" starttime="20220314 17:01:48.008" endtime="20220314 17:02:03.090"/>
</iter>
<status status="PASS" starttime="20220314 17:01:48.008" endtime="20220314 17:02:03.090"/>
</for>
<status status="PASS" starttime="20220314 17:01:48.007" endtime="20220314 17:02:03.091"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:02:03.095" endtime="20220314 17:02:03.110"/>
</kw>
<msg timestamp="20220314 17:02:03.110" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 17:02:03.094" endtime="20220314 17:02:03.110"/>
</kw>
<msg timestamp="20220314 17:02:03.110" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 17:02:03.092" endtime="20220314 17:02:03.110"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:02:03.111" endtime="20220314 17:02:03.111"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${clicked}</var>
<arg>common.Click On Back</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:02:03.112" endtime="20220314 17:02:03.691"/>
</kw>
<status status="PASS" starttime="20220314 17:02:03.112" endtime="20220314 17:02:03.691"/>
</kw>
<msg timestamp="20220314 17:02:03.692" level="INFO">${clicked} = True</msg>
<status status="PASS" starttime="20220314 17:02:03.111" endtime="20220314 17:02:03.692"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clicked}==False</arg>
<arg>common.alerts</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:02:03.693" endtime="20220314 17:02:03.694"/>
</kw>
<status status="PASS" starttime="20220314 17:02:03.091" endtime="20220314 17:02:03.694"/>
</iter>
<iter>
<var name="${index}">1</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:02:04.715" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 17:02:04.718" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:02:03.698" endtime="20220314 17:02:04.718"/>
</kw>
<msg timestamp="20220314 17:02:04.718" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 17:02:03.697" endtime="20220314 17:02:04.718"/>
</kw>
<msg timestamp="20220314 17:02:04.719" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 17:02:03.696" endtime="20220314 17:02:04.719"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:02:04.721" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:02:04.720" endtime="20220314 17:02:04.721"/>
</kw>
<status status="PASS" starttime="20220314 17:02:03.694" endtime="20220314 17:02:04.722"/>
</iter>
<status status="PASS" starttime="20220314 17:02:03.091" endtime="20220314 17:02:04.722"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 17:02:04.727" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 17:02:04.726" endtime="20220314 17:02:04.727"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 17:02:04.728" level="INFO">Length is 1</msg>
<msg timestamp="20220314 17:02:04.728" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 17:02:04.728" endtime="20220314 17:02:04.728"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:02:04.730" endtime="20220314 17:02:04.747"/>
</kw>
<status status="PASS" starttime="20220314 17:02:04.729" endtime="20220314 17:02:04.747"/>
</kw>
<status status="PASS" starttime="20220314 17:02:04.725" endtime="20220314 17:02:04.747"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:02:06.762" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 17:02:04.747" endtime="20220314 17:02:06.764"/>
</kw>
<status status="PASS" starttime="20220314 17:02:04.724" endtime="20220314 17:02:06.765"/>
</kw>
<status status="PASS" starttime="20220314 17:01:48.007" endtime="20220314 17:02:06.765"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:02:08.795" level="INFO">Failed to find element with selector: .left-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 17:02:06.774" endtime="20220314 17:02:08.798"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:02:08.810" level="FAIL">Failure: Selector ".left-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 17:02:08.799" endtime="20220314 17:02:08.810"/>
</kw>
<status status="FAIL" starttime="20220314 17:02:06.772" endtime="20220314 17:02:08.811"/>
</kw>
<msg timestamp="20220314 17:02:08.811" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 17:02:06.770" endtime="20220314 17:02:08.811"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:02:08.812" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:02:08.812" endtime="20220314 17:02:08.813"/>
</kw>
<status status="PASS" starttime="20220314 17:02:06.770" endtime="20220314 17:02:08.813"/>
</iter>
<status status="PASS" starttime="20220314 17:02:06.769" endtime="20220314 17:02:08.813"/>
</for>
<status status="PASS" starttime="20220314 17:02:06.769" endtime="20220314 17:02:08.813"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:02:10.827" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 17:02:08.815" endtime="20220314 17:02:10.830"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:02:10.843" level="FAIL">Failure: Selector ".right-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 17:02:10.831" endtime="20220314 17:02:10.843"/>
</kw>
<status status="FAIL" starttime="20220314 17:02:08.814" endtime="20220314 17:02:10.845"/>
</kw>
<msg timestamp="20220314 17:02:10.845" level="INFO">${right_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 17:02:08.814" endtime="20220314 17:02:10.845"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:02:10.847" endtime="20220314 17:02:10.883"/>
</kw>
<msg timestamp="20220314 17:02:10.883" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220314 17:02:10.846" endtime="20220314 17:02:10.883"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:02:10.884" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:02:10.883" endtime="20220314 17:02:10.884"/>
</kw>
<status status="PASS" starttime="20220314 17:02:08.813" endtime="20220314 17:02:10.884"/>
</iter>
<status status="PASS" starttime="20220314 17:02:08.813" endtime="20220314 17:02:10.884"/>
</for>
<status status="PASS" starttime="20220314 17:02:06.767" endtime="20220314 17:02:10.884"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_device_in_active_state}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:02:10.886" endtime="20220314 17:02:10.911"/>
</kw>
<status status="PASS" starttime="20220314 17:02:10.886" endtime="20220314 17:02:10.911"/>
</kw>
<msg timestamp="20220314 17:02:10.911" level="INFO">${is_device_in_active_state} = True</msg>
<status status="PASS" starttime="20220314 17:02:10.885" endtime="20220314 17:02:10.911"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${is_device_in_active_state} is ${True}</arg>
<arg>${True}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 17:02:10.912" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 17:02:10.911" endtime="20220314 17:02:10.912"/>
</kw>
<status status="PASS" starttime="20220314 17:01:48.006" endtime="20220314 17:02:10.912"/>
</kw>
<msg timestamp="20220314 17:02:10.912" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 17:01:48.006" endtime="20220314 17:02:10.912"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'False'">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>${device_name} not loaded in GHub.</arg>
<status status="NOT RUN" starttime="20220314 17:02:10.913" endtime="20220314 17:02:10.913"/>
</kw>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220314 17:02:10.913" endtime="20220314 17:02:10.913"/>
</kw>
<status status="NOT RUN" starttime="20220314 17:02:10.913" endtime="20220314 17:02:10.913"/>
</branch>
<status status="PASS" starttime="20220314 17:02:10.912" endtime="20220314 17:02:10.913"/>
</if>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:02:10.914" endtime="20220314 17:02:11.551"/>
</kw>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 17:02:13.611" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220314 17:02:13.613" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:02:11.556" endtime="20220314 17:02:13.613"/>
</kw>
<status status="PASS" starttime="20220314 17:02:11.555" endtime="20220314 17:02:13.614"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 17:02:15.633" level="FAIL">Failure: Selector "//*[@id="color-variant"]/button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:02:13.616" endtime="20220314 17:02:15.633"/>
</kw>
<status status="PASS" starttime="20220314 17:02:13.615" endtime="20220314 17:02:15.633"/>
</kw>
<status status="PASS" starttime="20220314 17:02:11.553" endtime="20220314 17:02:15.634"/>
</kw>
<kw name="device_view.Handle Got It Popup" library="device_main_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${got_it_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_got_it_button}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_got_it_button}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:02:20.660" level="FAIL">Failure: Selector "//div[@class='coach-mark']/button[text()='GOT IT']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:02:15.639" endtime="20220314 17:02:20.660"/>
</kw>
<msg timestamp="20220314 17:02:20.661" level="INFO">${got_it_button_present} = False</msg>
<status status="PASS" starttime="20220314 17:02:15.637" endtime="20220314 17:02:20.661"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${got_it_button_present} is ${False}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 17:02:20.662" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 17:02:20.662" endtime="20220314 17:02:20.662"/>
</kw>
<status status="PASS" starttime="20220314 17:02:15.635" endtime="20220314 17:02:20.662"/>
</kw>
<status status="PASS" starttime="20220314 17:01:47.999" endtime="20220314 17:02:20.662"/>
</kw>
<kw name="sensitivity_dpi.Select Sensitvity Dpi Button" library="sensitivity_dpi_screen">
<kw name="Click" library="libraries.components.React">
<arg>${sensitivity_dpi_senstivity_dpi}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:02:20.663" endtime="20220314 17:02:21.273"/>
</kw>
<status status="PASS" starttime="20220314 17:02:20.663" endtime="20220314 17:02:21.274"/>
</kw>
<kw name="sensitivity_dpi.Click On Restore Default Settings" library="sensitivity_dpi_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${sensitivity_dpi_restore_default}</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 17:02:21.278" level="INFO">${words} = ['.panel-button', 'text=RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 17:02:21.278" endtime="20220314 17:02:21.278"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 17:02:21.279" level="INFO">Length is 2</msg>
<msg timestamp="20220314 17:02:21.279" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20220314 17:02:21.279" endtime="20220314 17:02:21.279"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="__Click UI Based On Attribute__" library="common_keywords_kragle">
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<doc>Internal fuction to do additional check on 'Click UI'. Not to be used anywhere else.</doc>
<kw name="Split String" library="String">
<var>${sub_words}</var>
<arg>${word}</arg>
<arg>=</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 17:02:21.280" level="INFO">${sub_words} = ['text', 'RESTORE DEFAULT SETTINGS']</msg>
<status status="PASS" starttime="20220314 17:02:21.280" endtime="20220314 17:02:21.280"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='text'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}</arg>
<arg>text=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:02:21.281" endtime="20220314 17:02:21.866"/>
</kw>
<status status="PASS" starttime="20220314 17:02:21.280" endtime="20220314 17:02:21.866"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='innerText'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>innerText=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<arg>allow_hidden=True</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:02:21.867" endtime="20220314 17:02:21.868"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${sub_words}[0]'=='value'</arg>
<arg>Click</arg>
<arg>selector=${words}</arg>
<arg>value=${sub_words}[1]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:02:21.869" endtime="20220314 17:02:21.870"/>
</kw>
<status status="PASS" starttime="20220314 17:02:21.279" endtime="20220314 17:02:21.870"/>
</kw>
<status status="PASS" starttime="20220314 17:02:21.279" endtime="20220314 17:02:21.871"/>
</kw>
<status status="PASS" starttime="20220314 17:02:21.277" endtime="20220314 17:02:21.871"/>
</kw>
<status status="PASS" starttime="20220314 17:02:21.276" endtime="20220314 17:02:21.871"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${dpi}</var>
<arg>1800</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220314 17:02:21.872" level="INFO">${dpi} = 1800</msg>
<status status="PASS" starttime="20220314 17:02:21.872" endtime="20220314 17:02:21.872"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${report_rate}</var>
<arg>125</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220314 17:02:21.872" level="INFO">${report_rate} = 125</msg>
<status status="PASS" starttime="20220314 17:02:21.872" endtime="20220314 17:02:21.872"/>
</kw>
<kw name="sensitivity_dpi.Update DPI Speed Of Selected DPI" library="sensitivity_dpi_screen">
<arg>${dpi}</arg>
<kw name="Log To Console" library="BuiltIn">
<arg>Updating DPI Speed (as: ${dpi}) Of Selected DPI</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:02:21.873" endtime="20220314 17:02:21.873"/>
</kw>
<kw name="sensitivity_dpi.Click On Selected DPI Speed" library="sensitivity_dpi_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_selected_dpi_speed}</arg>
<arg>wait_timeout=30</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:02:21.874" endtime="20220314 17:02:22.436"/>
</kw>
<status status="PASS" starttime="20220314 17:02:21.874" endtime="20220314 17:02:22.437"/>
</kw>
<kw name="Input" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_selected_dpi_speed}</arg>
<arg>keys=${dpi}</arg>
<doc>Asserts that an element successfully receives input events for the given keys.</doc>
<status status="PASS" starttime="20220314 17:02:22.438" endtime="20220314 17:02:25.551"/>
</kw>
<status status="PASS" starttime="20220314 17:02:21.873" endtime="20220314 17:02:25.552"/>
</kw>
<kw name="dpi.Set Firmware Report Rate To" library="dpi">
<arg>${device}</arg>
<arg>${report_rate}</arg>
<doc>- Select the preset Report Rate
- Verify the Report Rate set to device by querying firmware</doc>
<for flavor="IN RANGE">
<var>${i}</var>
<value>1</value>
<value>5</value>
<iter>
<var name="${i}">1</var>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>${i}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:02:25.557" endtime="20220314 17:02:26.141"/>
</kw>
<status status="PASS" starttime="20220314 17:02:25.556" endtime="20220314 17:02:26.141"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_reportRate}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 17:02:26.174" level="INFO">${report_rate} = 1000</msg>
<status status="PASS" starttime="20220314 17:02:26.144" endtime="20220314 17:02:26.174"/>
</kw>
<msg timestamp="20220314 17:02:26.175" level="INFO">${GUI_reportRate} = 1000</msg>
<status status="PASS" starttime="20220314 17:02:26.142" endtime="20220314 17:02:26.175"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>'${GUI_reportRate}' == '${reportRate}'</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:02:26.176" endtime="20220314 17:02:26.177"/>
</kw>
<status status="PASS" starttime="20220314 17:02:25.556" endtime="20220314 17:02:26.177"/>
</iter>
<iter>
<var name="${i}">2</var>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>${i}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:02:26.179" endtime="20220314 17:02:26.758"/>
</kw>
<status status="PASS" starttime="20220314 17:02:26.178" endtime="20220314 17:02:26.758"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_reportRate}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 17:02:26.788" level="INFO">${report_rate} = 500</msg>
<status status="PASS" starttime="20220314 17:02:26.762" endtime="20220314 17:02:26.788"/>
</kw>
<msg timestamp="20220314 17:02:26.789" level="INFO">${GUI_reportRate} = 500</msg>
<status status="PASS" starttime="20220314 17:02:26.760" endtime="20220314 17:02:26.789"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>'${GUI_reportRate}' == '${reportRate}'</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:02:26.790" endtime="20220314 17:02:26.791"/>
</kw>
<status status="PASS" starttime="20220314 17:02:26.177" endtime="20220314 17:02:26.791"/>
</iter>
<iter>
<var name="${i}">3</var>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>${i}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:02:26.794" endtime="20220314 17:02:27.367"/>
</kw>
<status status="PASS" starttime="20220314 17:02:26.793" endtime="20220314 17:02:27.368"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_reportRate}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 17:02:27.397" level="INFO">${report_rate} = 250</msg>
<status status="PASS" starttime="20220314 17:02:27.371" endtime="20220314 17:02:27.397"/>
</kw>
<msg timestamp="20220314 17:02:27.398" level="INFO">${GUI_reportRate} = 250</msg>
<status status="PASS" starttime="20220314 17:02:27.370" endtime="20220314 17:02:27.398"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>'${GUI_reportRate}' == '${reportRate}'</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:02:27.399" endtime="20220314 17:02:27.400"/>
</kw>
<status status="PASS" starttime="20220314 17:02:26.792" endtime="20220314 17:02:27.400"/>
</iter>
<iter>
<var name="${i}">4</var>
<kw name="sensitivity_dpi.Select Report Rate By Level" library="sensitivity_dpi_screen">
<arg>${i}</arg>
<kw name="Click" library="libraries.components.React">
<arg>selector=${sensitivity_dpi_sensitivity_report_rate_level}(${level})</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:02:27.403" endtime="20220314 17:02:28.003"/>
</kw>
<status status="PASS" starttime="20220314 17:02:27.402" endtime="20220314 17:02:28.004"/>
</kw>
<kw name="sensitivity_dpi.Get Current Report Rate Value" library="sensitivity_dpi_screen">
<var>${GUI_reportRate}</var>
<kw name="Get Attribute" library="libraries.components.React">
<var>${report_rate}</var>
<arg>selector=${sensitivity_dpi_selected_report_rate}</arg>
<arg>attribute=innerText</arg>
<doc>Returns the given attribute of an element.</doc>
<msg timestamp="20220314 17:02:28.034" level="INFO">${report_rate} = 125</msg>
<status status="PASS" starttime="20220314 17:02:28.007" endtime="20220314 17:02:28.034"/>
</kw>
<msg timestamp="20220314 17:02:28.035" level="INFO">${GUI_reportRate} = 125</msg>
<status status="PASS" starttime="20220314 17:02:28.006" endtime="20220314 17:02:28.035"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>'${GUI_reportRate}' == '${reportRate}'</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:02:28.037" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:02:28.036" endtime="20220314 17:02:28.038"/>
</kw>
<status status="PASS" starttime="20220314 17:02:27.401" endtime="20220314 17:02:28.038"/>
</iter>
<status status="PASS" starttime="20220314 17:02:25.555" endtime="20220314 17:02:28.038"/>
</for>
<status status="PASS" starttime="20220314 17:02:25.554" endtime="20220314 17:02:28.038"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>3</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 17:02:31.041" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20220314 17:02:28.039" endtime="20220314 17:02:31.041"/>
</kw>
<kw name="backend.Verify DPI Of Device" library="backend">
<arg>${dpi}</arg>
<arg>${device['displayName']}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 17:02:31.063" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 17:02:31.063" endtime="20220314 17:02:31.063"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 17:02:32.069" level="INFO">17:02:31.067692: {"msgId": "177c9d7c-9bd6-4440-a93c-005edcddb0bf", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO", "ZONE_PRIMARY": "PRIMARY"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 17:02:32.070" level="INFO">${res} =  {"msgId": "177c9d7c-9bd6-4440-a93c-005edcddb0bf", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 17:02:31.063" endtime="20220314 17:02:32.070"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 17:02:32.073" level="INFO">${res} = {'msgId': '177c9d7c-9bd6-4440-a93c-005edcddb0bf', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 17:02:32.071" endtime="20220314 17:02:32.073"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:02:32.089" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 17:02:32.075" endtime="20220314 17:02:32.089"/>
</kw>
<msg timestamp="20220314 17:02:32.089" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 17:02:32.075" endtime="20220314 17:02:32.089"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:02:32.278" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:02:32.091" endtime="20220314 17:02:32.278"/>
</kw>
<msg timestamp="20220314 17:02:32.294" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:02:32.090" endtime="20220314 17:02:32.294"/>
</kw>
<msg timestamp="20220314 17:02:32.295" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:02:32.089" endtime="20220314 17:02:32.295"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:02:32.462" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 17:02:32.297" endtime="20220314 17:02:32.462"/>
</kw>
<msg timestamp="20220314 17:02:32.462" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 17:02:32.296" endtime="20220314 17:02:32.462"/>
</kw>
<msg timestamp="20220314 17:02:32.462" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 17:02:32.295" endtime="20220314 17:02:32.462"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:02:32.738" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g11_m1_shifted', 'g903hero_g10_m1_shifted', 'g903hero_g6_m...</msg>
<status status="PASS" starttime="20220314 17:02:32.464" endtime="20220314 17:02:32.738"/>
</kw>
<msg timestamp="20220314 17:02:32.739" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g11_m1_shifted', 'g903hero_g10_m1_shifted', 'g903hero_g6_m...</msg>
<status status="PASS" starttime="20220314 17:02:32.464" endtime="20220314 17:02:32.739"/>
</kw>
<msg timestamp="20220314 17:02:32.739" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 17:02:32.463" endtime="20220314 17:02:32.739"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:02:32.740" endtime="20220314 17:02:32.740"/>
</kw>
<status status="PASS" starttime="20220314 17:02:32.462" endtime="20220314 17:02:32.740"/>
</branch>
<status status="PASS" starttime="20220314 17:02:32.462" endtime="20220314 17:02:32.740"/>
</if>
<status status="PASS" starttime="20220314 17:02:32.295" endtime="20220314 17:02:32.740"/>
</iter>
<status status="PASS" starttime="20220314 17:02:32.295" endtime="20220314 17:02:32.740"/>
</for>
<msg timestamp="20220314 17:02:32.740" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 17:02:31.062" endtime="20220314 17:02:32.740"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 17:02:32.741" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/dpi'}</msg>
<status status="PASS" starttime="20220314 17:02:32.741" endtime="20220314 17:02:32.741"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 17:02:32.741" endtime="20220314 17:02:32.742"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 17:02:33.742" level="INFO">17:02:32.742202: {"msgId": "36f6f2c3-9667-4332-81ff-ecb4ccd33b24", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.Dpi.State", "deviceId": "dev00000000", "dpi": 1800, "dpiIndex": 3, "shifted": false}}</msg>
<msg timestamp="20220314 17:02:33.743" level="INFO">${response} =  {"msgId": "36f6f2c3-9667-4332-81ff-ecb4ccd33b24", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapi...</msg>
<status status="PASS" starttime="20220314 17:02:32.742" endtime="20220314 17:02:33.743"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 17:02:33.745" level="INFO">${response} = {'msgId': '36f6f2c3-9667-4332-81ff-ecb4ccd33b24', 'verb': 'GET', 'path': '/mouse/dev00000000/dpi', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis...</msg>
<status status="PASS" starttime="20220314 17:02:33.744" endtime="20220314 17:02:33.745"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:02:33.761" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 17:02:33.748" endtime="20220314 17:02:33.761"/>
</kw>
<msg timestamp="20220314 17:02:33.761" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 17:02:33.748" endtime="20220314 17:02:33.761"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:02:33.775" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 17:02:33.762" endtime="20220314 17:02:33.775"/>
</kw>
<msg timestamp="20220314 17:02:33.775" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 17:02:33.762" endtime="20220314 17:02:33.775"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:02:33.776" endtime="20220314 17:02:33.776"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 17:02:33.776" endtime="20220314 17:02:33.776"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 17:02:33.777" endtime="20220314 17:02:33.777"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:02:33.777" endtime="20220314 17:02:33.777"/>
</kw>
<status status="PASS" starttime="20220314 17:02:33.746" endtime="20220314 17:02:33.778"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_dpi}</var>
<arg>${response}</arg>
<arg>dpi</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:02:33.792" level="INFO">${result} = [1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800]</msg>
<status status="PASS" starttime="20220314 17:02:33.779" endtime="20220314 17:02:33.792"/>
</kw>
<msg timestamp="20220314 17:02:33.792" level="INFO">${result} = [1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800]</msg>
<status status="PASS" starttime="20220314 17:02:33.778" endtime="20220314 17:02:33.792"/>
</kw>
<msg timestamp="20220314 17:02:33.792" level="INFO">${backend_dpi} = 1800</msg>
<status status="PASS" starttime="20220314 17:02:33.778" endtime="20220314 17:02:33.793"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_dpi}</arg>
<arg>${backend_dpi}</arg>
<arg>The expected dpi value (${expected_dpi}) and actual value from backend (${backend_dpi}) is different</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 17:02:33.793" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 17:02:33.793" endtime="20220314 17:02:33.793"/>
</kw>
<status status="PASS" starttime="20220314 17:02:31.042" endtime="20220314 17:02:33.794"/>
</kw>
<kw name="backend.Verify Report Rate" library="backend">
<arg>${device['displayName']}</arg>
<arg>${report_rate}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 17:02:33.802" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 17:02:33.802" endtime="20220314 17:02:33.802"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 17:02:34.807" level="INFO">17:02:33.806242: {"msgId": "54dde8fc-5b83-4bae-a516-736844c6644c", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO", "ZONE_PRIMARY": "PRIMARY"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 17:02:34.808" level="INFO">${res} =  {"msgId": "54dde8fc-5b83-4bae-a516-736844c6644c", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 17:02:33.802" endtime="20220314 17:02:34.808"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 17:02:34.811" level="INFO">${res} = {'msgId': '54dde8fc-5b83-4bae-a516-736844c6644c', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 17:02:34.810" endtime="20220314 17:02:34.811"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:02:34.827" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 17:02:34.813" endtime="20220314 17:02:34.827"/>
</kw>
<msg timestamp="20220314 17:02:34.827" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 17:02:34.813" endtime="20220314 17:02:34.827"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:02:35.018" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:02:34.829" endtime="20220314 17:02:35.018"/>
</kw>
<msg timestamp="20220314 17:02:35.034" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:02:34.828" endtime="20220314 17:02:35.034"/>
</kw>
<msg timestamp="20220314 17:02:35.034" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:02:34.828" endtime="20220314 17:02:35.034"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:02:35.192" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 17:02:35.036" endtime="20220314 17:02:35.192"/>
</kw>
<msg timestamp="20220314 17:02:35.192" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 17:02:35.036" endtime="20220314 17:02:35.192"/>
</kw>
<msg timestamp="20220314 17:02:35.192" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 17:02:35.035" endtime="20220314 17:02:35.192"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:02:35.438" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g4_m1', 'g903hero_g5_m1_shifted', 'g903hero_g10_m1', 'g903...</msg>
<status status="PASS" starttime="20220314 17:02:35.194" endtime="20220314 17:02:35.438"/>
</kw>
<msg timestamp="20220314 17:02:35.439" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g4_m1', 'g903hero_g5_m1_shifted', 'g903hero_g10_m1', 'g903...</msg>
<status status="PASS" starttime="20220314 17:02:35.194" endtime="20220314 17:02:35.439"/>
</kw>
<msg timestamp="20220314 17:02:35.439" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 17:02:35.193" endtime="20220314 17:02:35.439"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:02:35.440" endtime="20220314 17:02:35.440"/>
</kw>
<status status="PASS" starttime="20220314 17:02:35.192" endtime="20220314 17:02:35.440"/>
</branch>
<status status="PASS" starttime="20220314 17:02:35.192" endtime="20220314 17:02:35.440"/>
</if>
<status status="PASS" starttime="20220314 17:02:35.035" endtime="20220314 17:02:35.440"/>
</iter>
<status status="PASS" starttime="20220314 17:02:35.034" endtime="20220314 17:02:35.440"/>
</for>
<msg timestamp="20220314 17:02:35.440" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 17:02:33.801" endtime="20220314 17:02:35.440"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 17:02:35.441" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/report_rate'}</msg>
<status status="PASS" starttime="20220314 17:02:35.441" endtime="20220314 17:02:35.441"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 17:02:35.441" endtime="20220314 17:02:35.447"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 17:02:36.447" level="INFO">17:02:35.445571: {"msgId": "f8d96e19-f7b4-48c6-a9c0-6b6f74ce8f65", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.ReportRate", "value": 125}}</msg>
<msg timestamp="20220314 17:02:36.447" level="INFO">${response} =  {"msgId": "f8d96e19-f7b4-48c6-a9c0-6b6f74ce8f65", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.g...</msg>
<status status="PASS" starttime="20220314 17:02:35.447" endtime="20220314 17:02:36.448"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 17:02:36.450" level="INFO">${response} = {'msgId': 'f8d96e19-f7b4-48c6-a9c0-6b6f74ce8f65', 'verb': 'GET', 'path': '/mouse/dev00000000/report_rate', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.go...</msg>
<status status="PASS" starttime="20220314 17:02:36.449" endtime="20220314 17:02:36.450"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:02:36.480" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 17:02:36.455" endtime="20220314 17:02:36.480"/>
</kw>
<msg timestamp="20220314 17:02:36.480" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 17:02:36.453" endtime="20220314 17:02:36.480"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:02:36.498" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 17:02:36.481" endtime="20220314 17:02:36.498"/>
</kw>
<msg timestamp="20220314 17:02:36.499" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 17:02:36.481" endtime="20220314 17:02:36.499"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:02:36.499" endtime="20220314 17:02:36.499"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 17:02:36.500" endtime="20220314 17:02:36.500"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 17:02:36.500" endtime="20220314 17:02:36.500"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:02:36.501" endtime="20220314 17:02:36.501"/>
</kw>
<status status="PASS" starttime="20220314 17:02:36.451" endtime="20220314 17:02:36.501"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_report_rate}</var>
<arg>${response}</arg>
<arg>value</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:02:36.516" level="INFO">${result} = [125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125]</msg>
<status status="PASS" starttime="20220314 17:02:36.503" endtime="20220314 17:02:36.516"/>
</kw>
<msg timestamp="20220314 17:02:36.516" level="INFO">${result} = [125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125]</msg>
<status status="PASS" starttime="20220314 17:02:36.502" endtime="20220314 17:02:36.516"/>
</kw>
<msg timestamp="20220314 17:02:36.516" level="INFO">${backend_report_rate} = 125</msg>
<status status="PASS" starttime="20220314 17:02:36.501" endtime="20220314 17:02:36.516"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_report_rate}</arg>
<arg>${backend_report_rate}</arg>
<arg>The expected repo rate (${expected_report_rate}) and the actual value from backend repo rate (${backend_report_rate}) does not match</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 17:02:36.517" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 17:02:36.517" endtime="20220314 17:02:36.517"/>
</kw>
<status status="PASS" starttime="20220314 17:02:33.794" endtime="20220314 17:02:36.517"/>
</kw>
<kw name="common.Restart GHUB" library="common_keywords_kragle">
<kw name="Log To Console" library="BuiltIn">
<arg>Restarting GHUB...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:02:36.518" endtime="20220314 17:02:36.518"/>
</kw>
<kw name="Control Lghub" library="libraries.process.Application">
<status status="PASS" starttime="20220314 17:02:36.518" endtime="20220314 17:02:36.518"/>
</kw>
<kw name="Terminate All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to terminate all associated processes (including support applications such as VirtualHere).</doc>
<status status="PASS" starttime="20220314 17:02:36.519" endtime="20220314 17:02:42.770"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 17:02:52.772" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20220314 17:02:42.772" endtime="20220314 17:02:52.772"/>
</kw>
<kw name="Launch All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to launch all associated processes (including support applications). Already running process are
not re-launched.</doc>
<status status="PASS" starttime="20220314 17:02:52.774" endtime="20220314 17:03:05.677"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 17:03:10.686" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220314 17:03:05.678" endtime="20220314 17:03:10.686"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="PASS" starttime="20220314 17:03:10.688" endtime="20220314 17:03:15.963"/>
</kw>
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:03:20.988" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:03:15.967" endtime="20220314 17:03:20.988"/>
</kw>
<status status="FAIL" starttime="20220314 17:03:15.966" endtime="20220314 17:03:20.991"/>
</kw>
<msg timestamp="20220314 17:03:20.991" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 17:03:15.965" endtime="20220314 17:03:20.991"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 17:03:20.993" endtime="20220314 17:03:20.993"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 17:03:20.994" endtime="20220314 17:03:20.994"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 17:03:20.995" endtime="20220314 17:03:20.995"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 17:03:20.995" endtime="20220314 17:03:20.995"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 17:03:20.995" endtime="20220314 17:03:20.995"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 17:03:20.996" endtime="20220314 17:03:20.996"/>
</kw>
<status status="NOT RUN" starttime="20220314 17:03:20.992" endtime="20220314 17:03:20.996"/>
</branch>
<status status="PASS" starttime="20220314 17:03:20.991" endtime="20220314 17:03:20.996"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 17:03:20.999" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 17:03:20.999" endtime="20220314 17:03:20.999"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 17:03:21.000" level="INFO">Length is 1</msg>
<msg timestamp="20220314 17:03:21.000" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 17:03:21.000" endtime="20220314 17:03:21.000"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:03:21.001" endtime="20220314 17:03:21.020"/>
</kw>
<status status="PASS" starttime="20220314 17:03:21.000" endtime="20220314 17:03:21.020"/>
</kw>
<status status="PASS" starttime="20220314 17:03:20.997" endtime="20220314 17:03:21.020"/>
</kw>
<msg timestamp="20220314 17:03:21.020" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220314 17:03:20.997" endtime="20220314 17:03:21.020"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:03:21.021" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:03:21.021" endtime="20220314 17:03:21.022"/>
</kw>
<status status="PASS" starttime="20220314 17:03:15.965" endtime="20220314 17:03:21.022"/>
</iter>
<status status="PASS" starttime="20220314 17:03:15.965" endtime="20220314 17:03:21.022"/>
</for>
<status status="PASS" starttime="20220314 17:03:15.964" endtime="20220314 17:03:21.023"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.Set GHUB As Active Window</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Set GHUB As Active Window" library="common_keywords_kragle">
<kw name="Is Darwin" library="libraries.input.keyboard">
<var>${is_mac}</var>
<msg timestamp="20220314 17:03:21.027" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220314 17:03:21.026" endtime="20220314 17:03:21.027"/>
</kw>
<if>
<branch type="IF" condition="${is_mac} is ${True}">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>lghub</arg>
<arg>${maximized_screen}</arg>
<status status="NOT RUN" starttime="20220314 17:03:21.028" endtime="20220314 17:03:21.028"/>
</kw>
<status status="NOT RUN" starttime="20220314 17:03:21.027" endtime="20220314 17:03:21.028"/>
</branch>
<branch type="ELSE">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>Logitech G HUB</arg>
<arg>${maximized_screen}</arg>
<status status="PASS" starttime="20220314 17:03:21.028" endtime="20220314 17:03:21.049"/>
</kw>
<status status="PASS" starttime="20220314 17:03:21.028" endtime="20220314 17:03:21.049"/>
</branch>
<status status="PASS" starttime="20220314 17:03:21.027" endtime="20220314 17:03:21.049"/>
</if>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220314 17:03:23.064" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20220314 17:03:21.051" endtime="20220314 17:03:23.064"/>
</kw>
<status status="PASS" starttime="20220314 17:03:21.025" endtime="20220314 17:03:23.064"/>
</kw>
<status status="PASS" starttime="20220314 17:03:21.024" endtime="20220314 17:03:23.065"/>
</kw>
<status status="PASS" starttime="20220314 17:02:36.518" endtime="20220314 17:03:23.065"/>
</kw>
<kw name="home.Check Device Arrival in G HUB" library="home_screen">
<arg>${device['displayName']}</arg>
<doc>Check that it appears in the Home view and if appears then go back to home screen.</doc>
<kw name="home.Open Device Configuration" library="home_screen">
<arg>${device_name}</arg>
<doc>Click on the device to open device configuration and if device introduction page opens then skip it.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>home.Is Device Home Screen Loaded</arg>
<arg>${device_name}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device Home Screen Loaded" library="home_screen">
<arg>${device_name}</arg>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:03:28.145" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:03:23.100" endtime="20220314 17:03:28.145"/>
</kw>
<status status="FAIL" starttime="20220314 17:03:23.099" endtime="20220314 17:03:28.148"/>
</kw>
<msg timestamp="20220314 17:03:28.148" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220314 17:03:23.097" endtime="20220314 17:03:28.148"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220314 17:03:28.150" endtime="20220314 17:03:28.150"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 17:03:28.151" endtime="20220314 17:03:28.151"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 17:03:28.152" endtime="20220314 17:03:28.152"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220314 17:03:28.152" endtime="20220314 17:03:28.153"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220314 17:03:28.153" endtime="20220314 17:03:28.153"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220314 17:03:28.154" endtime="20220314 17:03:28.154"/>
</kw>
<status status="NOT RUN" starttime="20220314 17:03:28.149" endtime="20220314 17:03:28.154"/>
</branch>
<status status="PASS" starttime="20220314 17:03:28.149" endtime="20220314 17:03:28.154"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 17:03:28.157" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 17:03:28.157" endtime="20220314 17:03:28.157"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 17:03:28.158" level="INFO">Length is 1</msg>
<msg timestamp="20220314 17:03:28.158" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 17:03:28.158" endtime="20220314 17:03:28.158"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:03:28.160" endtime="20220314 17:03:28.175"/>
</kw>
<status status="PASS" starttime="20220314 17:03:28.159" endtime="20220314 17:03:28.175"/>
</kw>
<status status="PASS" starttime="20220314 17:03:28.156" endtime="20220314 17:03:28.175"/>
</kw>
<msg timestamp="20220314 17:03:28.175" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220314 17:03:28.155" endtime="20220314 17:03:28.175"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:03:28.176" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:03:28.176" endtime="20220314 17:03:28.177"/>
</kw>
<status status="PASS" starttime="20220314 17:03:23.096" endtime="20220314 17:03:28.177"/>
</iter>
<status status="PASS" starttime="20220314 17:03:23.095" endtime="20220314 17:03:28.177"/>
</for>
<status status="PASS" starttime="20220314 17:03:23.095" endtime="20220314 17:03:28.177"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="common.Verfiy Back Button Present" library="common_keywords_kragle">
<var>${status}</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:03:29.185" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220314 17:03:29.188" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:03:28.179" endtime="20220314 17:03:29.188"/>
</kw>
<msg timestamp="20220314 17:03:29.188" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 17:03:28.178" endtime="20220314 17:03:29.188"/>
</kw>
<msg timestamp="20220314 17:03:29.189" level="INFO">${status} = False</msg>
<status status="PASS" starttime="20220314 17:03:28.178" endtime="20220314 17:03:29.189"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${status}==False</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:03:29.191" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:03:29.191" endtime="20220314 17:03:29.192"/>
</kw>
<status status="PASS" starttime="20220314 17:03:28.177" endtime="20220314 17:03:29.192"/>
</iter>
<status status="PASS" starttime="20220314 17:03:28.177" endtime="20220314 17:03:29.193"/>
</for>
<kw name="home.Is Screen Loaded" library="home_screen">
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${home_view}</arg>
<arg>20</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220314 17:03:29.196" level="INFO">${words} = ['#home-view']</msg>
<status status="PASS" starttime="20220314 17:03:29.196" endtime="20220314 17:03:29.196"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220314 17:03:29.197" level="INFO">Length is 1</msg>
<msg timestamp="20220314 17:03:29.197" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220314 17:03:29.197" endtime="20220314 17:03:29.197"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:03:29.198" endtime="20220314 17:03:29.210"/>
</kw>
<status status="PASS" starttime="20220314 17:03:29.198" endtime="20220314 17:03:29.210"/>
</kw>
<status status="PASS" starttime="20220314 17:03:29.195" endtime="20220314 17:03:29.210"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${home_back_button_selector}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:03:31.218" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<status status="PASS" starttime="20220314 17:03:29.211" endtime="20220314 17:03:31.221"/>
</kw>
<status status="PASS" starttime="20220314 17:03:29.194" endtime="20220314 17:03:31.222"/>
</kw>
<status status="PASS" starttime="20220314 17:03:23.094" endtime="20220314 17:03:31.222"/>
</kw>
<kw name="home.Scroll Till Device Appears On Home Screen" library="home_screen">
<arg>${device_name}</arg>
<kw name="home.Scroll To The Left Most Device" library="home_screen">
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${left_scroll_present}</var>
<arg>common.Is Left Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Left Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:03:33.243" level="INFO">Failed to find element with selector: .left-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 17:03:31.229" endtime="20220314 17:03:33.244"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_left_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:03:33.257" level="FAIL">Failure: Selector ".left-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 17:03:33.245" endtime="20220314 17:03:33.257"/>
</kw>
<status status="FAIL" starttime="20220314 17:03:31.228" endtime="20220314 17:03:33.260"/>
</kw>
<msg timestamp="20220314 17:03:33.261" level="INFO">${left_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 17:03:31.227" endtime="20220314 17:03:33.261"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${left_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:03:33.262" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:03:33.261" endtime="20220314 17:03:33.262"/>
</kw>
<status status="PASS" starttime="20220314 17:03:31.226" endtime="20220314 17:03:33.262"/>
</iter>
<status status="PASS" starttime="20220314 17:03:31.226" endtime="20220314 17:03:33.262"/>
</for>
<status status="PASS" starttime="20220314 17:03:31.225" endtime="20220314 17:03:33.263"/>
</kw>
<for flavor="IN RANGE">
<var>${index}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${index}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${right_scroll_present}</var>
<arg>common.Is Right Scroll Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Is Right Scroll Present" library="common_keywords_kragle">
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_disabled}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:03:35.279" level="INFO">Failed to find element with selector: .right-arrow-container.disabled and attributes:{}</msg>
<status status="PASS" starttime="20220314 17:03:33.264" endtime="20220314 17:03:35.282"/>
</kw>
<kw name="Not Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_right_arrow_hidden}</arg>
<arg>allow_hidden=${True}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element is not present within a given time period.</doc>
<msg timestamp="20220314 17:03:35.297" level="FAIL">Failure: Selector ".right-arrow-container.hidden" is Loaded (Not Expected)</msg>
<status status="FAIL" starttime="20220314 17:03:35.283" endtime="20220314 17:03:35.297"/>
</kw>
<status status="FAIL" starttime="20220314 17:03:33.264" endtime="20220314 17:03:35.300"/>
</kw>
<msg timestamp="20220314 17:03:35.300" level="INFO">${right_scroll_present} = False</msg>
<status status="PASS" starttime="20220314 17:03:33.263" endtime="20220314 17:03:35.300"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${device_reflected_on_ui}</var>
<arg>Expect Element</arg>
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:03:35.303" endtime="20220314 17:03:35.343"/>
</kw>
<msg timestamp="20220314 17:03:35.343" level="INFO">${device_reflected_on_ui} = True</msg>
<status status="PASS" starttime="20220314 17:03:35.301" endtime="20220314 17:03:35.343"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${device_reflected_on_ui} is ${True} or ${right_scroll_present} is ${False}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220314 17:03:35.344" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220314 17:03:35.343" endtime="20220314 17:03:35.344"/>
</kw>
<status status="PASS" starttime="20220314 17:03:33.263" endtime="20220314 17:03:35.344"/>
</iter>
<status status="PASS" starttime="20220314 17:03:33.263" endtime="20220314 17:03:35.344"/>
</for>
<status status="PASS" starttime="20220314 17:03:31.224" endtime="20220314 17:03:35.345"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${is_device_in_active_state}</var>
<arg>home.Is Device In Active State</arg>
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="home.Is Device In Active State" library="home_screen">
<arg>${device_name}</arg>
<arg>${wait_time}</arg>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=${wait_time}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220314 17:03:35.348" endtime="20220314 17:03:35.378"/>
</kw>
<status status="PASS" starttime="20220314 17:03:35.347" endtime="20220314 17:03:35.379"/>
</kw>
<msg timestamp="20220314 17:03:35.379" level="INFO">${is_device_in_active_state} = True</msg>
<status status="PASS" starttime="20220314 17:03:35.346" endtime="20220314 17:03:35.379"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${is_device_in_active_state} is ${True}</arg>
<arg>${True}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 17:03:35.379" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 17:03:35.379" endtime="20220314 17:03:35.380"/>
</kw>
<status status="PASS" starttime="20220314 17:03:23.092" endtime="20220314 17:03:35.380"/>
</kw>
<msg timestamp="20220314 17:03:35.380" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220314 17:03:23.091" endtime="20220314 17:03:35.380"/>
</kw>
<if>
<branch type="IF" condition="'${status}' == 'False'">
<kw name="LOG WARNING WITH GHUB BACKEND LOGS" library="logging">
<arg>${device_name} not loaded in GHub.</arg>
<status status="NOT RUN" starttime="20220314 17:03:35.381" endtime="20220314 17:03:35.381"/>
</kw>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<status status="NOT RUN" starttime="20220314 17:03:35.381" endtime="20220314 17:03:35.381"/>
</kw>
<status status="NOT RUN" starttime="20220314 17:03:35.381" endtime="20220314 17:03:35.382"/>
</branch>
<status status="PASS" starttime="20220314 17:03:35.381" endtime="20220314 17:03:35.382"/>
</if>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_active_device_icon}</arg>
<arg>text=${device_name}</arg>
<arg>wait_timeout=20</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:03:35.382" endtime="20220314 17:03:36.049"/>
</kw>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 17:03:38.101" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220314 17:03:38.103" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:03:36.051" endtime="20220314 17:03:38.103"/>
</kw>
<status status="PASS" starttime="20220314 17:03:36.051" endtime="20220314 17:03:38.103"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220314 17:03:40.154" level="FAIL">Failure: Selector "//*[@id="color-variant"]/button" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:03:38.105" endtime="20220314 17:03:40.154"/>
</kw>
<status status="PASS" starttime="20220314 17:03:38.104" endtime="20220314 17:03:40.155"/>
</kw>
<status status="PASS" starttime="20220314 17:03:36.049" endtime="20220314 17:03:40.156"/>
</kw>
<kw name="device_view.Handle Got It Popup" library="device_main_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${got_it_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${device_view_got_it_button}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${device_view_got_it_button}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220314 17:03:45.179" level="FAIL">Failure: Selector "//div[@class='coach-mark']/button[text()='GOT IT']" is Not Loaded</msg>
<status status="FAIL" starttime="20220314 17:03:40.157" endtime="20220314 17:03:45.180"/>
</kw>
<msg timestamp="20220314 17:03:45.180" level="INFO">${got_it_button_present} = False</msg>
<status status="PASS" starttime="20220314 17:03:40.157" endtime="20220314 17:03:45.180"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${got_it_button_present} is ${False}</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20220314 17:03:45.182" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 17:03:45.182" endtime="20220314 17:03:45.183"/>
</kw>
<status status="PASS" starttime="20220314 17:03:40.156" endtime="20220314 17:03:45.184"/>
</kw>
<status status="PASS" starttime="20220314 17:03:23.089" endtime="20220314 17:03:45.184"/>
</kw>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220314 17:03:45.187" endtime="20220314 17:03:45.808"/>
</kw>
<status status="PASS" starttime="20220314 17:03:45.186" endtime="20220314 17:03:45.808"/>
</kw>
<status status="PASS" starttime="20220314 17:03:23.067" endtime="20220314 17:03:45.809"/>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>backend.Verify Dpi Of Device</arg>
<arg>${dpi}</arg>
<arg>${device['displayName']}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="backend.Verify DPI Of Device" library="backend">
<arg>${dpi}</arg>
<arg>${device['displayName']}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 17:03:45.827" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 17:03:45.826" endtime="20220314 17:03:45.827"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 17:03:46.839" level="INFO">17:03:05.664878: {"msgId": "", "verb": "OPTIONS", "path": "/", "origin": "backend"}
17:03:45.832135: {"msgId": "e4aca884-0948-4c63-b022-8b516780df8f", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO", "ZONE_PRIMARY": "PRIMARY"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 17:03:46.840" level="INFO">${res} =  {"msgId": "e4aca884-0948-4c63-b022-8b516780df8f", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 17:03:45.827" endtime="20220314 17:03:46.840"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 17:03:46.843" level="INFO">${res} = {'msgId': 'e4aca884-0948-4c63-b022-8b516780df8f', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 17:03:46.842" endtime="20220314 17:03:46.843"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:03:46.875" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 17:03:46.846" endtime="20220314 17:03:46.875"/>
</kw>
<msg timestamp="20220314 17:03:46.875" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 17:03:46.844" endtime="20220314 17:03:46.875"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:03:47.070" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:03:46.877" endtime="20220314 17:03:47.070"/>
</kw>
<msg timestamp="20220314 17:03:47.094" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:03:46.877" endtime="20220314 17:03:47.094"/>
</kw>
<msg timestamp="20220314 17:03:47.095" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:03:46.876" endtime="20220314 17:03:47.095"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:03:47.272" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 17:03:47.097" endtime="20220314 17:03:47.272"/>
</kw>
<msg timestamp="20220314 17:03:47.272" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 17:03:47.097" endtime="20220314 17:03:47.272"/>
</kw>
<msg timestamp="20220314 17:03:47.273" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 17:03:47.096" endtime="20220314 17:03:47.273"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:03:47.571" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g3_m1_shifted', 'g903hero_g5_m1', 'g903hero_g1_m1', 'g903h...</msg>
<status status="PASS" starttime="20220314 17:03:47.274" endtime="20220314 17:03:47.571"/>
</kw>
<msg timestamp="20220314 17:03:47.573" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g3_m1_shifted', 'g903hero_g5_m1', 'g903hero_g1_m1', 'g903h...</msg>
<status status="PASS" starttime="20220314 17:03:47.274" endtime="20220314 17:03:47.573"/>
</kw>
<msg timestamp="20220314 17:03:47.573" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 17:03:47.273" endtime="20220314 17:03:47.573"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:03:47.574" endtime="20220314 17:03:47.574"/>
</kw>
<status status="PASS" starttime="20220314 17:03:47.273" endtime="20220314 17:03:47.574"/>
</branch>
<status status="PASS" starttime="20220314 17:03:47.273" endtime="20220314 17:03:47.574"/>
</if>
<status status="PASS" starttime="20220314 17:03:47.095" endtime="20220314 17:03:47.574"/>
</iter>
<status status="PASS" starttime="20220314 17:03:47.095" endtime="20220314 17:03:47.574"/>
</for>
<msg timestamp="20220314 17:03:47.574" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 17:03:45.826" endtime="20220314 17:03:47.574"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 17:03:47.576" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/dpi'}</msg>
<status status="PASS" starttime="20220314 17:03:47.575" endtime="20220314 17:03:47.576"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/dpi</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 17:03:47.577" endtime="20220314 17:03:47.577"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 17:03:48.578" level="INFO">17:03:47.577106: {"msgId": "2370d820-07d1-4617-98a7-3636717f3dbd", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.Dpi.State", "deviceId": "dev00000000", "dpi": 1800, "dpiIndex": 3, "shifted": false}}</msg>
<msg timestamp="20220314 17:03:48.578" level="INFO">${response} =  {"msgId": "2370d820-07d1-4617-98a7-3636717f3dbd", "verb": "GET", "path": "/mouse/dev00000000/dpi", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapi...</msg>
<status status="PASS" starttime="20220314 17:03:47.577" endtime="20220314 17:03:48.579"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 17:03:48.581" level="INFO">${response} = {'msgId': '2370d820-07d1-4617-98a7-3636717f3dbd', 'verb': 'GET', 'path': '/mouse/dev00000000/dpi', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis...</msg>
<status status="PASS" starttime="20220314 17:03:48.580" endtime="20220314 17:03:48.581"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:03:48.607" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 17:03:48.586" endtime="20220314 17:03:48.607"/>
</kw>
<msg timestamp="20220314 17:03:48.608" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 17:03:48.584" endtime="20220314 17:03:48.608"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:03:48.622" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 17:03:48.609" endtime="20220314 17:03:48.622"/>
</kw>
<msg timestamp="20220314 17:03:48.622" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 17:03:48.608" endtime="20220314 17:03:48.622"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:03:48.623" endtime="20220314 17:03:48.623"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 17:03:48.623" endtime="20220314 17:03:48.624"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 17:03:48.624" endtime="20220314 17:03:48.624"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:03:48.624" endtime="20220314 17:03:48.624"/>
</kw>
<status status="PASS" starttime="20220314 17:03:48.582" endtime="20220314 17:03:48.625"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_dpi}</var>
<arg>${response}</arg>
<arg>dpi</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:03:48.640" level="INFO">${result} = [1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800]</msg>
<status status="PASS" starttime="20220314 17:03:48.626" endtime="20220314 17:03:48.640"/>
</kw>
<msg timestamp="20220314 17:03:48.641" level="INFO">${result} = [1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800]</msg>
<status status="PASS" starttime="20220314 17:03:48.626" endtime="20220314 17:03:48.641"/>
</kw>
<msg timestamp="20220314 17:03:48.641" level="INFO">${backend_dpi} = 1800</msg>
<status status="PASS" starttime="20220314 17:03:48.625" endtime="20220314 17:03:48.641"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_dpi}</arg>
<arg>${backend_dpi}</arg>
<arg>The expected dpi value (${expected_dpi}) and actual value from backend (${backend_dpi}) is different</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 17:03:48.642" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 17:03:48.641" endtime="20220314 17:03:48.642"/>
</kw>
<status status="PASS" starttime="20220314 17:03:45.812" endtime="20220314 17:03:48.642"/>
</kw>
<status status="PASS" starttime="20220314 17:03:45.810" endtime="20220314 17:03:48.642"/>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<arg>backend.Verify Report Rate</arg>
<arg>${device['displayName']}</arg>
<arg>${report_rate}</arg>
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<kw name="backend.Verify Report Rate" library="backend">
<arg>${device['displayName']}</arg>
<arg>${report_rate}</arg>
<kw name="backend.Get Connected Device Id" library="backend">
<var>${device_id}</var>
<arg>${device_name}</arg>
<doc>Gets device id of a particular device model
For ex: to get device id of G502, pass the device_name argument as 'G502' - i.e. display name
This keyword also saves following global variables , can be used across the tests
Device Id, Slot Prefix, interface Id</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 17:03:48.651" level="INFO">{'verb': 'GET', 'path': '/devices/list'}</msg>
<status status="PASS" starttime="20220314 17:03:48.651" endtime="20220314 17:03:48.651"/>
</kw>
<kw name="Get Message Response From Bulk" library="libraries.components.Websocket">
<var>${res}</var>
<arg>verb=GET</arg>
<arg>path=/devices/list</arg>
<arg>timeout=60</arg>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 17:03:49.660" level="INFO">17:03:48.658148: {"msgId": "7566f6dc-80e6-4ab0-a198-071dbe23f203", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.devices.Device.Info.List", "deviceInfos": [{"id": "dev00000000", "pid": 49297, "state": "ACTIVE", "onboardMode": false, "individualMode": false, "resourcesAvailable": true, "connectionType": "USB", "hasWirelessInterface": false, "deviceType": "MOUSE", "deviceFamily": "", "deviceModel": "g903_hero", "displayName": "G903 LIGHTSPEED", "extendedDisplayName": "G903 LIGHTSPEED Wireless Gaming Mouse", "slotPrefix": "g903hero", "thumbnail": "pipeline://core/thumbnails/g900.png", "deviceExt": 0, "deviceUnitId": "1068377182", "deviceSignature": "MOUSE.g903_hero.0.1068377182", "givenName": "", "capabilities": {"lightingSupport": {"deviceCategory": "MOUSE_RGB_ZONAL", "typeMap": {"ZONE_BRANDING": "LOGO", "ZONE_PRIMARY": "PRIMARY"}, "zones": [{"zoneType": "ZONE_PRIMARY", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}, {"zoneType": "ZONE_BRANDING", "supportedEffects": [{"id": "OFF", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "FIXED", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "CYCLE", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}, {"id": "BREATHING", "syncable": true, "fixedIntensity": false, "signature": false, "inactivityOnly": false}], "onboardCluster": "CLUSTER_DEFAULT"}], "isMonochrome": false, "isPerKey": false, "hideStartupEffect": false, "shutdownEffect": false, "brightnessLevels": [], "powerSavingEffect": true, "lowBatteryEffect": true, "brightnessPercentage": false, "gamma": false, "firmwareOnly": false, "offRamp": false, "activeDimming": false, "hasPositionalEffect": false}, "sleepTimer": false, "mstateSupport": {"count": 1, "timeOut": 0}, "maskableZones": {"zones": [{"id": "left_side", "slotIds": ["g903hero_g4_m1", "g903hero_g4_m1_shifted", "g903hero_g5_m1", "g903hero_g5_m1_shifted"], "displayIconKey": "mouse_2_buttons_left_icon", "renderIconKey": "cover_image_left", "enabled": false}, {"id": "right_side", "slotIds": ["g903hero_g6_m1", "g903hero_g6_m1_shifted", "g903hero_g7_m1", "g903hero_g7_m1_shifted"], "displayIconKey": "mouse_2_buttons_right_icon", "renderIconKey": "cover_image_right", "enabled": false}]}, "fnInversion": false, "presentSplashScreen": false, "customizableColor": false, "wirelessReportRate": false, "hybridEngine": false, "advancedSleepTimer": false, "angleSnapping": false, "excludeGShift": false, "onboardCycleId": {"value": 11}, "hostRemovalSupport": false, "headphoneJack": false, "hostInfos": false, "gkeyLayout": "INVALID_GKEY_LAYOUT", "hasBatteryStatus": true, "powerOffTimer": false, "requiresBackupForDfu": false, "unifiedBattery": false, "dpiLighting": true, "nonInteractive": false, "receiverPairing": {"receiverType": "LS1", "receiverPid": 0, "pairingAction": "ACTION_POWER_CYCLE", "hasForcePairing": false}, "chargepadCompatible": true, "individuality": false}, "activeInterfaces": [{"type": "DEVIO", "id": "046d_c091", "pid": 49297, "modelId": 0, "extendedModel": 0, "serialNumber": "1068377182", "path": "usb\\vid_046d&amp;pid_c091&amp;mi_02\\8&amp;11fffa44&amp;0&amp;0002", "containerId": "a946cb90-f3fa-5c04-a9a6-99e0af7acf3e", "deviceType": "MOUSE", "deviceName": "G903 LIGHTSPEED Wireless Gaming Mouse w/ HERO", "keyboardLayout": "INVALID_LAYOUT", "firmwareVersion": "23.1.13", "unitId": "1068377182", "firmwareName": "MPM2301", "connectionType": "USB", "hasOnboardMode": true}], "slots": {"g903hero_g5_m1": {"id": "g903hero_g5_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1_shifted": {"id": "g903hero_g6_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1_shifted": {"id": "g903hero_g11_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g11_m1": {"id": "g903hero_g11_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1": {"id": "g903hero_g2_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_lighting_setting_firmware": {"id": "g903hero_lighting_setting_firmware", "attribute": "FIRMWARE_LIGHTING_SETTINGS", "disabled": false}, "g903hero_g3_m1": {"id": "g903hero_g3_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1": {"id": "g903hero_g7_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g2_m1_shifted": {"id": "g903hero_g2_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g3_m1_shifted": {"id": "g903hero_g3_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1": {"id": "g903hero_g1_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1": {"id": "g903hero_g12_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g6_m1": {"id": "g903hero_g6_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g8_m1_shifted": {"id": "g903hero_g8_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1": {"id": "g903hero_g9_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1_shifted": {"id": "g903hero_g4_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g1_m1_shifted": {"id": "g903hero_g1_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g9_m1_shifted": {"id": "g903hero_g9_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g5_m1_shifted": {"id": "g903hero_g5_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1_shifted": {"id": "g903hero_g10_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g12_m1_shifted": {"id": "g903hero_g12_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g4_m1": {"id": "g903hero_g4_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_mouse_settings": {"id": "g903hero_mouse_settings", "attribute": "MOUSE_SETTINGS", "disabled": false}, "g903hero_g8_m1": {"id": "g903hero_g8_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g10_m1": {"id": "g903hero_g10_m1", "attribute": "MACRO_PLAYBACK", "disabled": false}, "g903hero_g7_m1_shifted": {"id": "g903hero_g7_m1_shifted", "attribute": "MACRO_PLAYBACK", "disabled": false}}}]}}</msg>
<msg timestamp="20220314 17:03:49.661" level="INFO">${res} =  {"msgId": "7566f6dc-80e6-4ab0-a198-071dbe23f203", "verb": "GET", "path": "/devices/list", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/log...</msg>
<status status="PASS" starttime="20220314 17:03:48.651" endtime="20220314 17:03:49.661"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${res}</var>
<arg>${res}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 17:03:49.663" level="INFO">${res} = {'msgId': '7566f6dc-80e6-4ab0-a198-071dbe23f203', 'verb': 'GET', 'path': '/devices/list', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.googleapis.com/logi...</msg>
<status status="PASS" starttime="20220314 17:03:49.662" endtime="20220314 17:03:49.663"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${payload}</var>
<arg>${res}</arg>
<arg>payload</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:03:49.692" level="INFO">${result} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 17:03:49.665" endtime="20220314 17:03:49.692"/>
</kw>
<msg timestamp="20220314 17:03:49.692" level="INFO">${payload} = [{'@type': 'type.googleapis.com/logi.protocol.devices.Device.Info.List', 'deviceInfos': [{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resource...</msg>
<status status="PASS" starttime="20220314 17:03:49.664" endtime="20220314 17:03:49.692"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>@{deviceInfos}</var>
<arg>${payload}</arg>
<arg>deviceInfos</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:03:49.916" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:03:49.695" endtime="20220314 17:03:49.916"/>
</kw>
<msg timestamp="20220314 17:03:49.935" level="INFO">${result} = [[{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:03:49.693" endtime="20220314 17:03:49.935"/>
</kw>
<msg timestamp="20220314 17:03:49.936" level="INFO">@{deviceInfos} = [ {'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType'...</msg>
<status status="PASS" starttime="20220314 17:03:49.693" endtime="20220314 17:03:49.936"/>
</kw>
<for flavor="IN">
<var>${device_data}</var>
<value>@{deviceInfos}</value>
<iter>
<var name="${device_data}">{'id': 'dev00000000', 'pid': 49297, 'state': 'ACTIVE', 'onboardMode': False, 'individualMode': False, 'resourcesAvailable': True, 'connectionType': 'USB', 'hasWirelessInterface': False, 'deviceType': ...</var>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${device_displayname}</var>
<arg>${device_data}</arg>
<arg>displayName</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:03:50.140" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 17:03:49.941" endtime="20220314 17:03:50.140"/>
</kw>
<msg timestamp="20220314 17:03:50.140" level="INFO">${result} = ['G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIGHTSPEED', 'G903 LIG...</msg>
<status status="PASS" starttime="20220314 17:03:49.940" endtime="20220314 17:03:50.140"/>
</kw>
<msg timestamp="20220314 17:03:50.141" level="INFO">${device_displayname} = G903 LIGHTSPEED</msg>
<status status="PASS" starttime="20220314 17:03:49.939" endtime="20220314 17:03:50.141"/>
</kw>
<if>
<branch type="IF" condition="'${device_displayname}'=='${device_name}'">
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${id}</var>
<arg>${device_data}</arg>
<arg>id</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:03:50.461" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g5_m1', 'g903hero_g6_m1_shifted', 'g903hero_g11_m1_shifted...</msg>
<status status="PASS" starttime="20220314 17:03:50.142" endtime="20220314 17:03:50.461"/>
</kw>
<msg timestamp="20220314 17:03:50.463" level="INFO">${result} = ['dev00000000', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'OFF', 'FIXED', 'CYCLE', 'BREATHING', 'left_side', 'right_side', '046d_c091', 'g903hero_g5_m1', 'g903hero_g6_m1_shifted', 'g903hero_g11_m1_shifted...</msg>
<status status="PASS" starttime="20220314 17:03:50.142" endtime="20220314 17:03:50.463"/>
</kw>
<msg timestamp="20220314 17:03:50.463" level="INFO">${id} = dev00000000</msg>
<status status="PASS" starttime="20220314 17:03:50.141" endtime="20220314 17:03:50.463"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>device id= ${id}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:03:50.463" endtime="20220314 17:03:50.463"/>
</kw>
<status status="PASS" starttime="20220314 17:03:50.141" endtime="20220314 17:03:50.463"/>
</branch>
<status status="PASS" starttime="20220314 17:03:50.141" endtime="20220314 17:03:50.463"/>
</if>
<status status="PASS" starttime="20220314 17:03:49.937" endtime="20220314 17:03:50.464"/>
</iter>
<status status="PASS" starttime="20220314 17:03:49.937" endtime="20220314 17:03:50.464"/>
</for>
<msg timestamp="20220314 17:03:50.464" level="INFO">${device_id} = dev00000000</msg>
<status status="PASS" starttime="20220314 17:03:48.650" endtime="20220314 17:03:50.464"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220314 17:03:50.464" level="INFO">{'verb': 'GET', 'path': '/mouse/dev00000000/report_rate'}</msg>
<status status="PASS" starttime="20220314 17:03:50.464" endtime="20220314 17:03:50.465"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>reconnect_on_error=True</arg>
<arg>verb=GET</arg>
<arg>path=/mouse/${device_id}/report_rate</arg>
<arg>timeout=50</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220314 17:03:50.465" endtime="20220314 17:03:50.470"/>
</kw>
<kw name="Get Message Response" library="libraries.components.Websocket">
<var>${response}</var>
<doc>Returns the 'send_message' response in json format.
To be called immediately after 'Expect Message' in test cases.</doc>
<msg timestamp="20220314 17:03:51.471" level="INFO">17:03:50.469022: {"msgId": "aa69fbb0-3a1a-4228-ab48-564991b73264", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.googleapis.com/logi.protocol.mouse.ReportRate", "value": 125}}</msg>
<msg timestamp="20220314 17:03:51.471" level="INFO">${response} =  {"msgId": "aa69fbb0-3a1a-4228-ab48-564991b73264", "verb": "GET", "path": "/mouse/dev00000000/report_rate", "origin": "backend", "result": {"code": "SUCCESS", "what": ""}, "payload": {"@type": "type.g...</msg>
<status status="PASS" starttime="20220314 17:03:50.470" endtime="20220314 17:03:51.472"/>
</kw>
<kw name="Convert String to JSON" library="JSONLibrary">
<var>${response}</var>
<arg>${response}</arg>
<doc>Convert String to JSON object</doc>
<msg timestamp="20220314 17:03:51.473" level="INFO">${response} = {'msgId': 'aa69fbb0-3a1a-4228-ab48-564991b73264', 'verb': 'GET', 'path': '/mouse/dev00000000/report_rate', 'origin': 'backend', 'result': {'code': 'SUCCESS', 'what': ''}, 'payload': {'@type': 'type.go...</msg>
<status status="PASS" starttime="20220314 17:03:51.473" endtime="20220314 17:03:51.473"/>
</kw>
<kw name="backend.Verify For Success" library="backend">
<arg>${response}</arg>
<doc>Verifies if Json response code is success</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${status}</var>
<arg>${json_response}</arg>
<arg>code</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:03:51.501" level="INFO">${result} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 17:03:51.480" endtime="20220314 17:03:51.501"/>
</kw>
<msg timestamp="20220314 17:03:51.501" level="INFO">${status} = ['SUCCESS']</msg>
<status status="PASS" starttime="20220314 17:03:51.478" endtime="20220314 17:03:51.501"/>
</kw>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${what}</var>
<arg>${json_response}</arg>
<arg>what</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:03:51.525" level="INFO">${result} = ['']</msg>
<status status="PASS" starttime="20220314 17:03:51.503" endtime="20220314 17:03:51.525"/>
</kw>
<msg timestamp="20220314 17:03:51.525" level="INFO">${what} = ['']</msg>
<status status="PASS" starttime="20220314 17:03:51.502" endtime="20220314 17:03:51.525"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Set Global Variable</arg>
<arg>${kw_status}</arg>
<arg>skipped</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220314 17:03:51.526" endtime="20220314 17:03:51.526"/>
</kw>
<kw name="Pass Execution If" library="BuiltIn">
<arg>'${status}[0]'=='NO_SUCH_PATH'</arg>
<arg>Test Skipped - Feature Not Supported</arg>
<arg>SKIPPED</arg>
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<status status="PASS" starttime="20220314 17:03:51.526" endtime="20220314 17:03:51.526"/>
</kw>
<kw name="List Should Contain Value" library="Collections">
<arg>${status}</arg>
<arg>SUCCESS</arg>
<arg>msg='API Call Failed, Response received: ${status}, ${what}'</arg>
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<status status="PASS" starttime="20220314 17:03:51.526" endtime="20220314 17:03:51.527"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>****************************</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:03:51.527" endtime="20220314 17:03:51.527"/>
</kw>
<status status="PASS" starttime="20220314 17:03:51.475" endtime="20220314 17:03:51.527"/>
</kw>
<kw name="common.Get Value From Json Response" library="common_keywords_kragle">
<var>${backend_report_rate}</var>
<arg>${response}</arg>
<arg>value</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="common.Get Values From Json Response" library="common_keywords_kragle">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Use Json library method to get a specific value of a json object</doc>
<kw name="Get Value From Json" library="JSONLibrary">
<var>${result}</var>
<arg>${response}</arg>
<arg>$..${json_node}</arg>
<doc>Get Value From JSON using JSONPath</doc>
<msg timestamp="20220314 17:03:51.543" level="INFO">${result} = [125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125]</msg>
<status status="PASS" starttime="20220314 17:03:51.529" endtime="20220314 17:03:51.543"/>
</kw>
<msg timestamp="20220314 17:03:51.544" level="INFO">${result} = [125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125]</msg>
<status status="PASS" starttime="20220314 17:03:51.528" endtime="20220314 17:03:51.544"/>
</kw>
<msg timestamp="20220314 17:03:51.544" level="INFO">${backend_report_rate} = 125</msg>
<status status="PASS" starttime="20220314 17:03:51.528" endtime="20220314 17:03:51.544"/>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<arg>${expected_report_rate}</arg>
<arg>${backend_report_rate}</arg>
<arg>The expected repo rate (${expected_report_rate}) and the actual value from backend repo rate (${backend_report_rate}) does not match</arg>
<doc>Fails if objects are unequal after converting them to strings.</doc>
<msg timestamp="20220314 17:03:51.545" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<status status="PASS" starttime="20220314 17:03:51.544" endtime="20220314 17:03:51.545"/>
</kw>
<status status="PASS" starttime="20220314 17:03:48.643" endtime="20220314 17:03:51.545"/>
</kw>
<status status="PASS" starttime="20220314 17:03:48.642" endtime="20220314 17:03:51.545"/>
</kw>
<kw name="End Test" library="logging" type="TEARDOWN">
<arg>${KEYWORD STATUS}</arg>
<doc>Ensure to Call this keyword at Teardown of all High Level Test Keywords
If Test Fails - This will capture logs and screenshots and append links to report</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>${\n}Test Status: ${test_status}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220314 17:03:51.546" endtime="20220314 17:03:51.546"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>'${test_status}'=='FAIL'</arg>
<arg>Get Log Files And Upload To FTPDrive</arg>
<arg>end_test</arg>
<arg>ELSE</arg>
<arg>Return From Keyword</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<msg timestamp="20220314 17:03:51.547" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20220314 17:03:51.547" endtime="20220314 17:03:51.547"/>
</kw>
<status status="PASS" starttime="20220314 17:03:51.546" endtime="20220314 17:03:51.547"/>
</kw>
<status status="PASS" starttime="20220314 17:03:51.545" endtime="20220314 17:03:51.547"/>
</kw>
<status status="PASS" starttime="20220314 17:01:47.990" endtime="20220314 17:03:51.547"/>
</kw>
<status status="PASS" starttime="20220314 17:01:47.988" endtime="20220314 17:03:51.547"/>
</kw>
<tag>Device: G903 LIGHTSPEED (Windows, Wired)</tag>
<tag>Device Type: MOUSE</tag>
<tag>Feature: dpi</tag>
<tag>OS: Windows-10-10.0.22000-SP0</tag>
<status status="PASS" starttime="20220314 17:01:47.974" endtime="20220314 17:03:51.547"/>
</test>
<kw name="Run Keywords" library="BuiltIn" type="TEARDOWN">
<arg>Disconnect All Devices Connected With Acroname</arg>
<arg>AND</arg>
<arg>Close iTriggerBox</arg>
<arg>AND</arg>
<arg>Terminate All</arg>
<arg>skip_rack=True</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Disconnect All Devices Connected With Acroname" library="libraries.acroname_hub.device.Device">
<msg timestamp="20220314 17:03:59.592" level="INFO">3856831629
3856831629
3856831629
3856831629
3856831629
3856831629
3856831629
3856831629</msg>
<status status="PASS" starttime="20220314 17:03:51.548" endtime="20220314 17:03:59.592"/>
</kw>
<kw name="Close ITriggerBox" library="tools.python.mindstorm.itriggerbox.keywords.device.Device">
<msg timestamp="20220314 17:03:59.594" level="INFO">No Connection Found with iTriggerBox. Skipping the step!</msg>
<status status="PASS" starttime="20220314 17:03:59.594" endtime="20220314 17:03:59.594"/>
</kw>
<kw name="Terminate All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to terminate all associated processes (including support applications such as VirtualHere).</doc>
<status status="PASS" starttime="20220314 17:03:59.595" endtime="20220314 17:04:05.859"/>
</kw>
<status status="PASS" starttime="20220314 17:03:51.548" endtime="20220314 17:04:05.860"/>
</kw>
<doc>Build Under Test: staging_2022.3.239682_Windows</doc>
<status status="FAIL" starttime="20220314 16:46:46.331" endtime="20220314 17:04:05.860"/>
</suite>
<statistics>
<total>
<stat pass="6" fail="1" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="3" fail="1" skip="0">Device: G903 LIGHTSPEED (Windows, Wired)</stat>
<stat pass="3" fail="1" skip="0">Device Type: MOUSE</stat>
<stat pass="3" fail="1" skip="0">Feature: dpi</stat>
<stat pass="3" fail="1" skip="0">OS: Windows-10-10.0.22000-SP0</stat>
<stat pass="1" fail="0" skip="0">Pre-setup: application_specific</stat>
<stat pass="1" fail="0" skip="0">Pre-setup: device_specific</stat>
<stat pass="1" fail="0" skip="0">Pre-setup: test_setup</stat>
<stat pass="0" fail="1" skip="0">SKIPPED</stat>
</tag>
<suite>
<stat pass="6" fail="1" skip="0" id="s1" name="Kragle Regression">Kragle Regression</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20220314 16:55:18.765" level="ERROR" html="true">Resolving variable '${device['device_specific_features']['device_settings']['On Board Memory Mode']}' failed: TypeError: list indices must be integers or slices, not str
Failure Log: DUT: G903 LIGHTSPEED, Test_Name: Test: DPI With Onboard Profile For Mouse: G903 LIGHTSPEED (Windows, Wired), KW: Expect Element</msg>
</errors>
</robot>
