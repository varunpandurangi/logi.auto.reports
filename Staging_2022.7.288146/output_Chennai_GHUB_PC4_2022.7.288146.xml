<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.1.2 (Python 3.9.7 on win32)" generated="20220719 12:20:00.048" rpa="false" schemaversion="2">
<suite id="s1" name="Kragle Regression" source="C:\Jenkins\workspace\sion_features_navigation_screens\test_cases\01_kragle\kragle_regression.robot">
<kw name="Run Keywords" library="BuiltIn" type="SETUP">
<arg>Set Library Search Order</arg>
<arg>libraries.utilities.system_volume.system_audio</arg>
<arg>libraries.utilities.common</arg>
<arg>libraries.acroname_hub.device.Device</arg>
<arg>libraries.process</arg>
<arg>libraries.device</arg>
<arg>libraries.input.keyboard</arg>
<arg>libraries.process.Application</arg>
<arg>AND</arg>
<arg>common.Restart GHUB</arg>
<arg>AND</arg>
<arg>Disconnect All Devices Connected With Acroname</arg>
<arg>AND</arg>
<arg>Initialize Suite</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Set Library Search Order" library="BuiltIn">
<arg>libraries.utilities.system_volume.system_audio</arg>
<arg>libraries.utilities.common</arg>
<arg>libraries.acroname_hub.device.Device</arg>
<arg>libraries.process</arg>
<arg>libraries.device</arg>
<arg>libraries.input.keyboard</arg>
<arg>libraries.process.Application</arg>
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<status status="PASS" starttime="20220719 12:20:09.718" endtime="20220719 12:20:09.718"/>
</kw>
<kw name="common.Restart GHUB" library="common_keywords_kragle">
<kw name="Log To Console" library="BuiltIn">
<arg>Restarting GHUB...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220719 12:20:09.719" endtime="20220719 12:20:09.719"/>
</kw>
<kw name="Control Lghub" library="libraries.process.Application">
<status status="PASS" starttime="20220719 12:20:09.719" endtime="20220719 12:20:09.719"/>
</kw>
<kw name="Terminate All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to terminate all associated processes (including support applications such as VirtualHere).</doc>
<status status="PASS" starttime="20220719 12:20:09.720" endtime="20220719 12:20:13.788"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 12:20:23.791" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20220719 12:20:13.790" endtime="20220719 12:20:23.791"/>
</kw>
<kw name="Launch All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to launch all associated processes (including support applications). Already running process are
not re-launched.</doc>
<status status="PASS" starttime="20220719 12:20:23.793" endtime="20220719 12:20:36.569"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 12:20:41.571" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220719 12:20:36.569" endtime="20220719 12:20:41.571"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="PASS" starttime="20220719 12:20:41.572" endtime="20220719 12:20:46.711"/>
</kw>
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:20:51.729" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:20:46.713" endtime="20220719 12:20:51.730"/>
</kw>
<status status="FAIL" starttime="20220719 12:20:46.712" endtime="20220719 12:20:51.732"/>
</kw>
<msg timestamp="20220719 12:20:51.732" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220719 12:20:46.712" endtime="20220719 12:20:51.732"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220719 12:20:51.732" endtime="20220719 12:20:51.733"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:20:51.733" endtime="20220719 12:20:51.733"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:20:51.733" endtime="20220719 12:20:51.733"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:20:51.733" endtime="20220719 12:20:51.733"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:20:51.734" endtime="20220719 12:20:51.734"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220719 12:20:51.734" endtime="20220719 12:20:51.734"/>
</kw>
<status status="NOT RUN" starttime="20220719 12:20:51.732" endtime="20220719 12:20:51.734"/>
</branch>
<status status="PASS" starttime="20220719 12:20:51.732" endtime="20220719 12:20:51.734"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:20:51.735" level="INFO">${words} = ["//div[@class='GhubHome']"]</msg>
<status status="PASS" starttime="20220719 12:20:51.735" endtime="20220719 12:20:51.735"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:20:51.736" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:20:51.736" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:20:51.736" endtime="20220719 12:20:51.736"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:21:01.783" level="FAIL">Failure: Selector "//div[@class='GhubHome']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:20:51.736" endtime="20220719 12:21:01.783"/>
</kw>
<status status="FAIL" starttime="20220719 12:20:51.736" endtime="20220719 12:21:01.783"/>
</kw>
<status status="FAIL" starttime="20220719 12:20:51.735" endtime="20220719 12:21:01.784"/>
</kw>
<msg timestamp="20220719 12:21:01.784" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220719 12:20:51.734" endtime="20220719 12:21:01.784"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:21:01.784" endtime="20220719 12:21:01.785"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded_nodevice}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:21:01.786" level="INFO">${words} = ["//div[@class='GhubHome NoDevice']"]</msg>
<status status="PASS" starttime="20220719 12:21:01.786" endtime="20220719 12:21:01.786"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:21:01.787" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:21:01.787" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:21:01.786" endtime="20220719 12:21:01.787"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:21:11.857" level="FAIL">Failure: Selector "//div[@class='GhubHome NoDevice']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:21:01.788" endtime="20220719 12:21:11.857"/>
</kw>
<status status="FAIL" starttime="20220719 12:21:01.787" endtime="20220719 12:21:11.858"/>
</kw>
<status status="FAIL" starttime="20220719 12:21:01.785" endtime="20220719 12:21:11.860"/>
</kw>
<msg timestamp="20220719 12:21:11.860" level="INFO">${home_screen_loaded_nodevice} = False</msg>
<status status="PASS" starttime="20220719 12:21:01.785" endtime="20220719 12:21:11.860"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded_nodevice} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:21:11.861" endtime="20220719 12:21:11.861"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:21:16.925" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220719 12:21:16.927" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:21:11.862" endtime="20220719 12:21:16.928"/>
</kw>
<msg timestamp="20220719 12:21:16.928" level="INFO">${back_button_present} = False</msg>
<status status="PASS" starttime="20220719 12:21:11.861" endtime="20220719 12:21:16.929"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:21:16.930" endtime="20220719 12:21:16.931"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${first_time_setup}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:21:21.937" level="FAIL">Failure: Selector "//strong[text()='Logitech G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:21:16.932" endtime="20220719 12:21:21.937"/>
</kw>
<status status="FAIL" starttime="20220719 12:21:16.931" endtime="20220719 12:21:21.938"/>
</kw>
<msg timestamp="20220719 12:21:21.938" level="INFO">${first_time_setup} = False</msg>
<status status="PASS" starttime="20220719 12:21:16.931" endtime="20220719 12:21:21.938"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${onboarding_screen}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:21:21.941" level="INFO">${words} = ['#logging-opt-in.dot']</msg>
<status status="PASS" starttime="20220719 12:21:21.940" endtime="20220719 12:21:21.941"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:21:21.941" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:21:21.941" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:21:21.941" endtime="20220719 12:21:21.942"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:21:26.951" level="INFO">Failed to find element with selector: #logging-opt-in.dot and attributes:{}</msg>
<msg timestamp="20220719 12:21:26.951" level="FAIL">Failure: Selector "#logging-opt-in.dot" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:21:21.942" endtime="20220719 12:21:26.951"/>
</kw>
<status status="FAIL" starttime="20220719 12:21:21.942" endtime="20220719 12:21:26.952"/>
</kw>
<status status="FAIL" starttime="20220719 12:21:21.939" endtime="20220719 12:21:26.952"/>
</kw>
<msg timestamp="20220719 12:21:26.953" level="INFO">${onboarding_screen} = False</msg>
<status status="PASS" starttime="20220719 12:21:21.939" endtime="20220719 12:21:26.953"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${first_time_setup} is ${True} or ${onboarding_screen} is ${True}</arg>
<arg>ghub_onboarding.First Time Setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:21:26.953" endtime="20220719 12:21:26.953"/>
</kw>
<status status="PASS" starttime="20220719 12:20:46.712" endtime="20220719 12:21:26.954"/>
</iter>
<iter>
<var name="${INDEX}">1</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:21:31.994" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:21:26.955" endtime="20220719 12:21:31.994"/>
</kw>
<status status="FAIL" starttime="20220719 12:21:26.955" endtime="20220719 12:21:31.996"/>
</kw>
<msg timestamp="20220719 12:21:31.996" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220719 12:21:26.954" endtime="20220719 12:21:31.996"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220719 12:21:31.997" endtime="20220719 12:21:31.997"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:21:31.997" endtime="20220719 12:21:31.997"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:21:31.997" endtime="20220719 12:21:31.997"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:21:31.998" endtime="20220719 12:21:31.998"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:21:31.998" endtime="20220719 12:21:31.998"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220719 12:21:31.998" endtime="20220719 12:21:31.998"/>
</kw>
<status status="NOT RUN" starttime="20220719 12:21:31.997" endtime="20220719 12:21:31.998"/>
</branch>
<status status="PASS" starttime="20220719 12:21:31.996" endtime="20220719 12:21:31.998"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:21:32.000" level="INFO">${words} = ["//div[@class='GhubHome']"]</msg>
<status status="PASS" starttime="20220719 12:21:31.999" endtime="20220719 12:21:32.000"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:21:32.000" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:21:32.000" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:21:32.000" endtime="20220719 12:21:32.000"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:21:42.058" level="FAIL">Failure: Selector "//div[@class='GhubHome']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:21:32.001" endtime="20220719 12:21:42.059"/>
</kw>
<status status="FAIL" starttime="20220719 12:21:32.000" endtime="20220719 12:21:42.060"/>
</kw>
<status status="FAIL" starttime="20220719 12:21:31.999" endtime="20220719 12:21:42.062"/>
</kw>
<msg timestamp="20220719 12:21:42.062" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220719 12:21:31.999" endtime="20220719 12:21:42.062"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:21:42.062" endtime="20220719 12:21:42.062"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded_nodevice}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:21:42.064" level="INFO">${words} = ["//div[@class='GhubHome NoDevice']"]</msg>
<status status="PASS" starttime="20220719 12:21:42.064" endtime="20220719 12:21:42.064"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:21:42.064" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:21:42.064" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:21:42.064" endtime="20220719 12:21:42.064"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:21:52.123" level="FAIL">Failure: Selector "//div[@class='GhubHome NoDevice']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:21:42.065" endtime="20220719 12:21:52.124"/>
</kw>
<status status="FAIL" starttime="20220719 12:21:42.065" endtime="20220719 12:21:52.125"/>
</kw>
<status status="FAIL" starttime="20220719 12:21:42.063" endtime="20220719 12:21:52.126"/>
</kw>
<msg timestamp="20220719 12:21:52.126" level="INFO">${home_screen_loaded_nodevice} = False</msg>
<status status="PASS" starttime="20220719 12:21:42.063" endtime="20220719 12:21:52.127"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded_nodevice} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:21:52.127" endtime="20220719 12:21:52.127"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:21:57.190" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220719 12:21:57.192" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:21:52.128" endtime="20220719 12:21:57.192"/>
</kw>
<msg timestamp="20220719 12:21:57.193" level="INFO">${back_button_present} = False</msg>
<status status="PASS" starttime="20220719 12:21:52.128" endtime="20220719 12:21:57.193"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:21:57.195" endtime="20220719 12:21:57.195"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${first_time_setup}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:22:02.260" level="FAIL">Failure: Selector "//strong[text()='Logitech G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:21:57.196" endtime="20220719 12:22:02.261"/>
</kw>
<status status="FAIL" starttime="20220719 12:21:57.196" endtime="20220719 12:22:02.263"/>
</kw>
<msg timestamp="20220719 12:22:02.263" level="INFO">${first_time_setup} = False</msg>
<status status="PASS" starttime="20220719 12:21:57.195" endtime="20220719 12:22:02.263"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${onboarding_screen}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:22:02.264" level="INFO">${words} = ['#logging-opt-in.dot']</msg>
<status status="PASS" starttime="20220719 12:22:02.264" endtime="20220719 12:22:02.264"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:22:02.265" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:22:02.265" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:22:02.265" endtime="20220719 12:22:02.265"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:22:07.332" level="INFO">Failed to find element with selector: #logging-opt-in.dot and attributes:{}</msg>
<msg timestamp="20220719 12:22:07.334" level="FAIL">Failure: Selector "#logging-opt-in.dot" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:22:02.265" endtime="20220719 12:22:07.334"/>
</kw>
<status status="FAIL" starttime="20220719 12:22:02.265" endtime="20220719 12:22:07.336"/>
</kw>
<status status="FAIL" starttime="20220719 12:22:02.264" endtime="20220719 12:22:07.337"/>
</kw>
<msg timestamp="20220719 12:22:07.337" level="INFO">${onboarding_screen} = False</msg>
<status status="PASS" starttime="20220719 12:22:02.263" endtime="20220719 12:22:07.337"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${first_time_setup} is ${True} or ${onboarding_screen} is ${True}</arg>
<arg>ghub_onboarding.First Time Setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:22:07.338" endtime="20220719 12:22:07.338"/>
</kw>
<status status="PASS" starttime="20220719 12:21:26.954" endtime="20220719 12:22:07.338"/>
</iter>
<iter>
<var name="${INDEX}">2</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:22:12.407" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:22:07.340" endtime="20220719 12:22:12.407"/>
</kw>
<status status="FAIL" starttime="20220719 12:22:07.339" endtime="20220719 12:22:12.410"/>
</kw>
<msg timestamp="20220719 12:22:12.410" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220719 12:22:07.339" endtime="20220719 12:22:12.410"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220719 12:22:12.410" endtime="20220719 12:22:12.410"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:22:12.410" endtime="20220719 12:22:12.410"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:22:12.410" endtime="20220719 12:22:12.410"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:22:12.410" endtime="20220719 12:22:12.410"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:22:12.410" endtime="20220719 12:22:12.411"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220719 12:22:12.411" endtime="20220719 12:22:12.411"/>
</kw>
<status status="NOT RUN" starttime="20220719 12:22:12.410" endtime="20220719 12:22:12.411"/>
</branch>
<status status="PASS" starttime="20220719 12:22:12.410" endtime="20220719 12:22:12.411"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:22:12.412" level="INFO">${words} = ["//div[@class='GhubHome']"]</msg>
<status status="PASS" starttime="20220719 12:22:12.412" endtime="20220719 12:22:12.412"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:22:12.413" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:22:12.413" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:22:12.412" endtime="20220719 12:22:12.413"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:22:22.483" level="FAIL">Failure: Selector "//div[@class='GhubHome']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:22:12.413" endtime="20220719 12:22:22.483"/>
</kw>
<status status="FAIL" starttime="20220719 12:22:12.413" endtime="20220719 12:22:22.484"/>
</kw>
<status status="FAIL" starttime="20220719 12:22:12.411" endtime="20220719 12:22:22.486"/>
</kw>
<msg timestamp="20220719 12:22:22.486" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220719 12:22:12.411" endtime="20220719 12:22:22.486"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:22:22.486" endtime="20220719 12:22:22.487"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded_nodevice}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:22:22.488" level="INFO">${words} = ["//div[@class='GhubHome NoDevice']"]</msg>
<status status="PASS" starttime="20220719 12:22:22.488" endtime="20220719 12:22:22.488"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:22:22.488" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:22:22.488" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:22:22.488" endtime="20220719 12:22:22.488"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:22:32.535" level="FAIL">Failure: Selector "//div[@class='GhubHome NoDevice']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:22:22.489" endtime="20220719 12:22:32.535"/>
</kw>
<status status="FAIL" starttime="20220719 12:22:22.489" endtime="20220719 12:22:32.536"/>
</kw>
<status status="FAIL" starttime="20220719 12:22:22.487" endtime="20220719 12:22:32.537"/>
</kw>
<msg timestamp="20220719 12:22:32.537" level="INFO">${home_screen_loaded_nodevice} = False</msg>
<status status="PASS" starttime="20220719 12:22:22.487" endtime="20220719 12:22:32.537"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded_nodevice} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:22:32.537" endtime="20220719 12:22:32.538"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:22:37.601" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220719 12:22:37.603" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:22:32.539" endtime="20220719 12:22:37.604"/>
</kw>
<msg timestamp="20220719 12:22:37.604" level="INFO">${back_button_present} = False</msg>
<status status="PASS" starttime="20220719 12:22:32.538" endtime="20220719 12:22:37.605"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:22:37.607" endtime="20220719 12:22:37.608"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${first_time_setup}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:22:42.677" level="FAIL">Failure: Selector "//strong[text()='Logitech G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:22:37.612" endtime="20220719 12:22:42.677"/>
</kw>
<status status="FAIL" starttime="20220719 12:22:37.612" endtime="20220719 12:22:42.680"/>
</kw>
<msg timestamp="20220719 12:22:42.680" level="INFO">${first_time_setup} = False</msg>
<status status="PASS" starttime="20220719 12:22:37.610" endtime="20220719 12:22:42.680"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${onboarding_screen}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:22:42.681" level="INFO">${words} = ['#logging-opt-in.dot']</msg>
<status status="PASS" starttime="20220719 12:22:42.681" endtime="20220719 12:22:42.681"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:22:42.682" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:22:42.682" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:22:42.682" endtime="20220719 12:22:42.682"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:22:47.692" level="INFO">Failed to find element with selector: #logging-opt-in.dot and attributes:{}</msg>
<msg timestamp="20220719 12:22:47.694" level="FAIL">Failure: Selector "#logging-opt-in.dot" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:22:42.683" endtime="20220719 12:22:47.694"/>
</kw>
<status status="FAIL" starttime="20220719 12:22:42.682" endtime="20220719 12:22:47.696"/>
</kw>
<status status="FAIL" starttime="20220719 12:22:42.681" endtime="20220719 12:22:47.697"/>
</kw>
<msg timestamp="20220719 12:22:47.697" level="INFO">${onboarding_screen} = False</msg>
<status status="PASS" starttime="20220719 12:22:42.680" endtime="20220719 12:22:47.697"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${first_time_setup} is ${True} or ${onboarding_screen} is ${True}</arg>
<arg>ghub_onboarding.First Time Setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:22:47.698" endtime="20220719 12:22:47.698"/>
</kw>
<status status="PASS" starttime="20220719 12:22:07.338" endtime="20220719 12:22:47.698"/>
</iter>
<iter>
<var name="${INDEX}">3</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:22:52.732" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:22:47.699" endtime="20220719 12:22:52.732"/>
</kw>
<status status="FAIL" starttime="20220719 12:22:47.699" endtime="20220719 12:22:52.736"/>
</kw>
<msg timestamp="20220719 12:22:52.736" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220719 12:22:47.698" endtime="20220719 12:22:52.736"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220719 12:22:52.736" endtime="20220719 12:22:52.736"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:22:52.736" endtime="20220719 12:22:52.736"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:22:52.736" endtime="20220719 12:22:52.736"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:22:52.736" endtime="20220719 12:22:52.736"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:22:52.737" endtime="20220719 12:22:52.737"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220719 12:22:52.737" endtime="20220719 12:22:52.737"/>
</kw>
<status status="NOT RUN" starttime="20220719 12:22:52.736" endtime="20220719 12:22:52.737"/>
</branch>
<status status="PASS" starttime="20220719 12:22:52.736" endtime="20220719 12:22:52.737"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:22:52.738" level="INFO">${words} = ["//div[@class='GhubHome']"]</msg>
<status status="PASS" starttime="20220719 12:22:52.738" endtime="20220719 12:22:52.738"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:22:52.739" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:22:52.739" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:22:52.738" endtime="20220719 12:22:52.739"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:23:02.747" level="FAIL">Failure: Selector "//div[@class='GhubHome']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:22:52.739" endtime="20220719 12:23:02.747"/>
</kw>
<status status="FAIL" starttime="20220719 12:22:52.739" endtime="20220719 12:23:02.748"/>
</kw>
<status status="FAIL" starttime="20220719 12:22:52.738" endtime="20220719 12:23:02.750"/>
</kw>
<msg timestamp="20220719 12:23:02.750" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220719 12:22:52.737" endtime="20220719 12:23:02.750"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:23:02.750" endtime="20220719 12:23:02.750"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded_nodevice}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:23:02.752" level="INFO">${words} = ["//div[@class='GhubHome NoDevice']"]</msg>
<status status="PASS" starttime="20220719 12:23:02.752" endtime="20220719 12:23:02.752"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:23:02.752" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:23:02.752" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:23:02.752" endtime="20220719 12:23:02.752"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:23:12.762" level="FAIL">Failure: Selector "//div[@class='GhubHome NoDevice']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:23:02.753" endtime="20220719 12:23:12.762"/>
</kw>
<status status="FAIL" starttime="20220719 12:23:02.753" endtime="20220719 12:23:12.763"/>
</kw>
<status status="FAIL" starttime="20220719 12:23:02.751" endtime="20220719 12:23:12.764"/>
</kw>
<msg timestamp="20220719 12:23:12.765" level="INFO">${home_screen_loaded_nodevice} = False</msg>
<status status="PASS" starttime="20220719 12:23:02.751" endtime="20220719 12:23:12.765"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded_nodevice} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:23:12.765" endtime="20220719 12:23:12.765"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:23:17.832" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220719 12:23:17.833" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:23:12.766" endtime="20220719 12:23:17.833"/>
</kw>
<msg timestamp="20220719 12:23:17.833" level="INFO">${back_button_present} = False</msg>
<status status="PASS" starttime="20220719 12:23:12.766" endtime="20220719 12:23:17.833"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:23:17.834" endtime="20220719 12:23:17.835"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${first_time_setup}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:23:22.861" level="FAIL">Failure: Selector "//strong[text()='Logitech G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:23:17.837" endtime="20220719 12:23:22.861"/>
</kw>
<status status="FAIL" starttime="20220719 12:23:17.837" endtime="20220719 12:23:22.863"/>
</kw>
<msg timestamp="20220719 12:23:22.863" level="INFO">${first_time_setup} = False</msg>
<status status="PASS" starttime="20220719 12:23:17.836" endtime="20220719 12:23:22.863"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${onboarding_screen}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:23:22.865" level="INFO">${words} = ['#logging-opt-in.dot']</msg>
<status status="PASS" starttime="20220719 12:23:22.864" endtime="20220719 12:23:22.865"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:23:22.865" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:23:22.865" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:23:22.865" endtime="20220719 12:23:22.865"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:23:27.875" level="INFO">Failed to find element with selector: #logging-opt-in.dot and attributes:{}</msg>
<msg timestamp="20220719 12:23:27.878" level="FAIL">Failure: Selector "#logging-opt-in.dot" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:23:22.866" endtime="20220719 12:23:27.878"/>
</kw>
<status status="FAIL" starttime="20220719 12:23:22.865" endtime="20220719 12:23:27.879"/>
</kw>
<status status="FAIL" starttime="20220719 12:23:22.864" endtime="20220719 12:23:27.880"/>
</kw>
<msg timestamp="20220719 12:23:27.880" level="INFO">${onboarding_screen} = False</msg>
<status status="PASS" starttime="20220719 12:23:22.864" endtime="20220719 12:23:27.880"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${first_time_setup} is ${True} or ${onboarding_screen} is ${True}</arg>
<arg>ghub_onboarding.First Time Setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:23:27.880" endtime="20220719 12:23:27.880"/>
</kw>
<status status="PASS" starttime="20220719 12:22:47.698" endtime="20220719 12:23:27.880"/>
</iter>
<iter>
<var name="${INDEX}">4</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:23:32.945" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:23:27.881" endtime="20220719 12:23:32.945"/>
</kw>
<status status="FAIL" starttime="20220719 12:23:27.881" endtime="20220719 12:23:32.946"/>
</kw>
<msg timestamp="20220719 12:23:32.946" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220719 12:23:27.880" endtime="20220719 12:23:32.946"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220719 12:23:32.947" endtime="20220719 12:23:32.947"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:23:32.947" endtime="20220719 12:23:32.947"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:23:32.947" endtime="20220719 12:23:32.947"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:23:32.948" endtime="20220719 12:23:32.948"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:23:32.948" endtime="20220719 12:23:32.948"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220719 12:23:32.948" endtime="20220719 12:23:32.948"/>
</kw>
<status status="NOT RUN" starttime="20220719 12:23:32.946" endtime="20220719 12:23:32.948"/>
</branch>
<status status="PASS" starttime="20220719 12:23:32.946" endtime="20220719 12:23:32.948"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:23:32.950" level="INFO">${words} = ["//div[@class='GhubHome']"]</msg>
<status status="PASS" starttime="20220719 12:23:32.950" endtime="20220719 12:23:32.950"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:23:32.951" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:23:32.951" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:23:32.950" endtime="20220719 12:23:32.951"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:23:42.954" level="FAIL">Failure: Selector "//div[@class='GhubHome']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:23:32.951" endtime="20220719 12:23:42.954"/>
</kw>
<status status="FAIL" starttime="20220719 12:23:32.951" endtime="20220719 12:23:42.955"/>
</kw>
<status status="FAIL" starttime="20220719 12:23:32.949" endtime="20220719 12:23:42.955"/>
</kw>
<msg timestamp="20220719 12:23:42.955" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220719 12:23:32.949" endtime="20220719 12:23:42.955"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:23:42.956" endtime="20220719 12:23:42.956"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded_nodevice}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:23:42.958" level="INFO">${words} = ["//div[@class='GhubHome NoDevice']"]</msg>
<status status="PASS" starttime="20220719 12:23:42.957" endtime="20220719 12:23:42.958"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:23:42.958" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:23:42.958" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:23:42.958" endtime="20220719 12:23:42.958"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:23:53.007" level="FAIL">Failure: Selector "//div[@class='GhubHome NoDevice']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:23:42.959" endtime="20220719 12:23:53.007"/>
</kw>
<status status="FAIL" starttime="20220719 12:23:42.958" endtime="20220719 12:23:53.008"/>
</kw>
<status status="FAIL" starttime="20220719 12:23:42.957" endtime="20220719 12:23:53.009"/>
</kw>
<msg timestamp="20220719 12:23:53.009" level="INFO">${home_screen_loaded_nodevice} = False</msg>
<status status="PASS" starttime="20220719 12:23:42.957" endtime="20220719 12:23:53.009"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded_nodevice} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:23:53.010" endtime="20220719 12:23:53.010"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:23:58.070" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220719 12:23:58.072" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:23:53.011" endtime="20220719 12:23:58.072"/>
</kw>
<msg timestamp="20220719 12:23:58.073" level="INFO">${back_button_present} = False</msg>
<status status="PASS" starttime="20220719 12:23:53.010" endtime="20220719 12:23:58.073"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:23:58.074" endtime="20220719 12:23:58.074"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${first_time_setup}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:24:03.082" level="FAIL">Failure: Selector "//strong[text()='Logitech G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:23:58.075" endtime="20220719 12:24:03.083"/>
</kw>
<status status="FAIL" starttime="20220719 12:23:58.075" endtime="20220719 12:24:03.085"/>
</kw>
<msg timestamp="20220719 12:24:03.085" level="INFO">${first_time_setup} = False</msg>
<status status="PASS" starttime="20220719 12:23:58.075" endtime="20220719 12:24:03.085"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${onboarding_screen}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:24:03.087" level="INFO">${words} = ['#logging-opt-in.dot']</msg>
<status status="PASS" starttime="20220719 12:24:03.087" endtime="20220719 12:24:03.087"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:24:03.088" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:24:03.088" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:24:03.088" endtime="20220719 12:24:03.088"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:24:08.152" level="INFO">Failed to find element with selector: #logging-opt-in.dot and attributes:{}</msg>
<msg timestamp="20220719 12:24:08.154" level="FAIL">Failure: Selector "#logging-opt-in.dot" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:24:03.089" endtime="20220719 12:24:08.154"/>
</kw>
<status status="FAIL" starttime="20220719 12:24:03.088" endtime="20220719 12:24:08.156"/>
</kw>
<status status="FAIL" starttime="20220719 12:24:03.087" endtime="20220719 12:24:08.156"/>
</kw>
<msg timestamp="20220719 12:24:08.157" level="INFO">${onboarding_screen} = False</msg>
<status status="PASS" starttime="20220719 12:24:03.086" endtime="20220719 12:24:08.157"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${first_time_setup} is ${True} or ${onboarding_screen} is ${True}</arg>
<arg>ghub_onboarding.First Time Setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:24:08.157" endtime="20220719 12:24:08.157"/>
</kw>
<status status="PASS" starttime="20220719 12:23:27.880" endtime="20220719 12:24:08.157"/>
</iter>
<iter>
<var name="${INDEX}">5</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:24:13.221" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:24:08.159" endtime="20220719 12:24:13.221"/>
</kw>
<status status="FAIL" starttime="20220719 12:24:08.158" endtime="20220719 12:24:13.222"/>
</kw>
<msg timestamp="20220719 12:24:13.222" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220719 12:24:08.158" endtime="20220719 12:24:13.222"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220719 12:24:13.223" endtime="20220719 12:24:13.223"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:24:13.223" endtime="20220719 12:24:13.223"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:24:13.224" endtime="20220719 12:24:13.224"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:24:13.224" endtime="20220719 12:24:13.225"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:24:13.225" endtime="20220719 12:24:13.225"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220719 12:24:13.225" endtime="20220719 12:24:13.225"/>
</kw>
<status status="NOT RUN" starttime="20220719 12:24:13.223" endtime="20220719 12:24:13.225"/>
</branch>
<status status="PASS" starttime="20220719 12:24:13.222" endtime="20220719 12:24:13.225"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:24:13.227" level="INFO">${words} = ["//div[@class='GhubHome']"]</msg>
<status status="PASS" starttime="20220719 12:24:13.226" endtime="20220719 12:24:13.227"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:24:13.227" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:24:13.227" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:24:13.227" endtime="20220719 12:24:13.227"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:24:23.252" level="FAIL">Failure: Selector "//div[@class='GhubHome']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:24:13.228" endtime="20220719 12:24:23.252"/>
</kw>
<status status="FAIL" starttime="20220719 12:24:13.227" endtime="20220719 12:24:23.252"/>
</kw>
<status status="FAIL" starttime="20220719 12:24:13.226" endtime="20220719 12:24:23.255"/>
</kw>
<msg timestamp="20220719 12:24:23.255" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220719 12:24:13.226" endtime="20220719 12:24:23.255"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:24:23.255" endtime="20220719 12:24:23.255"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded_nodevice}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:24:23.256" level="INFO">${words} = ["//div[@class='GhubHome NoDevice']"]</msg>
<status status="PASS" starttime="20220719 12:24:23.256" endtime="20220719 12:24:23.256"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:24:23.256" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:24:23.256" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:24:23.256" endtime="20220719 12:24:23.256"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:24:33.282" level="FAIL">Failure: Selector "//div[@class='GhubHome NoDevice']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:24:23.257" endtime="20220719 12:24:33.282"/>
</kw>
<status status="FAIL" starttime="20220719 12:24:23.257" endtime="20220719 12:24:33.284"/>
</kw>
<status status="FAIL" starttime="20220719 12:24:23.255" endtime="20220719 12:24:33.287"/>
</kw>
<msg timestamp="20220719 12:24:33.287" level="INFO">${home_screen_loaded_nodevice} = False</msg>
<status status="PASS" starttime="20220719 12:24:23.255" endtime="20220719 12:24:33.288"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded_nodevice} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:24:33.290" endtime="20220719 12:24:33.291"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:24:38.304" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220719 12:24:38.306" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:24:33.294" endtime="20220719 12:24:38.306"/>
</kw>
<msg timestamp="20220719 12:24:38.307" level="INFO">${back_button_present} = False</msg>
<status status="PASS" starttime="20220719 12:24:33.293" endtime="20220719 12:24:38.307"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:24:38.309" endtime="20220719 12:24:38.309"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${first_time_setup}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:24:43.377" level="FAIL">Failure: Selector "//strong[text()='Logitech G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:24:38.310" endtime="20220719 12:24:43.377"/>
</kw>
<status status="FAIL" starttime="20220719 12:24:38.310" endtime="20220719 12:24:43.379"/>
</kw>
<msg timestamp="20220719 12:24:43.379" level="INFO">${first_time_setup} = False</msg>
<status status="PASS" starttime="20220719 12:24:38.310" endtime="20220719 12:24:43.380"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${onboarding_screen}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:24:43.381" level="INFO">${words} = ['#logging-opt-in.dot']</msg>
<status status="PASS" starttime="20220719 12:24:43.381" endtime="20220719 12:24:43.381"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:24:43.381" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:24:43.382" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:24:43.381" endtime="20220719 12:24:43.382"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:24:48.449" level="INFO">Failed to find element with selector: #logging-opt-in.dot and attributes:{}</msg>
<msg timestamp="20220719 12:24:48.451" level="FAIL">Failure: Selector "#logging-opt-in.dot" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:24:43.382" endtime="20220719 12:24:48.451"/>
</kw>
<status status="FAIL" starttime="20220719 12:24:43.382" endtime="20220719 12:24:48.452"/>
</kw>
<status status="FAIL" starttime="20220719 12:24:43.380" endtime="20220719 12:24:48.453"/>
</kw>
<msg timestamp="20220719 12:24:48.454" level="INFO">${onboarding_screen} = False</msg>
<status status="PASS" starttime="20220719 12:24:43.380" endtime="20220719 12:24:48.454"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${first_time_setup} is ${True} or ${onboarding_screen} is ${True}</arg>
<arg>ghub_onboarding.First Time Setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:24:48.454" endtime="20220719 12:24:48.454"/>
</kw>
<status status="PASS" starttime="20220719 12:24:08.158" endtime="20220719 12:24:48.454"/>
</iter>
<iter>
<var name="${INDEX}">6</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:24:53.460" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:24:48.456" endtime="20220719 12:24:53.460"/>
</kw>
<status status="FAIL" starttime="20220719 12:24:48.455" endtime="20220719 12:24:53.461"/>
</kw>
<msg timestamp="20220719 12:24:53.461" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220719 12:24:48.455" endtime="20220719 12:24:53.461"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220719 12:24:53.461" endtime="20220719 12:24:53.461"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:24:53.462" endtime="20220719 12:24:53.462"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:24:53.462" endtime="20220719 12:24:53.462"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:24:53.462" endtime="20220719 12:24:53.462"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:24:53.462" endtime="20220719 12:24:53.462"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220719 12:24:53.463" endtime="20220719 12:24:53.463"/>
</kw>
<status status="NOT RUN" starttime="20220719 12:24:53.461" endtime="20220719 12:24:53.463"/>
</branch>
<status status="PASS" starttime="20220719 12:24:53.461" endtime="20220719 12:24:53.463"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:24:53.464" level="INFO">${words} = ["//div[@class='GhubHome']"]</msg>
<status status="PASS" starttime="20220719 12:24:53.464" endtime="20220719 12:24:53.464"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:24:53.465" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:24:53.465" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:24:53.464" endtime="20220719 12:24:53.465"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:25:03.473" level="FAIL">Failure: Selector "//div[@class='GhubHome']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:24:53.465" endtime="20220719 12:25:03.473"/>
</kw>
<status status="FAIL" starttime="20220719 12:24:53.465" endtime="20220719 12:25:03.473"/>
</kw>
<status status="FAIL" starttime="20220719 12:24:53.463" endtime="20220719 12:25:03.474"/>
</kw>
<msg timestamp="20220719 12:25:03.474" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220719 12:24:53.463" endtime="20220719 12:25:03.475"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:25:03.475" endtime="20220719 12:25:03.476"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded_nodevice}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:25:03.477" level="INFO">${words} = ["//div[@class='GhubHome NoDevice']"]</msg>
<status status="PASS" starttime="20220719 12:25:03.477" endtime="20220719 12:25:03.477"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:25:03.478" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:25:03.478" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:25:03.478" endtime="20220719 12:25:03.478"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:25:13.504" level="FAIL">Failure: Selector "//div[@class='GhubHome NoDevice']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:25:03.479" endtime="20220719 12:25:13.504"/>
</kw>
<status status="FAIL" starttime="20220719 12:25:03.478" endtime="20220719 12:25:13.505"/>
</kw>
<status status="FAIL" starttime="20220719 12:25:03.477" endtime="20220719 12:25:13.505"/>
</kw>
<msg timestamp="20220719 12:25:13.505" level="INFO">${home_screen_loaded_nodevice} = False</msg>
<status status="PASS" starttime="20220719 12:25:03.476" endtime="20220719 12:25:13.505"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded_nodevice} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:25:13.506" endtime="20220719 12:25:13.506"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:25:18.563" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220719 12:25:18.563" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:25:13.507" endtime="20220719 12:25:18.564"/>
</kw>
<msg timestamp="20220719 12:25:18.564" level="INFO">${back_button_present} = False</msg>
<status status="PASS" starttime="20220719 12:25:13.506" endtime="20220719 12:25:18.564"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:25:18.564" endtime="20220719 12:25:18.565"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${first_time_setup}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:25:23.600" level="FAIL">Failure: Selector "//strong[text()='Logitech G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:25:18.567" endtime="20220719 12:25:23.600"/>
</kw>
<status status="FAIL" starttime="20220719 12:25:18.566" endtime="20220719 12:25:23.603"/>
</kw>
<msg timestamp="20220719 12:25:23.603" level="INFO">${first_time_setup} = False</msg>
<status status="PASS" starttime="20220719 12:25:18.565" endtime="20220719 12:25:23.603"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${onboarding_screen}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:25:23.604" level="INFO">${words} = ['#logging-opt-in.dot']</msg>
<status status="PASS" starttime="20220719 12:25:23.604" endtime="20220719 12:25:23.604"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:25:23.605" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:25:23.605" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:25:23.604" endtime="20220719 12:25:23.605"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:25:28.668" level="INFO">Failed to find element with selector: #logging-opt-in.dot and attributes:{}</msg>
<msg timestamp="20220719 12:25:28.670" level="FAIL">Failure: Selector "#logging-opt-in.dot" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:25:23.605" endtime="20220719 12:25:28.670"/>
</kw>
<status status="FAIL" starttime="20220719 12:25:23.605" endtime="20220719 12:25:28.672"/>
</kw>
<status status="FAIL" starttime="20220719 12:25:23.603" endtime="20220719 12:25:28.672"/>
</kw>
<msg timestamp="20220719 12:25:28.673" level="INFO">${onboarding_screen} = False</msg>
<status status="PASS" starttime="20220719 12:25:23.603" endtime="20220719 12:25:28.673"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${first_time_setup} is ${True} or ${onboarding_screen} is ${True}</arg>
<arg>ghub_onboarding.First Time Setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:25:28.673" endtime="20220719 12:25:28.673"/>
</kw>
<status status="PASS" starttime="20220719 12:24:48.454" endtime="20220719 12:25:28.673"/>
</iter>
<iter>
<var name="${INDEX}">7</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:25:33.682" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:25:28.675" endtime="20220719 12:25:33.682"/>
</kw>
<status status="FAIL" starttime="20220719 12:25:28.674" endtime="20220719 12:25:33.684"/>
</kw>
<msg timestamp="20220719 12:25:33.684" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220719 12:25:28.674" endtime="20220719 12:25:33.684"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220719 12:25:33.685" endtime="20220719 12:25:33.685"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:25:33.685" endtime="20220719 12:25:33.685"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:25:33.685" endtime="20220719 12:25:33.685"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:25:33.686" endtime="20220719 12:25:33.686"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:25:33.686" endtime="20220719 12:25:33.686"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220719 12:25:33.686" endtime="20220719 12:25:33.686"/>
</kw>
<status status="NOT RUN" starttime="20220719 12:25:33.685" endtime="20220719 12:25:33.686"/>
</branch>
<status status="PASS" starttime="20220719 12:25:33.684" endtime="20220719 12:25:33.686"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:25:33.688" level="INFO">${words} = ["//div[@class='GhubHome']"]</msg>
<status status="PASS" starttime="20220719 12:25:33.687" endtime="20220719 12:25:33.688"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:25:33.688" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:25:33.688" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:25:33.688" endtime="20220719 12:25:33.688"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:25:43.748" level="FAIL">Failure: Selector "//div[@class='GhubHome']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:25:33.689" endtime="20220719 12:25:43.748"/>
</kw>
<status status="FAIL" starttime="20220719 12:25:33.688" endtime="20220719 12:25:43.750"/>
</kw>
<status status="FAIL" starttime="20220719 12:25:33.687" endtime="20220719 12:25:43.750"/>
</kw>
<msg timestamp="20220719 12:25:43.750" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220719 12:25:33.687" endtime="20220719 12:25:43.750"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:25:43.750" endtime="20220719 12:25:43.751"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded_nodevice}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:25:43.752" level="INFO">${words} = ["//div[@class='GhubHome NoDevice']"]</msg>
<status status="PASS" starttime="20220719 12:25:43.752" endtime="20220719 12:25:43.752"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:25:43.753" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:25:43.753" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:25:43.753" endtime="20220719 12:25:43.753"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:25:53.763" level="FAIL">Failure: Selector "//div[@class='GhubHome NoDevice']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:25:43.753" endtime="20220719 12:25:53.763"/>
</kw>
<status status="FAIL" starttime="20220719 12:25:43.753" endtime="20220719 12:25:53.765"/>
</kw>
<status status="FAIL" starttime="20220719 12:25:43.752" endtime="20220719 12:25:53.766"/>
</kw>
<msg timestamp="20220719 12:25:53.766" level="INFO">${home_screen_loaded_nodevice} = False</msg>
<status status="PASS" starttime="20220719 12:25:43.751" endtime="20220719 12:25:53.767"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded_nodevice} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:25:53.767" endtime="20220719 12:25:53.767"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:25:58.838" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220719 12:25:58.840" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:25:53.768" endtime="20220719 12:25:58.840"/>
</kw>
<msg timestamp="20220719 12:25:58.841" level="INFO">${back_button_present} = False</msg>
<status status="PASS" starttime="20220719 12:25:53.768" endtime="20220719 12:25:58.841"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:25:58.842" endtime="20220719 12:25:58.843"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${first_time_setup}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:26:03.855" level="FAIL">Failure: Selector "//strong[text()='Logitech G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:25:58.844" endtime="20220719 12:26:03.855"/>
</kw>
<status status="FAIL" starttime="20220719 12:25:58.843" endtime="20220719 12:26:03.857"/>
</kw>
<msg timestamp="20220719 12:26:03.858" level="INFO">${first_time_setup} = False</msg>
<status status="PASS" starttime="20220719 12:25:58.843" endtime="20220719 12:26:03.858"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${onboarding_screen}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:26:03.859" level="INFO">${words} = ['#logging-opt-in.dot']</msg>
<status status="PASS" starttime="20220719 12:26:03.859" endtime="20220719 12:26:03.859"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:26:03.859" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:26:03.859" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:26:03.859" endtime="20220719 12:26:03.859"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:26:08.917" level="INFO">Failed to find element with selector: #logging-opt-in.dot and attributes:{}</msg>
<msg timestamp="20220719 12:26:08.917" level="FAIL">Failure: Selector "#logging-opt-in.dot" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:26:03.860" endtime="20220719 12:26:08.917"/>
</kw>
<status status="FAIL" starttime="20220719 12:26:03.860" endtime="20220719 12:26:08.918"/>
</kw>
<status status="FAIL" starttime="20220719 12:26:03.858" endtime="20220719 12:26:08.918"/>
</kw>
<msg timestamp="20220719 12:26:08.919" level="INFO">${onboarding_screen} = False</msg>
<status status="PASS" starttime="20220719 12:26:03.858" endtime="20220719 12:26:08.919"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${first_time_setup} is ${True} or ${onboarding_screen} is ${True}</arg>
<arg>ghub_onboarding.First Time Setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:26:08.919" endtime="20220719 12:26:08.920"/>
</kw>
<status status="PASS" starttime="20220719 12:25:28.673" endtime="20220719 12:26:08.920"/>
</iter>
<iter>
<var name="${INDEX}">8</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:26:13.936" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:26:08.921" endtime="20220719 12:26:13.937"/>
</kw>
<status status="FAIL" starttime="20220719 12:26:08.921" endtime="20220719 12:26:13.939"/>
</kw>
<msg timestamp="20220719 12:26:13.939" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220719 12:26:08.920" endtime="20220719 12:26:13.939"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220719 12:26:13.940" endtime="20220719 12:26:13.940"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:26:13.940" endtime="20220719 12:26:13.940"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:26:13.940" endtime="20220719 12:26:13.940"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:26:13.940" endtime="20220719 12:26:13.940"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:26:13.941" endtime="20220719 12:26:13.941"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220719 12:26:13.941" endtime="20220719 12:26:13.941"/>
</kw>
<status status="NOT RUN" starttime="20220719 12:26:13.939" endtime="20220719 12:26:13.941"/>
</branch>
<status status="PASS" starttime="20220719 12:26:13.939" endtime="20220719 12:26:13.941"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:26:13.942" level="INFO">${words} = ["//div[@class='GhubHome']"]</msg>
<status status="PASS" starttime="20220719 12:26:13.942" endtime="20220719 12:26:13.942"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:26:13.943" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:26:13.943" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:26:13.943" endtime="20220719 12:26:13.943"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:26:24.001" level="FAIL">Failure: Selector "//div[@class='GhubHome']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:26:13.944" endtime="20220719 12:26:24.001"/>
</kw>
<status status="FAIL" starttime="20220719 12:26:13.943" endtime="20220719 12:26:24.002"/>
</kw>
<status status="FAIL" starttime="20220719 12:26:13.942" endtime="20220719 12:26:24.002"/>
</kw>
<msg timestamp="20220719 12:26:24.002" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220719 12:26:13.941" endtime="20220719 12:26:24.002"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:26:24.003" endtime="20220719 12:26:24.003"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded_nodevice}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:26:24.004" level="INFO">${words} = ["//div[@class='GhubHome NoDevice']"]</msg>
<status status="PASS" starttime="20220719 12:26:24.003" endtime="20220719 12:26:24.004"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:26:24.004" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:26:24.004" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:26:24.004" endtime="20220719 12:26:24.004"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:26:34.014" level="FAIL">Failure: Selector "//div[@class='GhubHome NoDevice']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:26:24.005" endtime="20220719 12:26:34.015"/>
</kw>
<status status="FAIL" starttime="20220719 12:26:24.005" endtime="20220719 12:26:34.016"/>
</kw>
<status status="FAIL" starttime="20220719 12:26:24.003" endtime="20220719 12:26:34.018"/>
</kw>
<msg timestamp="20220719 12:26:34.018" level="INFO">${home_screen_loaded_nodevice} = False</msg>
<status status="PASS" starttime="20220719 12:26:24.003" endtime="20220719 12:26:34.018"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded_nodevice} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:26:34.018" endtime="20220719 12:26:34.019"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:26:39.023" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220719 12:26:39.025" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:26:34.019" endtime="20220719 12:26:39.025"/>
</kw>
<msg timestamp="20220719 12:26:39.026" level="INFO">${back_button_present} = False</msg>
<status status="PASS" starttime="20220719 12:26:34.019" endtime="20220719 12:26:39.026"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:26:39.028" endtime="20220719 12:26:39.028"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${first_time_setup}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:26:44.043" level="FAIL">Failure: Selector "//strong[text()='Logitech G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:26:39.029" endtime="20220719 12:26:44.043"/>
</kw>
<status status="FAIL" starttime="20220719 12:26:39.029" endtime="20220719 12:26:44.045"/>
</kw>
<msg timestamp="20220719 12:26:44.045" level="INFO">${first_time_setup} = False</msg>
<status status="PASS" starttime="20220719 12:26:39.028" endtime="20220719 12:26:44.045"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${onboarding_screen}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:26:44.047" level="INFO">${words} = ['#logging-opt-in.dot']</msg>
<status status="PASS" starttime="20220719 12:26:44.047" endtime="20220719 12:26:44.047"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:26:44.048" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:26:44.048" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:26:44.048" endtime="20220719 12:26:44.048"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:26:49.062" level="INFO">Failed to find element with selector: #logging-opt-in.dot and attributes:{}</msg>
<msg timestamp="20220719 12:26:49.064" level="FAIL">Failure: Selector "#logging-opt-in.dot" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:26:44.049" endtime="20220719 12:26:49.064"/>
</kw>
<status status="FAIL" starttime="20220719 12:26:44.048" endtime="20220719 12:26:49.066"/>
</kw>
<status status="FAIL" starttime="20220719 12:26:44.047" endtime="20220719 12:26:49.066"/>
</kw>
<msg timestamp="20220719 12:26:49.067" level="INFO">${onboarding_screen} = False</msg>
<status status="PASS" starttime="20220719 12:26:44.046" endtime="20220719 12:26:49.067"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${first_time_setup} is ${True} or ${onboarding_screen} is ${True}</arg>
<arg>ghub_onboarding.First Time Setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:26:49.067" endtime="20220719 12:26:49.067"/>
</kw>
<status status="PASS" starttime="20220719 12:26:08.920" endtime="20220719 12:26:49.067"/>
</iter>
<iter>
<var name="${INDEX}">9</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:26:54.080" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:26:49.069" endtime="20220719 12:26:54.080"/>
</kw>
<status status="FAIL" starttime="20220719 12:26:49.068" endtime="20220719 12:26:54.082"/>
</kw>
<msg timestamp="20220719 12:26:54.083" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220719 12:26:49.068" endtime="20220719 12:26:54.083"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<kw name="Log" library="BuiltIn">
<arg>&lt;b style="background-color:#fc7703;color:white;"&gt;${message}&lt;/b&gt;</arg>
<arg>WARN</arg>
<arg>html=true</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20220719 12:26:54.084" level="WARN" html="true">&lt;b style="background-color:#fc7703;color:white;"&gt;Application error arrived, restarting GHUB...&lt;/b&gt;</msg>
<status status="PASS" starttime="20220719 12:26:54.084" endtime="20220719 12:26:54.084"/>
</kw>
<status status="PASS" starttime="20220719 12:26:54.083" endtime="20220719 12:26:54.084"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<kw name="Control Lghub" library="libraries.process.Application">
<status status="PASS" starttime="20220719 12:26:54.085" endtime="20220719 12:26:54.085"/>
</kw>
<kw name="Terminate All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to terminate all associated processes (including support applications such as VirtualHere).</doc>
<status status="PASS" starttime="20220719 12:26:54.085" endtime="20220719 12:26:59.131"/>
</kw>
<status status="PASS" starttime="20220719 12:26:54.085" endtime="20220719 12:26:59.131"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 12:27:09.133" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20220719 12:26:59.132" endtime="20220719 12:27:09.133"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<kw name="Control Lghub" library="libraries.process.Application">
<status status="PASS" starttime="20220719 12:27:09.134" endtime="20220719 12:27:09.134"/>
</kw>
<kw name="Launch All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to launch all associated processes (including support applications). Already running process are
not re-launched.</doc>
<status status="PASS" starttime="20220719 12:27:09.134" endtime="20220719 12:27:21.864"/>
</kw>
<status status="PASS" starttime="20220719 12:27:09.133" endtime="20220719 12:27:21.865"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 12:27:26.868" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220719 12:27:21.867" endtime="20220719 12:27:26.868"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="PASS" starttime="20220719 12:27:26.870" endtime="20220719 12:27:32.010"/>
</kw>
<status status="PASS" starttime="20220719 12:26:54.083" endtime="20220719 12:27:32.010"/>
</branch>
<status status="PASS" starttime="20220719 12:26:54.083" endtime="20220719 12:27:32.010"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:27:32.011" level="INFO">${words} = ["//div[@class='GhubHome']"]</msg>
<status status="PASS" starttime="20220719 12:27:32.011" endtime="20220719 12:27:32.011"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:27:32.012" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:27:32.012" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:27:32.012" endtime="20220719 12:27:32.012"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:27:42.059" level="FAIL">Failure: Selector "//div[@class='GhubHome']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:27:32.013" endtime="20220719 12:27:42.059"/>
</kw>
<status status="FAIL" starttime="20220719 12:27:32.012" endtime="20220719 12:27:42.061"/>
</kw>
<status status="FAIL" starttime="20220719 12:27:32.011" endtime="20220719 12:27:42.062"/>
</kw>
<msg timestamp="20220719 12:27:42.062" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220719 12:27:32.010" endtime="20220719 12:27:42.062"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:27:42.063" endtime="20220719 12:27:42.063"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded_nodevice}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:27:42.064" level="INFO">${words} = ["//div[@class='GhubHome NoDevice']"]</msg>
<status status="PASS" starttime="20220719 12:27:42.064" endtime="20220719 12:27:42.065"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:27:42.065" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:27:42.065" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:27:42.065" endtime="20220719 12:27:42.065"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:27:52.085" level="FAIL">Failure: Selector "//div[@class='GhubHome NoDevice']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:27:42.066" endtime="20220719 12:27:52.085"/>
</kw>
<status status="FAIL" starttime="20220719 12:27:42.065" endtime="20220719 12:27:52.086"/>
</kw>
<status status="FAIL" starttime="20220719 12:27:42.064" endtime="20220719 12:27:52.088"/>
</kw>
<msg timestamp="20220719 12:27:52.088" level="INFO">${home_screen_loaded_nodevice} = False</msg>
<status status="PASS" starttime="20220719 12:27:42.063" endtime="20220719 12:27:52.088"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded_nodevice} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:27:52.088" endtime="20220719 12:27:52.089"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:27:57.108" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220719 12:27:57.110" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:27:52.090" endtime="20220719 12:27:57.110"/>
</kw>
<msg timestamp="20220719 12:27:57.111" level="INFO">${back_button_present} = False</msg>
<status status="PASS" starttime="20220719 12:27:52.090" endtime="20220719 12:27:57.111"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:27:57.112" endtime="20220719 12:27:57.112"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${first_time_setup}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:28:02.180" level="FAIL">Failure: Selector "//strong[text()='Logitech G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:27:57.113" endtime="20220719 12:28:02.180"/>
</kw>
<status status="FAIL" starttime="20220719 12:27:57.113" endtime="20220719 12:28:02.181"/>
</kw>
<msg timestamp="20220719 12:28:02.181" level="INFO">${first_time_setup} = False</msg>
<status status="PASS" starttime="20220719 12:27:57.113" endtime="20220719 12:28:02.181"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${onboarding_screen}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:28:02.184" level="INFO">${words} = ['#logging-opt-in.dot']</msg>
<status status="PASS" starttime="20220719 12:28:02.184" endtime="20220719 12:28:02.184"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:28:02.185" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:28:02.185" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:28:02.185" endtime="20220719 12:28:02.185"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:28:07.197" level="INFO">Failed to find element with selector: #logging-opt-in.dot and attributes:{}</msg>
<msg timestamp="20220719 12:28:07.197" level="FAIL">Failure: Selector "#logging-opt-in.dot" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:28:02.186" endtime="20220719 12:28:07.198"/>
</kw>
<status status="FAIL" starttime="20220719 12:28:02.185" endtime="20220719 12:28:07.198"/>
</kw>
<status status="FAIL" starttime="20220719 12:28:02.183" endtime="20220719 12:28:07.199"/>
</kw>
<msg timestamp="20220719 12:28:07.199" level="INFO">${onboarding_screen} = False</msg>
<status status="PASS" starttime="20220719 12:28:02.182" endtime="20220719 12:28:07.199"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${first_time_setup} is ${True} or ${onboarding_screen} is ${True}</arg>
<arg>ghub_onboarding.First Time Setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:28:07.199" endtime="20220719 12:28:07.200"/>
</kw>
<status status="PASS" starttime="20220719 12:26:49.067" endtime="20220719 12:28:07.200"/>
</iter>
<status status="PASS" starttime="20220719 12:20:46.712" endtime="20220719 12:28:07.200"/>
</for>
<status status="PASS" starttime="20220719 12:20:46.711" endtime="20220719 12:28:07.200"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.Set GHUB As Active Window</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Set GHUB As Active Window" library="common_keywords_kragle">
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220719 12:28:07.202" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220719 12:28:07.202" endtime="20220719 12:28:07.202"/>
</kw>
<if>
<branch type="IF" condition="${is_mac} is ${True}">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>lghub</arg>
<arg>${maximized_screen}</arg>
<status status="NOT RUN" starttime="20220719 12:28:07.203" endtime="20220719 12:28:07.203"/>
</kw>
<status status="NOT RUN" starttime="20220719 12:28:07.202" endtime="20220719 12:28:07.203"/>
</branch>
<branch type="ELSE">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>Logitech G HUB</arg>
<arg>${maximized_screen}</arg>
<status status="PASS" starttime="20220719 12:28:07.203" endtime="20220719 12:28:07.242"/>
</kw>
<status status="PASS" starttime="20220719 12:28:07.203" endtime="20220719 12:28:07.242"/>
</branch>
<status status="PASS" starttime="20220719 12:28:07.202" endtime="20220719 12:28:07.242"/>
</if>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 12:28:09.244" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20220719 12:28:07.243" endtime="20220719 12:28:09.244"/>
</kw>
<status status="PASS" starttime="20220719 12:28:07.202" endtime="20220719 12:28:09.245"/>
</kw>
<status status="PASS" starttime="20220719 12:28:07.201" endtime="20220719 12:28:09.246"/>
</kw>
<status status="PASS" starttime="20220719 12:20:09.718" endtime="20220719 12:28:09.246"/>
</kw>
<kw name="Disconnect All Devices Connected With Acroname" library="libraries.acroname_hub.device.Device">
<msg timestamp="20220719 12:28:17.313" level="INFO">1096032827
1096032827
1096032827
1096032827
1096032827
1096032827
1096032827
1096032827</msg>
<status status="PASS" starttime="20220719 12:28:09.249" endtime="20220719 12:28:17.313"/>
</kw>
<kw name="Initialize Suite">
<doc>Set global variables of json data and device connection type.</doc>
<kw name="Get App Version" library="libraries.utilities.utils">
<var>${app_version}</var>
<msg timestamp="20220719 12:28:17.316" level="INFO">${app_version} = staging/2022_7_2022.7.288146_Windows</msg>
<status status="PASS" starttime="20220719 12:28:17.313" endtime="20220719 12:28:17.316"/>
</kw>
<kw name="Get Os Type" library="libraries.utilities.utils">
<var>${os_type}</var>
<msg timestamp="20220719 12:28:17.317" level="INFO">${os_type} = Windows</msg>
<status status="PASS" starttime="20220719 12:28:17.316" endtime="20220719 12:28:17.317"/>
</kw>
<kw name="Get Platform Details" library="libraries.utilities.utils">
<var>${os_version}</var>
<msg timestamp="20220719 12:28:17.331" level="INFO">${os_version} = Windows-10-10.0.19044-SP0</msg>
<status status="PASS" starttime="20220719 12:28:17.317" endtime="20220719 12:28:17.331"/>
</kw>
<kw name="os.Verify And Set Is Windows As Global Variable" library="operating_system">
<kw name="Is Windows" library="libraries.utilities.system_volume.system_audio">
<var>${status}</var>
<msg timestamp="20220719 12:28:17.332" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220719 12:28:17.332" endtime="20220719 12:28:17.332"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${is_windows}</arg>
<arg>${status}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220719 12:28:17.343" level="INFO">${is_windows} = True</msg>
<status status="PASS" starttime="20220719 12:28:17.332" endtime="20220719 12:28:17.343"/>
</kw>
<status status="PASS" starttime="20220719 12:28:17.332" endtime="20220719 12:28:17.343"/>
</kw>
<kw name="Set Suite Documentation" library="BuiltIn">
<arg>Build Under Test: ${app_version}</arg>
<doc>Sets documentation for the current test suite.</doc>
<msg timestamp="20220719 12:28:17.344" level="INFO">Set suite documentation to:
Build Under Test: staging/2022_7_2022.7.288146_Windows</msg>
<status status="PASS" starttime="20220719 12:28:17.344" endtime="20220719 12:28:17.344"/>
</kw>
<kw name="json.Get Json Data" library="json_data_handler">
<var>${json_data}</var>
<arg>${json_data_file}</arg>
<kw name="Get Json Data" library="libraries.json_data_handler">
<var>${json_data}</var>
<arg>${json_data_file}</arg>
<doc>The get_json_data function is used to read json file and create object for it
:return: json object of the json file</doc>
<msg timestamp="20220719 12:28:17.347" level="INFO">${json_data} = {'connection_type': 'Acroname', 'devices': [{'name': 'G703 LIGHTSPEED', 'hub': 1096032827, 'portNumber': 0, 'connection_type': 'wired', 'features': {'cloud_profile': {'ui': ['Test: Local And Cloud Pro...</msg>
<status status="PASS" starttime="20220719 12:28:17.345" endtime="20220719 12:28:17.347"/>
</kw>
<msg timestamp="20220719 12:28:17.348" level="INFO">${json_data} = {'connection_type': 'Acroname', 'devices': [{'name': 'G703 LIGHTSPEED', 'hub': 1096032827, 'portNumber': 0, 'connection_type': 'wired', 'features': {'cloud_profile': {'ui': ['Test: Local And Cloud Pro...</msg>
<status status="PASS" starttime="20220719 12:28:17.344" endtime="20220719 12:28:17.348"/>
</kw>
<kw name="Save Json File" library="libraries.Listener">
<arg>${json_data_file}</arg>
<msg timestamp="20220719 12:28:17.350" level="INFO">C:\Jenkins\workspace\sion_features_navigation_screens\report</msg>
<status status="PASS" starttime="20220719 12:28:17.348" endtime="20220719 12:28:17.350"/>
</kw>
<kw name="json.Get Connection Type" library="json_data_handler">
<var>${conn_type}</var>
<arg>${json_data}</arg>
<kw name="Get Connection Type" library="libraries.json_data_handler">
<var>${conn_type}</var>
<arg>${json_data}</arg>
<doc>The get_connection_type function is used to traverse json object and get connection type
:param json_data:json object of the json file
:return: type of connection present</doc>
<msg timestamp="20220719 12:28:17.352" level="INFO">${conn_type} = Acroname</msg>
<status status="PASS" starttime="20220719 12:28:17.351" endtime="20220719 12:28:17.352"/>
</kw>
<msg timestamp="20220719 12:28:17.352" level="INFO">${conn_type} = Acroname</msg>
<status status="PASS" starttime="20220719 12:28:17.351" endtime="20220719 12:28:17.352"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${device_connection_type}</arg>
<arg>${conn_type}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220719 12:28:17.352" level="INFO">${device_connection_type} = Acroname</msg>
<status status="PASS" starttime="20220719 12:28:17.352" endtime="20220719 12:28:17.352"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${json_data}</arg>
<arg>${json_data}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220719 12:28:17.355" level="INFO">${json_data} = {'connection_type': 'Acroname', 'devices': [{'name': 'G703 LIGHTSPEED', 'hub': 1096032827, 'portNumber': 0, 'connection_type': 'wired', 'features': {'cloud_profile': {'ui': ['Test: Local And Cloud Pro...</msg>
<status status="PASS" starttime="20220719 12:28:17.353" endtime="20220719 12:28:17.355"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${os_type}</arg>
<arg>${os_type}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220719 12:28:17.355" level="INFO">${os_type} = Windows</msg>
<status status="PASS" starttime="20220719 12:28:17.355" endtime="20220719 12:28:17.355"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${os_version}</arg>
<arg>${os_version}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20220719 12:28:17.356" level="INFO">${os_version} = Windows-10-10.0.19044-SP0</msg>
<status status="PASS" starttime="20220719 12:28:17.355" endtime="20220719 12:28:17.356"/>
</kw>
<kw name="Set Variable" library="BuiltIn">
<var>${ignore_cloud_account_sync_issue}</var>
<arg>${True}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20220719 12:28:17.356" level="INFO">${ignore_cloud_account_sync_issue} = True</msg>
<status status="PASS" starttime="20220719 12:28:17.356" endtime="20220719 12:28:17.356"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${clear_settings_reqd}</arg>
<arg>common.Clear App Settings And Start Fresh With Unlocking Persistent Profile</arg>
<arg>ELSE</arg>
<arg>profile.Unlock Persistent Profile In Global Configuration</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="common.Clear App Settings And Start Fresh With Unlocking Persistent Profile" library="common_keywords_kragle">
<doc>Clear GHUB app Custom Settings And Launch The App With Default Settings With Unlocking Persistent Profile</doc>
<kw name="Log To Console" library="BuiltIn">
<arg>Clearing App Settings</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220719 12:28:17.357" endtime="20220719 12:28:17.357"/>
</kw>
<kw name="Control Lghub" library="libraries.process.Application">
<status status="PASS" starttime="20220719 12:28:17.358" endtime="20220719 12:28:17.358"/>
</kw>
<kw name="common.Clear Settings" library="common_keywords_kragle">
<doc>Related to the process.robot</doc>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=REMOVE</arg>
<arg>path=/configuration</arg>
<arg>json={}</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220719 12:28:17.359" level="INFO">{'verb': 'REMOVE', 'path': '/configuration', 'payload': {}}</msg>
<status status="PASS" starttime="20220719 12:28:17.358" endtime="20220719 12:28:17.359"/>
</kw>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>verb=REMOVE</arg>
<arg>path=/configuration</arg>
<arg>timeout=60</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220719 12:28:17.359" endtime="20220719 12:28:17.370"/>
</kw>
<status status="PASS" starttime="20220719 12:28:17.358" endtime="20220719 12:28:17.370"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<kw name="Control Lghub" library="libraries.process.Application">
<status status="PASS" starttime="20220719 12:28:17.371" endtime="20220719 12:28:17.371"/>
</kw>
<kw name="Terminate All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to terminate all associated processes (including support applications such as VirtualHere).</doc>
<status status="PASS" starttime="20220719 12:28:17.371" endtime="20220719 12:28:23.422"/>
</kw>
<status status="PASS" starttime="20220719 12:28:17.370" endtime="20220719 12:28:23.423"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 12:28:33.426" level="INFO">Slept 10 seconds</msg>
<status status="PASS" starttime="20220719 12:28:23.425" endtime="20220719 12:28:33.426"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<kw name="Control Lghub" library="libraries.process.Application">
<status status="PASS" starttime="20220719 12:28:33.430" endtime="20220719 12:28:33.430"/>
</kw>
<kw name="Launch All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to launch all associated processes (including support applications). Already running process are
not re-launched.</doc>
<status status="PASS" starttime="20220719 12:28:33.431" endtime="20220719 12:28:46.149"/>
</kw>
<status status="PASS" starttime="20220719 12:28:33.428" endtime="20220719 12:28:46.149"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 12:28:51.151" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220719 12:28:46.149" endtime="20220719 12:28:51.151"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="PASS" starttime="20220719 12:28:51.151" endtime="20220719 12:28:56.306"/>
</kw>
<kw name="common.Does GHUB Loaded" library="common_keywords_kragle">
<doc>If home screen is not loaded or back button is not present or onboarding screen is not appeared means GHUB is loading</doc>
<for flavor="IN RANGE">
<var>${INDEX}</var>
<value>0</value>
<value>10</value>
<iter>
<var name="${INDEX}">0</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:29:01.357" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:28:56.308" endtime="20220719 12:29:01.357"/>
</kw>
<status status="FAIL" starttime="20220719 12:28:56.307" endtime="20220719 12:29:01.360"/>
</kw>
<msg timestamp="20220719 12:29:01.360" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220719 12:28:56.307" endtime="20220719 12:29:01.360"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220719 12:29:01.360" endtime="20220719 12:29:01.361"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:29:01.361" endtime="20220719 12:29:01.361"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:29:01.361" endtime="20220719 12:29:01.361"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:29:01.361" endtime="20220719 12:29:01.361"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:29:01.362" endtime="20220719 12:29:01.362"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220719 12:29:01.362" endtime="20220719 12:29:01.362"/>
</kw>
<status status="NOT RUN" starttime="20220719 12:29:01.360" endtime="20220719 12:29:01.362"/>
</branch>
<status status="PASS" starttime="20220719 12:29:01.360" endtime="20220719 12:29:01.362"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:29:01.363" level="INFO">${words} = ["//div[@class='GhubHome']"]</msg>
<status status="PASS" starttime="20220719 12:29:01.363" endtime="20220719 12:29:01.363"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:29:01.364" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:29:01.364" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:29:01.363" endtime="20220719 12:29:01.364"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:29:11.414" level="FAIL">Failure: Selector "//div[@class='GhubHome']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:29:01.364" endtime="20220719 12:29:11.414"/>
</kw>
<status status="FAIL" starttime="20220719 12:29:01.364" endtime="20220719 12:29:11.416"/>
</kw>
<status status="FAIL" starttime="20220719 12:29:01.363" endtime="20220719 12:29:11.416"/>
</kw>
<msg timestamp="20220719 12:29:11.417" level="INFO">${home_screen_loaded} = False</msg>
<status status="PASS" starttime="20220719 12:29:01.362" endtime="20220719 12:29:11.417"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:29:11.417" endtime="20220719 12:29:11.417"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded_nodevice}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view_nodevice}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:29:11.418" level="INFO">${words} = ["//div[@class='GhubHome NoDevice']"]</msg>
<status status="PASS" starttime="20220719 12:29:11.418" endtime="20220719 12:29:11.418"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:29:11.419" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:29:11.419" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:29:11.419" endtime="20220719 12:29:11.419"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:29:21.429" level="FAIL">Failure: Selector "//div[@class='GhubHome NoDevice']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:29:11.420" endtime="20220719 12:29:21.429"/>
</kw>
<status status="FAIL" starttime="20220719 12:29:11.419" endtime="20220719 12:29:21.431"/>
</kw>
<status status="FAIL" starttime="20220719 12:29:11.418" endtime="20220719 12:29:21.432"/>
</kw>
<msg timestamp="20220719 12:29:21.432" level="INFO">${home_screen_loaded_nodevice} = False</msg>
<status status="PASS" starttime="20220719 12:29:11.418" endtime="20220719 12:29:21.432"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded_nodevice} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:29:21.432" endtime="20220719 12:29:21.433"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${back_button_present}</var>
<arg>Expect Element</arg>
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:29:26.446" level="INFO">Failed to find element with selector: .back-button and attributes:{}</msg>
<msg timestamp="20220719 12:29:26.448" level="FAIL">Failure: Selector ".back-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:29:21.433" endtime="20220719 12:29:26.448"/>
</kw>
<msg timestamp="20220719 12:29:26.449" level="INFO">${back_button_present} = False</msg>
<status status="PASS" starttime="20220719 12:29:21.433" endtime="20220719 12:29:26.449"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${back_button_present} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:29:26.451" endtime="20220719 12:29:26.451"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${first_time_setup}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220719 12:29:26.452" endtime="20220719 12:29:26.458"/>
</kw>
<status status="PASS" starttime="20220719 12:29:26.452" endtime="20220719 12:29:26.459"/>
</kw>
<msg timestamp="20220719 12:29:26.459" level="INFO">${first_time_setup} = True</msg>
<status status="PASS" starttime="20220719 12:29:26.451" endtime="20220719 12:29:26.459"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${onboarding_screen}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_make_my_experince_better_radio_button}</arg>
<arg>5</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:29:26.460" level="INFO">${words} = ['#logging-opt-in.dot']</msg>
<status status="PASS" starttime="20220719 12:29:26.460" endtime="20220719 12:29:26.460"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:29:26.460" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:29:26.460" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:29:26.460" endtime="20220719 12:29:26.460"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:29:31.513" level="INFO">Failed to find element with selector: #logging-opt-in.dot and attributes:{}</msg>
<msg timestamp="20220719 12:29:31.515" level="FAIL">Failure: Selector "#logging-opt-in.dot" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:29:26.461" endtime="20220719 12:29:31.516"/>
</kw>
<status status="FAIL" starttime="20220719 12:29:26.461" endtime="20220719 12:29:31.517"/>
</kw>
<status status="FAIL" starttime="20220719 12:29:26.459" endtime="20220719 12:29:31.518"/>
</kw>
<msg timestamp="20220719 12:29:31.518" level="INFO">${onboarding_screen} = False</msg>
<status status="PASS" starttime="20220719 12:29:26.459" endtime="20220719 12:29:31.518"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${first_time_setup} is ${True} or ${onboarding_screen} is ${True}</arg>
<arg>ghub_onboarding.First Time Setup</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="ghub_onboarding.First Time Setup" library="ghub_onboarding_flow_screen">
<doc>Related to the process</doc>
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${os}</var>
<msg timestamp="20220719 12:29:31.520" level="INFO">${os} = False</msg>
<status status="PASS" starttime="20220719 12:29:31.520" endtime="20220719 12:29:31.520"/>
</kw>
<kw name="Send Message" library="libraries.components.Websocket">
<arg>verb=SET</arg>
<arg>path=/configuration</arg>
<arg>json={"onboardingShown": true, "migrationShown": true, "seenCoachMarks": ["coach-mark-panel-persistent-lock", "coach-mark-color-picker", "coach-mark-lighting-effect-selector", "coach-mark-lighting-effect-edit", "coach-mark-microphone-input-gain", "coach-mark-microphone-recording", "coach-mark-microphone-enable-blue-voice", "coach-mark-lighting-effect-editor-timeline", "coach-mark-lighting-effect-editor-frame-selection", "coach-mark-microphone-advanced-settings", "coach-mark-microphone-select-preset","coach-mark-logo"]}</arg>
<doc>Asserts that a message is successfully sent to the Agent.</doc>
<msg timestamp="20220719 12:29:31.521" level="INFO">{'verb': 'SET', 'path': '/configuration', 'payload': {'onboardingShown': True, 'migrationShown': True, 'seenCoachMarks': ['coach-mark-panel-persistent-lock', 'coach-mark-color-picker', 'coach-mark-lighting-effect-selector', 'coach-mark-lighting-effect-edit', 'coach-mark-microphone-input-gain', 'coach-mark-microphone-recording', 'coach-mark-microphone-enable-blue-voice', 'coach-mark-lighting-effect-editor-timeline', 'coach-mark-lighting-effect-editor-frame-selection', 'coach-mark-microphone-advanced-settings', 'coach-mark-microphone-select-preset', 'coach-mark-logo']}}</msg>
<status status="PASS" starttime="20220719 12:29:31.520" endtime="20220719 12:29:31.521"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${backend_response}</var>
<arg>Expect Message</arg>
<arg>verb=SET</arg>
<arg>path=/configuration</arg>
<arg>timeout=120</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Expect Message" library="libraries.components.Websocket">
<arg>verb=SET</arg>
<arg>path=/configuration</arg>
<arg>timeout=120</arg>
<doc>Asserts that a message is successfully received from the Agent.</doc>
<status status="PASS" starttime="20220719 12:29:31.521" endtime="20220719 12:29:31.533"/>
</kw>
<msg timestamp="20220719 12:29:31.533" level="INFO">${backend_response} = True</msg>
<status status="PASS" starttime="20220719 12:29:31.521" endtime="20220719 12:29:31.533"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${backend_response} is ${False}</arg>
<arg>LOG WARNING</arg>
<arg>Backend Response Failed For Onboarding Screen Request</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:29:31.534" endtime="20220719 12:29:31.534"/>
</kw>
<kw name="Reload Frontend" library="libraries.process.Frontend">
<status status="PASS" starttime="20220719 12:29:31.534" endtime="20220719 12:29:31.537"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 12:29:36.540" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220719 12:29:31.537" endtime="20220719 12:29:36.540"/>
</kw>
<kw name="ghub_onboarding.Dismiss Welcome To GHUB Window" library="ghub_onboarding_flow_screen">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${welcome_window}</var>
<arg>ghub_onboarding.Is Welcome To GHUB Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Welcome To GHUB Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_welcome_to_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:29:41.595" level="FAIL">Failure: Selector "//strong[text()='Logitech G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:29:36.542" endtime="20220719 12:29:41.595"/>
</kw>
<status status="FAIL" starttime="20220719 12:29:36.541" endtime="20220719 12:29:41.598"/>
</kw>
<msg timestamp="20220719 12:29:41.598" level="INFO">${welcome_window} = False</msg>
<status status="PASS" starttime="20220719 12:29:36.541" endtime="20220719 12:29:41.598"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${welcome_window} is ${True}</arg>
<arg>common.Click On Right Scroll</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:29:41.598" endtime="20220719 12:29:41.598"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${potential_window}</var>
<arg>ghub_onboarding.Is Unlock Potentials Window Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Unlock Potentials Window Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_unlock_potentials}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:29:46.650" level="FAIL">Failure: Selector "//h1[text()='Unlock your potential']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:29:41.599" endtime="20220719 12:29:46.650"/>
</kw>
<status status="FAIL" starttime="20220719 12:29:41.599" endtime="20220719 12:29:46.652"/>
</kw>
<msg timestamp="20220719 12:29:46.652" level="INFO">${potential_window} = False</msg>
<status status="PASS" starttime="20220719 12:29:41.599" endtime="20220719 12:29:46.652"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${potential_window} is ${True}</arg>
<arg>common.Click On Right Scroll</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:29:46.653" endtime="20220719 12:29:46.653"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${launch_ghub}</var>
<arg>ghub_onboarding.Is Launch GHUB Button Present</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Is Launch GHUB Button Present" library="ghub_onboarding_flow_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>${ghub_onboarding_launch_ghub}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:29:51.722" level="FAIL">Failure: Selector "//button[text()='LAUNCH G HUB']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:29:46.654" endtime="20220719 12:29:51.723"/>
</kw>
<status status="FAIL" starttime="20220719 12:29:46.654" endtime="20220719 12:29:51.725"/>
</kw>
<msg timestamp="20220719 12:29:51.725" level="INFO">${launch_ghub} = False</msg>
<status status="PASS" starttime="20220719 12:29:46.653" endtime="20220719 12:29:51.725"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${launch_ghub} is ${True}</arg>
<arg>ghub_onboarding.Click on Launch GHUB Button</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<status status="PASS" starttime="20220719 12:29:51.725" endtime="20220719 12:29:51.725"/>
</kw>
<status status="PASS" starttime="20220719 12:29:36.540" endtime="20220719 12:29:51.726"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${status}</var>
<arg>ghub_onboarding.Dismiss G HUB Analytics and Error Logging</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="ghub_onboarding.Dismiss G HUB Analytics and Error Logging" library="ghub_onboarding_flow_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_make_my_experince_better_radio_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220719 12:29:51.727" endtime="20220719 12:29:52.270"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_share_my_usage_data_checkbox}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220719 12:29:52.272" endtime="20220719 12:29:52.808"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_send_error_logs_checkbox}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220719 12:29:52.810" endtime="20220719 12:29:53.346"/>
</kw>
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_help_improve_ghub_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220719 12:29:53.348" endtime="20220719 12:29:53.901"/>
</kw>
<status status="PASS" starttime="20220719 12:29:51.726" endtime="20220719 12:29:53.902"/>
</kw>
<msg timestamp="20220719 12:29:53.902" level="INFO">${status} = True</msg>
<status status="PASS" starttime="20220719 12:29:51.726" endtime="20220719 12:29:53.902"/>
</kw>
<if>
<branch type="IF" condition="${status} is ${False}">
<kw name="Terminate All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to terminate all associated processes (including support applications such as VirtualHere).</doc>
<status status="NOT RUN" starttime="20220719 12:29:53.905" endtime="20220719 12:29:53.906"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>8</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:29:53.906" endtime="20220719 12:29:53.906"/>
</kw>
<kw name="Launch All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to launch all associated processes (including support applications). Already running process are
not re-launched.</doc>
<status status="NOT RUN" starttime="20220719 12:29:53.907" endtime="20220719 12:29:53.907"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>8</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:29:53.907" endtime="20220719 12:29:53.907"/>
</kw>
<kw name="ghub_onboarding.Dismiss Welcome To GHUB Window" library="ghub_onboarding_flow_screen">
<status status="NOT RUN" starttime="20220719 12:29:53.907" endtime="20220719 12:29:53.907"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>ghub_onboarding.Dismiss G HUB Analytics and Error Logging</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="NOT RUN" starttime="20220719 12:29:53.908" endtime="20220719 12:29:53.908"/>
</kw>
<status status="NOT RUN" starttime="20220719 12:29:53.904" endtime="20220719 12:29:53.908"/>
</branch>
<status status="PASS" starttime="20220719 12:29:53.903" endtime="20220719 12:29:53.908"/>
</if>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>home.Skip Device Introduction</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="home.Skip Device Introduction" library="home_screen">
<doc>Skip new device introduction</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${home_skip_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220719 12:29:55.968" level="INFO">Failed to find element with selector: .splash-screen-skip-button and attributes:{}</msg>
<msg timestamp="20220719 12:29:55.971" level="FAIL">Failure: Selector ".splash-screen-skip-button" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:29:53.909" endtime="20220719 12:29:55.971"/>
</kw>
<status status="PASS" starttime="20220719 12:29:53.909" endtime="20220719 12:29:55.971"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${color_variant_button}</arg>
<arg>wait_timeout=2</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220719 12:29:58.042" level="FAIL">Failure: Selector "//*[@id="color-variant"]/button" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:29:55.973" endtime="20220719 12:29:58.043"/>
</kw>
<status status="PASS" starttime="20220719 12:29:55.973" endtime="20220719 12:29:58.043"/>
</kw>
<status status="PASS" starttime="20220719 12:29:53.909" endtime="20220719 12:29:58.044"/>
</kw>
<status status="PASS" starttime="20220719 12:29:53.908" endtime="20220719 12:29:58.044"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>ghub_onboarding.Dismiss New Version Prompt</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="ghub_onboarding.Dismiss New Version Prompt" library="ghub_onboarding_flow_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_got_it_button}</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220719 12:30:01.100" level="INFO">Failed to find element with selector: #got-it and attributes:{}</msg>
<msg timestamp="20220719 12:30:01.102" level="FAIL">Failure: Selector "#got-it" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:29:58.046" endtime="20220719 12:30:01.102"/>
</kw>
<status status="FAIL" starttime="20220719 12:29:58.045" endtime="20220719 12:30:01.105"/>
</kw>
<status status="PASS" starttime="20220719 12:29:58.045" endtime="20220719 12:30:01.105"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>ghub_onboarding.Dismiss Release Notes</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="ghub_onboarding.Dismiss Release Notes" library="ghub_onboarding_flow_screen">
<kw name="Click" library="libraries.components.React">
<arg>selector=${ghub_onboarding_cancel_button}</arg>
<arg>wait_timeout=3</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220719 12:30:04.159" level="INFO">Failed to find element with selector: .overlay-cancel and attributes:{}</msg>
<msg timestamp="20220719 12:30:04.161" level="FAIL">Failure: Selector ".overlay-cancel" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:30:01.106" endtime="20220719 12:30:04.162"/>
</kw>
<status status="FAIL" starttime="20220719 12:30:01.106" endtime="20220719 12:30:04.164"/>
</kw>
<status status="PASS" starttime="20220719 12:30:01.105" endtime="20220719 12:30:04.164"/>
</kw>
<status status="PASS" starttime="20220719 12:29:31.519" endtime="20220719 12:30:04.164"/>
</kw>
<status status="PASS" starttime="20220719 12:29:31.519" endtime="20220719 12:30:04.164"/>
</kw>
<status status="PASS" starttime="20220719 12:28:56.307" endtime="20220719 12:30:04.164"/>
</iter>
<iter>
<var name="${INDEX}">1</var>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${application_error}</var>
<arg>common.Does Application Encountered A Critical Problem</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="common.Does Application Encountered A Critical Problem" library="common_keywords_kragle">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${common_keywords_application_error}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<msg timestamp="20220719 12:30:09.220" level="FAIL">Failure: Selector "//div[text()='The application encountered a critical problem. Press OK to reload.']" is Not Loaded</msg>
<status status="FAIL" starttime="20220719 12:30:04.166" endtime="20220719 12:30:09.220"/>
</kw>
<status status="FAIL" starttime="20220719 12:30:04.165" endtime="20220719 12:30:09.223"/>
</kw>
<msg timestamp="20220719 12:30:09.223" level="INFO">${application_error} = False</msg>
<status status="PASS" starttime="20220719 12:30:04.165" endtime="20220719 12:30:09.223"/>
</kw>
<if>
<branch type="IF" condition="${application_error} is ${True} or '${INDEX}'=='9'">
<kw name="LOG WARNING" library="logging">
<arg>Application error arrived, restarting GHUB...</arg>
<doc>Log a warning in the report.
This should be used to signify an retry of action/validation that may NOT result in failure.</doc>
<status status="NOT RUN" starttime="20220719 12:30:09.223" endtime="20220719 12:30:09.223"/>
</kw>
<kw name="Terminate Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:30:09.224" endtime="20220719 12:30:09.224"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>10</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:30:09.224" endtime="20220719 12:30:09.224"/>
</kw>
<kw name="Launch Application" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:30:09.224" endtime="20220719 12:30:09.224"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:30:09.224" endtime="20220719 12:30:09.224"/>
</kw>
<kw name="Check All" library="libraries.process.Application">
<doc>Keyword to check all associated processes for an error state.</doc>
<status status="NOT RUN" starttime="20220719 12:30:09.225" endtime="20220719 12:30:09.225"/>
</kw>
<status status="NOT RUN" starttime="20220719 12:30:09.223" endtime="20220719 12:30:09.225"/>
</branch>
<status status="PASS" starttime="20220719 12:30:09.223" endtime="20220719 12:30:09.225"/>
</if>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${home_screen_loaded}</var>
<arg>Is Element Present</arg>
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Is Element Present" library="common_keywords_kragle">
<arg>${common_keywords_kragle_home_view}</arg>
<arg>10</arg>
<doc>Validates if the given element is present on the screen.
If element is not found waits for default 15 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Is Element Present | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:30:09.226" level="INFO">${words} = ["//div[@class='GhubHome']"]</msg>
<status status="PASS" starttime="20220719 12:30:09.226" endtime="20220719 12:30:09.226"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:30:09.227" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:30:09.227" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:30:09.227" endtime="20220719 12:30:09.227"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Expect Element Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Expect Element</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220719 12:30:09.227" endtime="20220719 12:30:09.235"/>
</kw>
<status status="PASS" starttime="20220719 12:30:09.227" endtime="20220719 12:30:09.235"/>
</kw>
<status status="PASS" starttime="20220719 12:30:09.225" endtime="20220719 12:30:09.235"/>
</kw>
<msg timestamp="20220719 12:30:09.235" level="INFO">${home_screen_loaded} = True</msg>
<status status="PASS" starttime="20220719 12:30:09.225" endtime="20220719 12:30:09.235"/>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<arg>${home_screen_loaded} is ${True}</arg>
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<msg timestamp="20220719 12:30:09.236" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20220719 12:30:09.236" endtime="20220719 12:30:09.236"/>
</kw>
<status status="PASS" starttime="20220719 12:30:04.164" endtime="20220719 12:30:09.236"/>
</iter>
<status status="PASS" starttime="20220719 12:28:56.306" endtime="20220719 12:30:09.236"/>
</for>
<status status="PASS" starttime="20220719 12:28:56.306" endtime="20220719 12:30:09.236"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.Set GHUB As Active Window</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Set GHUB As Active Window" library="common_keywords_kragle">
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220719 12:30:09.238" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220719 12:30:09.238" endtime="20220719 12:30:09.238"/>
</kw>
<if>
<branch type="IF" condition="${is_mac} is ${True}">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>lghub</arg>
<arg>${maximized_screen}</arg>
<status status="NOT RUN" starttime="20220719 12:30:09.238" endtime="20220719 12:30:09.238"/>
</kw>
<status status="NOT RUN" starttime="20220719 12:30:09.238" endtime="20220719 12:30:09.238"/>
</branch>
<branch type="ELSE">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>Logitech G HUB</arg>
<arg>${maximized_screen}</arg>
<status status="PASS" starttime="20220719 12:30:09.239" endtime="20220719 12:30:09.254"/>
</kw>
<status status="PASS" starttime="20220719 12:30:09.238" endtime="20220719 12:30:09.254"/>
</branch>
<status status="PASS" starttime="20220719 12:30:09.238" endtime="20220719 12:30:09.254"/>
</if>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 12:30:11.255" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20220719 12:30:09.254" endtime="20220719 12:30:11.255"/>
</kw>
<status status="PASS" starttime="20220719 12:30:09.237" endtime="20220719 12:30:11.256"/>
</kw>
<status status="PASS" starttime="20220719 12:30:09.237" endtime="20220719 12:30:11.257"/>
</kw>
<kw name="profile.Unlock Persistent Profile In Global Configuration" library="profile">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.set ghub as active window</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="common.Set GHUB As Active Window" library="common_keywords_kragle">
<kw name="Is Darwin" library="libraries.utilities.system_volume.system_audio">
<var>${is_mac}</var>
<msg timestamp="20220719 12:30:11.261" level="INFO">${is_mac} = False</msg>
<status status="PASS" starttime="20220719 12:30:11.261" endtime="20220719 12:30:11.261"/>
</kw>
<if>
<branch type="IF" condition="${is_mac} is ${True}">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>lghub</arg>
<arg>${maximized_screen}</arg>
<status status="NOT RUN" starttime="20220719 12:30:11.262" endtime="20220719 12:30:11.262"/>
</kw>
<status status="NOT RUN" starttime="20220719 12:30:11.262" endtime="20220719 12:30:11.262"/>
</branch>
<branch type="ELSE">
<kw name="Set Active Window" library="libraries.utilities.utils">
<arg>Logitech G HUB</arg>
<arg>${maximized_screen}</arg>
<status status="PASS" starttime="20220719 12:30:11.262" endtime="20220719 12:30:11.264"/>
</kw>
<status status="PASS" starttime="20220719 12:30:11.262" endtime="20220719 12:30:11.264"/>
</branch>
<status status="PASS" starttime="20220719 12:30:11.261" endtime="20220719 12:30:11.264"/>
</if>
<kw name="Sleep" library="BuiltIn">
<arg>2</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 12:30:13.266" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20220719 12:30:11.266" endtime="20220719 12:30:13.266"/>
</kw>
<status status="PASS" starttime="20220719 12:30:11.261" endtime="20220719 12:30:13.267"/>
</kw>
<status status="PASS" starttime="20220719 12:30:11.260" endtime="20220719 12:30:13.268"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Unlocking Persistent Profile...</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220719 12:30:13.270" endtime="20220719 12:30:13.270"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>home.Click on Hamburger Icon</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="home.Click on Hamburger Icon" library="home_screen">
<kw name="home.Click On GOT IT For Hamburger Tool Tip" library="home_screen">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Click</arg>
<arg>selector=${hamburger_tool_tip}</arg>
<arg>wait_timeout=10</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${hamburger_tool_tip}</arg>
<arg>wait_timeout=10</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<msg timestamp="20220719 12:30:18.849" level="INFO">WebDriverException in click(): Message: element not interactable
  (Session info: chrome=100.0.4896.143)
  (Driver info: chromedriver=2.44.609538 (b655c5a60b0b544917107a59d4153d4bf78e1b90),platform=Windows NT 10.0.19044 x86_64)</msg>
<msg timestamp="20220719 12:30:18.849" level="FAIL">Failure: Selector "//button[text()='GOT IT']" is Not Clickable</msg>
<status status="FAIL" starttime="20220719 12:30:13.272" endtime="20220719 12:30:18.850"/>
</kw>
<status status="PASS" starttime="20220719 12:30:13.272" endtime="20220719 12:30:18.850"/>
</kw>
<status status="PASS" starttime="20220719 12:30:13.272" endtime="20220719 12:30:18.850"/>
</kw>
<kw name="Click UI" library="common_keywords_kragle">
<arg>${home_hamburger_icon}</arg>
<arg>10</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 10 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:30:18.852" level="INFO">${words} = ['.header-animated-icon']</msg>
<status status="PASS" starttime="20220719 12:30:18.852" endtime="20220719 12:30:18.852"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:30:18.853" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:30:18.853" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:30:18.853" endtime="20220719 12:30:18.853"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220719 12:30:18.854" endtime="20220719 12:30:19.399"/>
</kw>
<status status="PASS" starttime="20220719 12:30:18.854" endtime="20220719 12:30:19.400"/>
</kw>
<status status="PASS" starttime="20220719 12:30:18.851" endtime="20220719 12:30:19.400"/>
</kw>
<status status="PASS" starttime="20220719 12:30:13.271" endtime="20220719 12:30:19.401"/>
</kw>
<status status="PASS" starttime="20220719 12:30:13.271" endtime="20220719 12:30:19.402"/>
</kw>
<kw name="home.Click On Settings" library="home_screen">
<kw name="Click UI" library="common_keywords_kragle">
<arg>${home_settings_icon}</arg>
<arg>4</arg>
<doc>Performs the click action on the given element,
If element is not found waits for default 10 sec and throws back the error
wait_timeout can be specified in case if it needs to be altered dynamically
Ex: Click UI | element_id | wait_timeout=10</doc>
<kw name="Split String" library="String">
<var>${words}</var>
<arg>${element}</arg>
<arg>::</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20220719 12:30:19.405" level="INFO">${words} = ['.dls-navigation__list-item:nth-child(5)']</msg>
<status status="PASS" starttime="20220719 12:30:19.404" endtime="20220719 12:30:19.405"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${count}</var>
<arg>${words}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20220719 12:30:19.405" level="INFO">Length is 1</msg>
<msg timestamp="20220719 12:30:19.405" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20220719 12:30:19.405" endtime="20220719 12:30:19.405"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${count} &gt; 1</arg>
<arg>__Click UI Based On Attribute__</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>${wait_timeout}</arg>
<arg>ELSE</arg>
<arg>Click</arg>
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${words}[0]</arg>
<arg>wait_timeout=${wait_timeout}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220719 12:30:19.406" endtime="20220719 12:30:19.968"/>
</kw>
<status status="PASS" starttime="20220719 12:30:19.405" endtime="20220719 12:30:19.968"/>
</kw>
<status status="PASS" starttime="20220719 12:30:19.404" endtime="20220719 12:30:19.968"/>
</kw>
<status status="PASS" starttime="20220719 12:30:19.404" endtime="20220719 12:30:19.968"/>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${setting_page}</var>
<arg>global_settings.Is Setting Page Loaded</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="global_settings.Is Setting Page Loaded" library="global_settings_screen">
<kw name="Expect Element" library="libraries.components.React">
<arg>selector=${global_app_settings_page}</arg>
<arg>wait_timeout=5</arg>
<doc>Asserts that an element is loaded in a timely manner.
Timeout can be specified by passing a wait_timeout in seconds.</doc>
<status status="PASS" starttime="20220719 12:30:19.970" endtime="20220719 12:30:19.980"/>
</kw>
<status status="PASS" starttime="20220719 12:30:19.969" endtime="20220719 12:30:19.980"/>
</kw>
<msg timestamp="20220719 12:30:19.980" level="INFO">${setting_page} = True</msg>
<status status="PASS" starttime="20220719 12:30:19.969" endtime="20220719 12:30:19.980"/>
</kw>
<if>
<branch type="IF" condition="${setting_page}==${False}">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>home.Click on Hamburger Icon</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="NOT RUN" starttime="20220719 12:30:19.981" endtime="20220719 12:30:19.981"/>
</kw>
<kw name="common.Go Back To Home Screen" library="common_keywords_kragle">
<status status="NOT RUN" starttime="20220719 12:30:19.982" endtime="20220719 12:30:19.982"/>
</kw>
<kw name="home.Click On Settings" library="home_screen">
<status status="NOT RUN" starttime="20220719 12:30:19.982" endtime="20220719 12:30:19.982"/>
</kw>
<status status="NOT RUN" starttime="20220719 12:30:19.981" endtime="20220719 12:30:19.982"/>
</branch>
<status status="PASS" starttime="20220719 12:30:19.981" endtime="20220719 12:30:19.983"/>
</if>
<kw name="global_settings.Click On Persistent Profile Dropdown" library="global_settings_screen">
<kw name="Click" library="libraries.components.React">
<arg>${global_settings_persistent_profile_dropdown}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220719 12:30:19.984" endtime="20220719 12:30:20.532"/>
</kw>
<status status="PASS" starttime="20220719 12:30:19.983" endtime="20220719 12:30:20.533"/>
</kw>
<kw name="global_settings.Select None From Persistent Profile Dropdown" library="global_settings_screen">
<kw name="Click" library="libraries.components.React">
<arg>${global_settings_persistent_profile_none}</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220719 12:30:20.537" endtime="20220719 12:30:21.065"/>
</kw>
<status status="PASS" starttime="20220719 12:30:20.536" endtime="20220719 12:30:21.066"/>
</kw>
<kw name="common.Click On Back" library="common_keywords_kragle">
<doc>Clicks on the Back Button</doc>
<kw name="Click" library="libraries.components.React">
<arg>selector=${common_keywords_kragle_back_button}</arg>
<arg>wait_timeout=1</arg>
<doc>Asserts that an element successfully receives a click event.</doc>
<status status="PASS" starttime="20220719 12:30:21.070" endtime="20220719 12:30:21.615"/>
</kw>
<status status="PASS" starttime="20220719 12:30:21.068" endtime="20220719 12:30:21.615"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>Unlocked Persistent Profile</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20220719 12:30:21.615" endtime="20220719 12:30:21.616"/>
</kw>
<status status="PASS" starttime="20220719 12:30:11.259" endtime="20220719 12:30:21.616"/>
</kw>
<status status="PASS" starttime="20220719 12:28:17.357" endtime="20220719 12:30:21.616"/>
</kw>
<status status="PASS" starttime="20220719 12:28:17.356" endtime="20220719 12:30:21.616"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${is_login_reqd}</arg>
<arg>ghub.Login Cloud Account</arg>
<arg>${EMAIL}</arg>
<arg>${PASSWORD}</arg>
<arg>${ignore_cloud_account_sync_issue}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="ghub.Login Cloud Account" library="ghub_account">
<arg>${EMAIL}</arg>
<arg>${PASSWORD}</arg>
<arg>${ignore_cloud_account_sync_issue}</arg>
<kw name="Login" library="libraries.utilities.login.Login">
<arg>${EMAIL}</arg>
<arg>${PASSWORD}</arg>
<arg>${ignore_cloud_account_sync_issue}</arg>
<doc>Description: Click on account avatar button in GHUB home screen then enter the email id and
password in launched browser and click on 'Open LGHUB' prompt button in browser to sign in.</doc>
<msg timestamp="20220719 12:30:27.353" level="INFO">Failed to find element with selector: login-loading-text and attributes:{}</msg>
<msg timestamp="20220719 12:30:33.537" level="INFO">Signing out: gfffgf</msg>
<msg timestamp="20220719 12:30:39.112" level="INFO">Imported existing &lt;module 'comtypes.gen' from 'C:\\Python39\\lib\\site-packages\\comtypes\\gen\\__init__.py'&gt;</msg>
<msg timestamp="20220719 12:30:39.112" level="INFO">Using writeable comtypes cache directory: 'C:\Python39\lib\site-packages\comtypes\gen'</msg>
<msg timestamp="20220719 12:31:50.225" level="INFO">2022-07-19 12:31:50.224 login.py[118] _click_on_open_lghub_button -&gt; Find Control Timeout: {Name: 'Open LGHUB', ControlType: ButtonControl}</msg>
<msg timestamp="20220719 12:31:50.229" level="FAIL">LookupError: Find Control Timeout: {Name: 'Open LGHUB', ControlType: ButtonControl}</msg>
<status status="FAIL" starttime="20220719 12:30:21.618" endtime="20220719 12:31:50.229"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 12:31:50.230" endtime="20220719 12:31:50.230"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>common.Click On Back</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<status status="NOT RUN" starttime="20220719 12:31:50.230" endtime="20220719 12:31:50.230"/>
</kw>
<status status="FAIL" starttime="20220719 12:30:21.617" endtime="20220719 12:31:50.230"/>
</kw>
<status status="FAIL" starttime="20220719 12:30:21.617" endtime="20220719 12:31:50.231"/>
</kw>
<status status="FAIL" starttime="20220719 12:28:17.313" endtime="20220719 12:31:50.231"/>
</kw>
<status status="FAIL" starttime="20220719 12:20:09.717" endtime="20220719 12:31:50.231"/>
</kw>
<test id="s1-t1" name="Test Application Specific Test Cases">
<doc>It runs application specific test cases</doc>
<tag>Pre-setup: application_specific</tag>
<status status="FAIL" starttime="20220719 12:31:50.231" endtime="20220719 12:31:50.246">*HTML*Parent suite setup failed:
LookupError: Find Control Timeout: {Name: 'Open LGHUB', ControlType: ButtonControl} 

 &lt;a href=NA&gt;DEBUG_LOGS&lt;/a&gt; 

 &lt;a href=NA&gt;SCREENSHOT&lt;/a&gt; 

 &lt;a href=NA&gt;PAGE_SOURCE&lt;/a&gt;</status>
</test>
<test id="s1-t2" name="Test Device Specific Test Cases">
<doc>It runs device specific test cases depending on features for UI, System and Robotics.</doc>
<tag>Pre-setup: device_specific</tag>
<status status="FAIL" starttime="20220719 12:32:34.234" endtime="20220719 12:32:34.235">*HTML*Parent suite setup failed:
LookupError: Find Control Timeout: {Name: 'Open LGHUB', ControlType: ButtonControl} 

 &lt;a href=NA&gt;DEBUG_LOGS&lt;/a&gt; 

 &lt;a href=NA&gt;SCREENSHOT&lt;/a&gt; 

 &lt;a href=NA&gt;PAGE_SOURCE&lt;/a&gt;</status>
</test>
<kw name="Run Keywords" library="BuiltIn" type="TEARDOWN">
<arg>Disconnect All Devices Connected With Acroname</arg>
<arg>AND</arg>
<arg>Close iTriggerBox</arg>
<arg>AND</arg>
<arg>Terminate All</arg>
<arg>skip_rack=True</arg>
<doc>Executes all the given keywords in a sequence.</doc>
<kw name="Disconnect All Devices Connected With Acroname" library="libraries.acroname_hub.device.Device">
<msg timestamp="20220719 12:33:25.271" level="INFO">1096032827
1096032827
1096032827
1096032827
1096032827
1096032827
1096032827
1096032827</msg>
<status status="PASS" starttime="20220719 12:33:17.228" endtime="20220719 12:33:25.271"/>
</kw>
<kw name="Close ITriggerBox" library="tools.python.mindstorm.itriggerbox.keywords.device.Device">
<msg timestamp="20220719 12:33:25.274" level="INFO">No Connection Found with iTriggerBox. Skipping the step!</msg>
<status status="PASS" starttime="20220719 12:33:25.273" endtime="20220719 12:33:25.274"/>
</kw>
<kw name="Terminate All" library="libraries.process.Application">
<arg>skip_rack=True</arg>
<doc>Keyword to terminate all associated processes (including support applications such as VirtualHere).</doc>
<status status="PASS" starttime="20220719 12:33:25.276" endtime="20220719 12:33:30.321"/>
</kw>
<status status="PASS" starttime="20220719 12:33:17.227" endtime="20220719 12:33:30.321"/>
</kw>
<doc>Build Under Test: staging/2022_7_2022.7.288146_Windows</doc>
<status status="FAIL" starttime="20220719 12:20:00.079" endtime="20220719 12:33:30.321">Suite setup failed:
LookupError: Find Control Timeout: {Name: 'Open LGHUB', ControlType: ButtonControl}</status>
</suite>
<statistics>
<total>
<stat pass="0" fail="2" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1" skip="0">Pre-setup: application_specific</stat>
<stat pass="0" fail="1" skip="0">Pre-setup: device_specific</stat>
</tag>
<suite>
<stat pass="0" fail="2" skip="0" id="s1" name="Kragle Regression">Kragle Regression</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20220719 12:26:54.084" level="WARN" html="true">&lt;b style="background-color:#fc7703;color:white;"&gt;Application error arrived, restarting GHUB...&lt;/b&gt;</msg>
<msg timestamp="20220719 12:31:50.268" level="ERROR" html="true">Parent suite setup failed:
LookupError: Find Control Timeout: {Name: 'Open LGHUB', ControlType: ButtonControl}
Failure Log: DUT: NA, Test_Name: Test Application Specific Test Cases, KW: Expect Element</msg>
<msg timestamp="20220719 12:32:34.247" level="ERROR" html="true">Parent suite setup failed:
LookupError: Find Control Timeout: {Name: 'Open LGHUB', ControlType: ButtonControl}
Failure Log: DUT: NA, Test_Name: Test Device Specific Test Cases, KW: NA</msg>
</errors>
</robot>
